Kernels:
- name: awkward_new_Identities
  specializations:
  - args:
    - toptr: int64_t
    - length: int64_t
    name: awkward_new_Identities64
  - args:
    - toptr: int32_t
    - length: int64_t
    name: awkward_new_Identities32
  specification: "def awkward_new_Identities(toptr, length):\n    for i in range(int(length)):\n\
    \        toptr[i] = i\n"
- args:
  - toptr: int32_t
  - length: int64_t
  name: awkward_new_Identities32
  specification: "def awkward_new_Identities32(toptr, length):\n    return awkward_new_Identities(toptr,\
    \ length)\n"
- args:
  - toptr: int64_t
  - length: int64_t
  name: awkward_new_Identities64
  specification: "def awkward_new_Identities64(toptr, length):\n    return awkward_new_Identities(toptr,\
    \ length)\n"
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - length: int64_t
  - width: int64_t
  name: awkward_Identities32_to_Identities64
  specification: "def awkward_Identities32_to_Identities64(toptr, fromptr, length,\
    \ width):\n    for i in range(int(length * width)):\n        toptr[i] = int(fromptr[i])\n"
- name: awkward_Identities_from_ListOffsetArray
  specializations:
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromoffsets: uint32_t
    - fromptroffset: int64_t
    - offsetsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_ListOffsetArrayU32
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromoffsets: int32_t
    - fromptroffset: int64_t
    - offsetsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_ListOffsetArray32
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromoffsets: int32_t
    - fromptroffset: int64_t
    - offsetsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_ListOffsetArray32
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromoffsets: int64_t
    - fromptroffset: int64_t
    - offsetsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_ListOffsetArray64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromoffsets: int64_t
    - fromptroffset: int64_t
    - offsetsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_ListOffsetArray64
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromoffsets: uint32_t
    - fromptroffset: int64_t
    - offsetsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_ListOffsetArrayU32
  specification: "def awkward_Identities_from_ListOffsetArray(\n    toptr,\n    fromptr,\n\
    \    fromoffsets,\n    fromptroffset,\n    offsetsoffset,\n    tolength,\n   \
    \ fromlength,\n    fromwidth,\n):\n    globalstart = fromoffsets[offsetsoffset]\n\
    \    globalstop = fromoffsets[offsetsoffset + fromlength]\n    for k in range(int(globalstart\
    \ * (fromwidth + 1))):\n        toptr[k] = -1\n    k = globalstop * (fromwidth\
    \ + 1)\n    while k < (tolength * (fromwidth + 1)):\n        toptr[k] = -1\n \
    \       k = k + 1\n    for i in range(int(fromlength)):\n        start = fromoffsets[offsetsoffset\
    \ + i]\n        stop = fromoffsets[(offsetsoffset + i) + 1]\n        if (start\
    \ != stop) and (stop > tolength):\n            raise ValueError(\"max(stop) >\
    \ len(content)\")\n        for j in range(int(start), stop):\n            for\
    \ k in range(int(fromwidth)):\n                toptr[(j * (fromwidth + 1)) + k]\
    \ = fromptr[\n                    (fromptroffset + (i * fromwidth)) + k\n    \
    \            ]\n            toptr[(j * (fromwidth + 1)) + fromwidth] = float(j\
    \ - start)\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromoffsets: int32_t
  - fromptroffset: int64_t
  - offsetsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_ListOffsetArray32
  specification: "def awkward_Identities32_from_ListOffsetArray32(\n    toptr,\n \
    \   fromptr,\n    fromoffsets,\n    fromptroffset,\n    offsetsoffset,\n    tolength,\n\
    \    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_ListOffsetArray(\n\
    \        toptr,\n        fromptr,\n        fromoffsets,\n        fromptroffset,\n\
    \        offsetsoffset,\n        tolength,\n        fromlength,\n        fromwidth,\n\
    \    )\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromoffsets: uint32_t
  - fromptroffset: int64_t
  - offsetsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_ListOffsetArrayU32
  specification: "def awkward_Identities32_from_ListOffsetArrayU32(\n    toptr,\n\
    \    fromptr,\n    fromoffsets,\n    fromptroffset,\n    offsetsoffset,\n    tolength,\n\
    \    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_ListOffsetArray(\n\
    \        toptr,\n        fromptr,\n        fromoffsets,\n        fromptroffset,\n\
    \        offsetsoffset,\n        tolength,\n        fromlength,\n        fromwidth,\n\
    \    )\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromoffsets: int64_t
  - fromptroffset: int64_t
  - offsetsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_ListOffsetArray64
  specification: "def awkward_Identities32_from_ListOffsetArray64(\n    toptr,\n \
    \   fromptr,\n    fromoffsets,\n    fromptroffset,\n    offsetsoffset,\n    tolength,\n\
    \    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_ListOffsetArray(\n\
    \        toptr,\n        fromptr,\n        fromoffsets,\n        fromptroffset,\n\
    \        offsetsoffset,\n        tolength,\n        fromlength,\n        fromwidth,\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromoffsets: int32_t
  - fromptroffset: int64_t
  - offsetsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_ListOffsetArray32
  specification: "def awkward_Identities64_from_ListOffsetArray32(\n    toptr,\n \
    \   fromptr,\n    fromoffsets,\n    fromptroffset,\n    offsetsoffset,\n    tolength,\n\
    \    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_ListOffsetArray(\n\
    \        toptr,\n        fromptr,\n        fromoffsets,\n        fromptroffset,\n\
    \        offsetsoffset,\n        tolength,\n        fromlength,\n        fromwidth,\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromoffsets: uint32_t
  - fromptroffset: int64_t
  - offsetsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_ListOffsetArrayU32
  specification: "def awkward_Identities64_from_ListOffsetArrayU32(\n    toptr,\n\
    \    fromptr,\n    fromoffsets,\n    fromptroffset,\n    offsetsoffset,\n    tolength,\n\
    \    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_ListOffsetArray(\n\
    \        toptr,\n        fromptr,\n        fromoffsets,\n        fromptroffset,\n\
    \        offsetsoffset,\n        tolength,\n        fromlength,\n        fromwidth,\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromoffsets: int64_t
  - fromptroffset: int64_t
  - offsetsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_ListOffsetArray64
  specification: "def awkward_Identities64_from_ListOffsetArray64(\n    toptr,\n \
    \   fromptr,\n    fromoffsets,\n    fromptroffset,\n    offsetsoffset,\n    tolength,\n\
    \    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_ListOffsetArray(\n\
    \        toptr,\n        fromptr,\n        fromoffsets,\n        fromptroffset,\n\
    \        offsetsoffset,\n        tolength,\n        fromlength,\n        fromwidth,\n\
    \    )\n"
- name: awkward_Identities_from_ListArray
  specializations:
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - fromptroffset: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_ListArray32
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - fromptroffset: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_ListArray64
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - fromptroffset: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_ListArrayU32
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - fromptroffset: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_ListArray64
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - fromptroffset: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_ListArray32
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - fromptroffset: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_ListArrayU32
  specification: "def awkward_Identities_from_ListArray(\n    uniquecontents,\n  \
    \  toptr,\n    fromptr,\n    fromstarts,\n    fromstops,\n    fromptroffset,\n\
    \    startsoffset,\n    stopsoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    ):\n    for k in range(int(tolength * (fromwidth + 1))):\n        toptr[k] = -1\n\
    \    for i in range(int(fromlength)):\n        start = fromstarts[startsoffset\
    \ + i]\n        stop = fromstops[stopsoffset + i]\n        if (start != stop)\
    \ and (stop > tolength):\n            raise ValueError(\"max(stop) > len(content)\"\
    )\n        for j in range(int(start), stop):\n            if toptr[(j * (fromwidth\
    \ + 1)) + fromwidth] != -1:\n                uniquecontents[0] = False\n     \
    \           return\n            for k in range(int(fromwidth)):\n            \
    \    toptr[(j * (fromwidth + 1)) + k] = fromptr[\n                    (fromptroffset\
    \ + (i * fromwidth)) + k\n                ]\n            toptr[(j * (fromwidth\
    \ + 1)) + fromwidth] = float(j - start)\n    uniquecontents[0] = True\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - fromptroffset: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_ListArray32
  specification: "def awkward_Identities32_from_ListArray32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromstarts,\n    fromstops,\n    fromptroffset,\n\
    \    startsoffset,\n    stopsoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    ):\n    return awkward_Identities_from_ListArray(\n        uniquecontents,\n \
    \       toptr,\n        fromptr,\n        fromstarts,\n        fromstops,\n  \
    \      fromptroffset,\n        startsoffset,\n        stopsoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - fromptroffset: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_ListArrayU32
  specification: "def awkward_Identities32_from_ListArrayU32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromstarts,\n    fromstops,\n    fromptroffset,\n\
    \    startsoffset,\n    stopsoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    ):\n    return awkward_Identities_from_ListArray(\n        uniquecontents,\n \
    \       toptr,\n        fromptr,\n        fromstarts,\n        fromstops,\n  \
    \      fromptroffset,\n        startsoffset,\n        stopsoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - fromptroffset: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_ListArray64
  specification: "def awkward_Identities32_from_ListArray64(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromstarts,\n    fromstops,\n    fromptroffset,\n\
    \    startsoffset,\n    stopsoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    ):\n    return awkward_Identities_from_ListArray(\n        uniquecontents,\n \
    \       toptr,\n        fromptr,\n        fromstarts,\n        fromstops,\n  \
    \      fromptroffset,\n        startsoffset,\n        stopsoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - fromptroffset: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_ListArray32
  specification: "def awkward_Identities64_from_ListArray32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromstarts,\n    fromstops,\n    fromptroffset,\n\
    \    startsoffset,\n    stopsoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    ):\n    return awkward_Identities_from_ListArray(\n        uniquecontents,\n \
    \       toptr,\n        fromptr,\n        fromstarts,\n        fromstops,\n  \
    \      fromptroffset,\n        startsoffset,\n        stopsoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - fromptroffset: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_ListArrayU32
  specification: "def awkward_Identities64_from_ListArrayU32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromstarts,\n    fromstops,\n    fromptroffset,\n\
    \    startsoffset,\n    stopsoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    ):\n    return awkward_Identities_from_ListArray(\n        uniquecontents,\n \
    \       toptr,\n        fromptr,\n        fromstarts,\n        fromstops,\n  \
    \      fromptroffset,\n        startsoffset,\n        stopsoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - fromptroffset: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_ListArray64
  specification: "def awkward_Identities64_from_ListArray64(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromstarts,\n    fromstops,\n    fromptroffset,\n\
    \    startsoffset,\n    stopsoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    ):\n    return awkward_Identities_from_ListArray(\n        uniquecontents,\n \
    \       toptr,\n        fromptr,\n        fromstarts,\n        fromstops,\n  \
    \      fromptroffset,\n        startsoffset,\n        stopsoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n    )\n"
- name: awkward_Identities_from_RegularArray
  specializations:
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - size: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_RegularArray
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - size: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_RegularArray
  specification: "def awkward_Identities_from_RegularArray(\n    toptr, fromptr, fromptroffset,\
    \ size, tolength, fromlength, fromwidth\n):\n    for i in range(int(fromlength)):\n\
    \        for j in range(int(size)):\n            for k in range(int(fromwidth)):\n\
    \                toptr[(((i * size) + j) * (fromwidth + 1)) + k] = fromptr[\n\
    \                    (fromptroffset + (i * fromwidth)) + k\n                ]\n\
    \            toptr[(((i * size) + j) * (fromwidth + 1)) + fromwidth] = float(j)\n\
    \    k = ((fromlength + 1) * size) * (fromwidth + 1)\n    while k < (tolength\
    \ * (fromwidth + 1)):\n        toptr[k] = -1\n        k = k + 1\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - size: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_RegularArray
  specification: "def awkward_Identities32_from_RegularArray(\n    toptr, fromptr,\
    \ fromptroffset, size, tolength, fromlength, fromwidth\n):\n    return awkward_Identities_from_RegularArray(\n\
    \        toptr, fromptr, fromptroffset, size, tolength, fromlength, fromwidth\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - size: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_RegularArray
  specification: "def awkward_Identities64_from_RegularArray(\n    toptr, fromptr,\
    \ fromptroffset, size, tolength, fromlength, fromwidth\n):\n    return awkward_Identities_from_RegularArray(\n\
    \        toptr, fromptr, fromptroffset, size, tolength, fromlength, fromwidth\n\
    \    )\n"
- name: awkward_Identities_from_IndexedArray
  specializations:
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromindex: int32_t
    - fromptroffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_IndexedArray32
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromindex: int32_t
    - fromptroffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_IndexedArray32
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromindex: uint32_t
    - fromptroffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_IndexedArrayU32
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromindex: uint32_t
    - fromptroffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_IndexedArrayU32
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromindex: int64_t
    - fromptroffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities64_from_IndexedArray64
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromindex: int64_t
    - fromptroffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    name: awkward_Identities32_from_IndexedArray64
  specification: "def awkward_Identities_from_IndexedArray(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromindex,\n    fromptroffset,\n    indexoffset,\n\
    \    tolength,\n    fromlength,\n    fromwidth,\n):\n    for k in range(int(tolength\
    \ * fromwidth)):\n        toptr[k] = -1\n    for i in range(int(fromlength)):\n\
    \        j = fromindex[indexoffset + i]\n        if j >= tolength:\n         \
    \   raise ValueError(\"max(index) > len(content)\")\n        else:\n         \
    \   if j >= 0:\n                if toptr[j * fromwidth] != -1:\n             \
    \       uniquecontents[0] = False\n                    return\n              \
    \  for k in range(int(fromwidth)):\n                    toptr[(j * fromwidth)\
    \ + k] = fromptr[\n                        (fromptroffset + (i * fromwidth)) +\
    \ k\n                    ]\n    uniquecontents[0] = True\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromindex: int32_t
  - fromptroffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_IndexedArray32
  specification: "def awkward_Identities32_from_IndexedArray32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromindex,\n    fromptroffset,\n    indexoffset,\n\
    \    tolength,\n    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_IndexedArray(\n\
    \        uniquecontents,\n        toptr,\n        fromptr,\n        fromindex,\n\
    \        fromptroffset,\n        indexoffset,\n        tolength,\n        fromlength,\n\
    \        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromindex: uint32_t
  - fromptroffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_IndexedArrayU32
  specification: "def awkward_Identities32_from_IndexedArrayU32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromindex,\n    fromptroffset,\n    indexoffset,\n\
    \    tolength,\n    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_IndexedArray(\n\
    \        uniquecontents,\n        toptr,\n        fromptr,\n        fromindex,\n\
    \        fromptroffset,\n        indexoffset,\n        tolength,\n        fromlength,\n\
    \        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromindex: int64_t
  - fromptroffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities32_from_IndexedArray64
  specification: "def awkward_Identities32_from_IndexedArray64(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromindex,\n    fromptroffset,\n    indexoffset,\n\
    \    tolength,\n    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_IndexedArray(\n\
    \        uniquecontents,\n        toptr,\n        fromptr,\n        fromindex,\n\
    \        fromptroffset,\n        indexoffset,\n        tolength,\n        fromlength,\n\
    \        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromindex: int32_t
  - fromptroffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_IndexedArray32
  specification: "def awkward_Identities64_from_IndexedArray32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromindex,\n    fromptroffset,\n    indexoffset,\n\
    \    tolength,\n    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_IndexedArray(\n\
    \        uniquecontents,\n        toptr,\n        fromptr,\n        fromindex,\n\
    \        fromptroffset,\n        indexoffset,\n        tolength,\n        fromlength,\n\
    \        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromindex: uint32_t
  - fromptroffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_IndexedArrayU32
  specification: "def awkward_Identities64_from_IndexedArrayU32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromindex,\n    fromptroffset,\n    indexoffset,\n\
    \    tolength,\n    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_IndexedArray(\n\
    \        uniquecontents,\n        toptr,\n        fromptr,\n        fromindex,\n\
    \        fromptroffset,\n        indexoffset,\n        tolength,\n        fromlength,\n\
    \        fromwidth,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromindex: int64_t
  - fromptroffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  name: awkward_Identities64_from_IndexedArray64
  specification: "def awkward_Identities64_from_IndexedArray64(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromindex,\n    fromptroffset,\n    indexoffset,\n\
    \    tolength,\n    fromlength,\n    fromwidth,\n):\n    return awkward_Identities_from_IndexedArray(\n\
    \        uniquecontents,\n        toptr,\n        fromptr,\n        fromindex,\n\
    \        fromptroffset,\n        indexoffset,\n        tolength,\n        fromlength,\n\
    \        fromwidth,\n    )\n"
- name: awkward_Identities_from_UnionArray
  specializations:
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromtags: int8_t
    - fromindex: int32_t
    - fromptroffset: int64_t
    - tagsoffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    - which: int64_t
    name: awkward_Identities32_from_UnionArray8_32
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromtags: int8_t
    - fromindex: int64_t
    - fromptroffset: int64_t
    - tagsoffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    - which: int64_t
    name: awkward_Identities32_from_UnionArray8_64
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromtags: int8_t
    - fromindex: int32_t
    - fromptroffset: int64_t
    - tagsoffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    - which: int64_t
    name: awkward_Identities64_from_UnionArray8_32
  - args:
    - uniquecontents: bool
    - toptr: int32_t
    - fromptr: int32_t
    - fromtags: int8_t
    - fromindex: uint32_t
    - fromptroffset: int64_t
    - tagsoffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    - which: int64_t
    name: awkward_Identities32_from_UnionArray8_U32
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromtags: int8_t
    - fromindex: int64_t
    - fromptroffset: int64_t
    - tagsoffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    - which: int64_t
    name: awkward_Identities64_from_UnionArray8_64
  - args:
    - uniquecontents: bool
    - toptr: int64_t
    - fromptr: int64_t
    - fromtags: int8_t
    - fromindex: uint32_t
    - fromptroffset: int64_t
    - tagsoffset: int64_t
    - indexoffset: int64_t
    - tolength: int64_t
    - fromlength: int64_t
    - fromwidth: int64_t
    - which: int64_t
    name: awkward_Identities64_from_UnionArray8_U32
  specification: "def awkward_Identities_from_UnionArray(\n    uniquecontents,\n \
    \   toptr,\n    fromptr,\n    fromtags,\n    fromindex,\n    fromptroffset,\n\
    \    tagsoffset,\n    indexoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    \    which,\n):\n    for k in range(int(tolength * fromwidth)):\n        toptr[k]\
    \ = -1\n    for i in range(int(fromlength)):\n        if fromtags[tagsoffset +\
    \ i] == which:\n            j = fromindex[indexoffset + i]\n            if j >=\
    \ tolength:\n                raise ValueError(\"max(index) > len(content)\")\n\
    \            else:\n                if j < 0:\n                    raise ValueError(\"\
    min(index) < 0\")\n                else:\n                    if toptr[j * fromwidth]\
    \ != -1:\n                        uniquecontents[0] = False\n                \
    \        return\n                    for k in range(int(fromwidth)):\n       \
    \                 toptr[(j * fromwidth) + k] = fromptr[\n                    \
    \        (fromptroffset + (i * fromwidth)) + k\n                        ]\n  \
    \  uniquecontents[0] = True\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromtags: int8_t
  - fromindex: int32_t
  - fromptroffset: int64_t
  - tagsoffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  - which: int64_t
  name: awkward_Identities32_from_UnionArray8_32
  specification: "def awkward_Identities32_from_UnionArray8_32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromtags,\n    fromindex,\n    fromptroffset,\n\
    \    tagsoffset,\n    indexoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    \    which,\n):\n    return awkward_Identities_from_UnionArray(\n        uniquecontents,\n\
    \        toptr,\n        fromptr,\n        fromtags,\n        fromindex,\n   \
    \     fromptroffset,\n        tagsoffset,\n        indexoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n        which,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromtags: int8_t
  - fromindex: uint32_t
  - fromptroffset: int64_t
  - tagsoffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  - which: int64_t
  name: awkward_Identities32_from_UnionArray8_U32
  specification: "def awkward_Identities32_from_UnionArray8_U32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromtags,\n    fromindex,\n    fromptroffset,\n\
    \    tagsoffset,\n    indexoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    \    which,\n):\n    return awkward_Identities_from_UnionArray(\n        uniquecontents,\n\
    \        toptr,\n        fromptr,\n        fromtags,\n        fromindex,\n   \
    \     fromptroffset,\n        tagsoffset,\n        indexoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n        which,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int32_t
  - fromptr: int32_t
  - fromtags: int8_t
  - fromindex: int64_t
  - fromptroffset: int64_t
  - tagsoffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  - which: int64_t
  name: awkward_Identities32_from_UnionArray8_64
  specification: "def awkward_Identities32_from_UnionArray8_64(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromtags,\n    fromindex,\n    fromptroffset,\n\
    \    tagsoffset,\n    indexoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    \    which,\n):\n    return awkward_Identities_from_UnionArray(\n        uniquecontents,\n\
    \        toptr,\n        fromptr,\n        fromtags,\n        fromindex,\n   \
    \     fromptroffset,\n        tagsoffset,\n        indexoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n        which,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromtags: int8_t
  - fromindex: int32_t
  - fromptroffset: int64_t
  - tagsoffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  - which: int64_t
  name: awkward_Identities64_from_UnionArray8_32
  specification: "def awkward_Identities64_from_UnionArray8_32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromtags,\n    fromindex,\n    fromptroffset,\n\
    \    tagsoffset,\n    indexoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    \    which,\n):\n    return awkward_Identities_from_UnionArray(\n        uniquecontents,\n\
    \        toptr,\n        fromptr,\n        fromtags,\n        fromindex,\n   \
    \     fromptroffset,\n        tagsoffset,\n        indexoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n        which,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromtags: int8_t
  - fromindex: uint32_t
  - fromptroffset: int64_t
  - tagsoffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  - which: int64_t
  name: awkward_Identities64_from_UnionArray8_U32
  specification: "def awkward_Identities64_from_UnionArray8_U32(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromtags,\n    fromindex,\n    fromptroffset,\n\
    \    tagsoffset,\n    indexoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    \    which,\n):\n    return awkward_Identities_from_UnionArray(\n        uniquecontents,\n\
    \        toptr,\n        fromptr,\n        fromtags,\n        fromindex,\n   \
    \     fromptroffset,\n        tagsoffset,\n        indexoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n        which,\n    )\n"
- args:
  - uniquecontents: bool
  - toptr: int64_t
  - fromptr: int64_t
  - fromtags: int8_t
  - fromindex: int64_t
  - fromptroffset: int64_t
  - tagsoffset: int64_t
  - indexoffset: int64_t
  - tolength: int64_t
  - fromlength: int64_t
  - fromwidth: int64_t
  - which: int64_t
  name: awkward_Identities64_from_UnionArray8_64
  specification: "def awkward_Identities64_from_UnionArray8_64(\n    uniquecontents,\n\
    \    toptr,\n    fromptr,\n    fromtags,\n    fromindex,\n    fromptroffset,\n\
    \    tagsoffset,\n    indexoffset,\n    tolength,\n    fromlength,\n    fromwidth,\n\
    \    which,\n):\n    return awkward_Identities_from_UnionArray(\n        uniquecontents,\n\
    \        toptr,\n        fromptr,\n        fromtags,\n        fromindex,\n   \
    \     fromptroffset,\n        tagsoffset,\n        indexoffset,\n        tolength,\n\
    \        fromlength,\n        fromwidth,\n        which,\n    )\n"
- name: awkward_Identities_extend
  specializations:
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromoffset: int64_t
    - fromlength: int64_t
    - tolength: int64_t
    name: awkward_Identities32_extend
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromoffset: int64_t
    - fromlength: int64_t
    - tolength: int64_t
    name: awkward_Identities64_extend
  specification: "def awkward_Identities_extend(toptr, fromptr, fromoffset, fromlength,\
    \ tolength):\n    i = 0\n    while i < fromlength:\n        toptr[i] = fromptr[fromoffset\
    \ + i]\n        i = i + 1\n    while i < tolength:\n        toptr[i] = -1\n  \
    \      i = i + 1\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromoffset: int64_t
  - fromlength: int64_t
  - tolength: int64_t
  name: awkward_Identities32_extend
  specification: "def awkward_Identities32_extend(toptr, fromptr, fromoffset, fromlength,\
    \ tolength):\n    return awkward_Identities_extend(toptr, fromptr, fromoffset,\
    \ fromlength, tolength)\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromoffset: int64_t
  - fromlength: int64_t
  - tolength: int64_t
  name: awkward_Identities64_extend
  specification: "def awkward_Identities64_extend(toptr, fromptr, fromoffset, fromlength,\
    \ tolength):\n    return awkward_Identities_extend(toptr, fromptr, fromoffset,\
    \ fromlength, tolength)\n"
- name: awkward_ListArray_num
  specializations:
  - args:
    - tonum: int64_t
    - fromstarts: int32_t
    - startsoffset: int64_t
    - fromstops: int32_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray32_num_64
  - args:
    - tonum: int64_t
    - fromstarts: uint32_t
    - startsoffset: int64_t
    - fromstops: uint32_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArrayU32_num_64
  - args:
    - tonum: int64_t
    - fromstarts: int64_t
    - startsoffset: int64_t
    - fromstops: int64_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray64_num_64
  specification: "def awkward_ListArray_num(\n    tonum, fromstarts, startsoffset,\
    \ fromstops, stopsoffset, length\n):\n    for i in range(int(length)):\n     \
    \   start = fromstarts[startsoffset + i]\n        stop = fromstops[stopsoffset\
    \ + i]\n        tonum[i] = float(stop - start)\n"
- args:
  - tonum: int64_t
  - fromstarts: int32_t
  - startsoffset: int64_t
  - fromstops: int32_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray32_num_64
  specification: "def awkward_ListArray32_num_64(\n    tonum, fromstarts, startsoffset,\
    \ fromstops, stopsoffset, length\n):\n    return awkward_ListArray_num(\n    \
    \    tonum, fromstarts, startsoffset, fromstops, stopsoffset, length\n    )\n"
- args:
  - tonum: int64_t
  - fromstarts: uint32_t
  - startsoffset: int64_t
  - fromstops: uint32_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArrayU32_num_64
  specification: "def awkward_ListArrayU32_num_64(\n    tonum, fromstarts, startsoffset,\
    \ fromstops, stopsoffset, length\n):\n    return awkward_ListArray_num(\n    \
    \    tonum, fromstarts, startsoffset, fromstops, stopsoffset, length\n    )\n"
- args:
  - tonum: int64_t
  - fromstarts: int64_t
  - startsoffset: int64_t
  - fromstops: int64_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray64_num_64
  specification: "def awkward_ListArray64_num_64(\n    tonum, fromstarts, startsoffset,\
    \ fromstops, stopsoffset, length\n):\n    return awkward_ListArray_num(\n    \
    \    tonum, fromstarts, startsoffset, fromstops, stopsoffset, length\n    )\n"
- name: awkward_RegularArray_num
  specializations:
  - args:
    - tonum: int64_t
    - size: int64_t
    - length: int64_t
    name: awkward_RegularArray_num_64
  specification: "def awkward_RegularArray_num(tonum, size, length):\n    for i in\
    \ range(int(length)):\n        tonum[i] = size\n"
- args:
  - tonum: int64_t
  - size: int64_t
  - length: int64_t
  name: awkward_RegularArray_num_64
  specification: "def awkward_RegularArray_num_64(tonum, size, length):\n    return\
    \ awkward_RegularArray_num(tonum, size, length)\n"
- name: awkward_ListOffsetArray_flatten_offsets
  specializations:
  - args:
    - tooffsets: int64_t
    - outeroffsets: int64_t
    - outeroffsetsoffset: int64_t
    - outeroffsetslen: int64_t
    - inneroffsets: int64_t
    - inneroffsetsoffset: int64_t
    - inneroffsetslen: int64_t
    name: awkward_ListOffsetArray64_flatten_offsets_64
  - args:
    - tooffsets: int64_t
    - outeroffsets: uint32_t
    - outeroffsetsoffset: int64_t
    - outeroffsetslen: int64_t
    - inneroffsets: int64_t
    - inneroffsetsoffset: int64_t
    - inneroffsetslen: int64_t
    name: awkward_ListOffsetArrayU32_flatten_offsets_64
  - args:
    - tooffsets: int64_t
    - outeroffsets: int32_t
    - outeroffsetsoffset: int64_t
    - outeroffsetslen: int64_t
    - inneroffsets: int64_t
    - inneroffsetsoffset: int64_t
    - inneroffsetslen: int64_t
    name: awkward_ListOffsetArray32_flatten_offsets_64
  specification: "def awkward_ListOffsetArray_flatten_offsets(\n    tooffsets,\n \
    \   outeroffsets,\n    outeroffsetsoffset,\n    outeroffsetslen,\n    inneroffsets,\n\
    \    inneroffsetsoffset,\n    inneroffsetslen,\n):\n    for i in range(int(outeroffsetslen)):\n\
    \        tooffsets[i] = inneroffsets[\n            inneroffsetsoffset + outeroffsets[outeroffsetsoffset\
    \ + i]\n        ]\n"
- args:
  - tooffsets: int64_t
  - outeroffsets: int32_t
  - outeroffsetsoffset: int64_t
  - outeroffsetslen: int64_t
  - inneroffsets: int64_t
  - inneroffsetsoffset: int64_t
  - inneroffsetslen: int64_t
  name: awkward_ListOffsetArray32_flatten_offsets_64
  specification: "def awkward_ListOffsetArray32_flatten_offsets_64(\n    tooffsets,\n\
    \    outeroffsets,\n    outeroffsetsoffset,\n    outeroffsetslen,\n    inneroffsets,\n\
    \    inneroffsetsoffset,\n    inneroffsetslen,\n):\n    return awkward_ListOffsetArray_flatten_offsets(\n\
    \        tooffsets,\n        outeroffsets,\n        outeroffsetsoffset,\n    \
    \    outeroffsetslen,\n        inneroffsets,\n        inneroffsetsoffset,\n  \
    \      inneroffsetslen,\n    )\n"
- args:
  - tooffsets: int64_t
  - outeroffsets: uint32_t
  - outeroffsetsoffset: int64_t
  - outeroffsetslen: int64_t
  - inneroffsets: int64_t
  - inneroffsetsoffset: int64_t
  - inneroffsetslen: int64_t
  name: awkward_ListOffsetArrayU32_flatten_offsets_64
  specification: "def awkward_ListOffsetArrayU32_flatten_offsets_64(\n    tooffsets,\n\
    \    outeroffsets,\n    outeroffsetsoffset,\n    outeroffsetslen,\n    inneroffsets,\n\
    \    inneroffsetsoffset,\n    inneroffsetslen,\n):\n    return awkward_ListOffsetArray_flatten_offsets(\n\
    \        tooffsets,\n        outeroffsets,\n        outeroffsetsoffset,\n    \
    \    outeroffsetslen,\n        inneroffsets,\n        inneroffsetsoffset,\n  \
    \      inneroffsetslen,\n    )\n"
- args:
  - tooffsets: int64_t
  - outeroffsets: int64_t
  - outeroffsetsoffset: int64_t
  - outeroffsetslen: int64_t
  - inneroffsets: int64_t
  - inneroffsetsoffset: int64_t
  - inneroffsetslen: int64_t
  name: awkward_ListOffsetArray64_flatten_offsets_64
  specification: "def awkward_ListOffsetArray64_flatten_offsets_64(\n    tooffsets,\n\
    \    outeroffsets,\n    outeroffsetsoffset,\n    outeroffsetslen,\n    inneroffsets,\n\
    \    inneroffsetsoffset,\n    inneroffsetslen,\n):\n    return awkward_ListOffsetArray_flatten_offsets(\n\
    \        tooffsets,\n        outeroffsets,\n        outeroffsetsoffset,\n    \
    \    outeroffsetslen,\n        inneroffsets,\n        inneroffsetsoffset,\n  \
    \      inneroffsetslen,\n    )\n"
- name: awkward_IndexedArray_flatten_none2empty
  specializations:
  - args:
    - outoffsets: int64_t
    - outindex: int64_t
    - outindexoffset: int64_t
    - outindexlength: int64_t
    - offsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    name: awkward_IndexedArray64_flatten_none2empty_64
  - args:
    - outoffsets: int64_t
    - outindex: uint32_t
    - outindexoffset: int64_t
    - outindexlength: int64_t
    - offsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    name: awkward_IndexedArrayU32_flatten_none2empty_64
  - args:
    - outoffsets: int64_t
    - outindex: int32_t
    - outindexoffset: int64_t
    - outindexlength: int64_t
    - offsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    name: awkward_IndexedArray32_flatten_none2empty_64
  specification: "def awkward_IndexedArray_flatten_none2empty(\n    outoffsets,\n\
    \    outindex,\n    outindexoffset,\n    outindexlength,\n    offsets,\n    offsetsoffset,\n\
    \    offsetslength,\n):\n    outoffsets[0] = offsets[offsetsoffset + 0]\n    k\
    \ = 1\n    for i in range(int(outindexlength)):\n        idx = outindex[outindexoffset\
    \ + i]\n        if idx < 0:\n            outoffsets[k] = outoffsets[k - 1]\n \
    \           k = k + 1\n        else:\n            if ((offsetsoffset + idx) +\
    \ 1) >= offsetslength:\n                raise ValueError(\"flattening offset out\
    \ of range\")\n            else:\n                count = (\n                \
    \    offsets[(offsetsoffset + idx) + 1] - offsets[offsetsoffset + idx]\n     \
    \           )\n                outoffsets[k] = outoffsets[k - 1] + count\n   \
    \             k = k + 1\n"
- args:
  - outoffsets: int64_t
  - outindex: int32_t
  - outindexoffset: int64_t
  - outindexlength: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  name: awkward_IndexedArray32_flatten_none2empty_64
  specification: "def awkward_IndexedArray32_flatten_none2empty_64(\n    outoffsets,\n\
    \    outindex,\n    outindexoffset,\n    outindexlength,\n    offsets,\n    offsetsoffset,\n\
    \    offsetslength,\n):\n    return awkward_IndexedArray_flatten_none2empty(\n\
    \        outoffsets,\n        outindex,\n        outindexoffset,\n        outindexlength,\n\
    \        offsets,\n        offsetsoffset,\n        offsetslength,\n    )\n"
- args:
  - outoffsets: int64_t
  - outindex: uint32_t
  - outindexoffset: int64_t
  - outindexlength: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  name: awkward_IndexedArrayU32_flatten_none2empty_64
  specification: "def awkward_IndexedArrayU32_flatten_none2empty_64(\n    outoffsets,\n\
    \    outindex,\n    outindexoffset,\n    outindexlength,\n    offsets,\n    offsetsoffset,\n\
    \    offsetslength,\n):\n    return awkward_IndexedArray_flatten_none2empty(\n\
    \        outoffsets,\n        outindex,\n        outindexoffset,\n        outindexlength,\n\
    \        offsets,\n        offsetsoffset,\n        offsetslength,\n    )\n"
- args:
  - outoffsets: int64_t
  - outindex: int64_t
  - outindexoffset: int64_t
  - outindexlength: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  name: awkward_IndexedArray64_flatten_none2empty_64
  specification: "def awkward_IndexedArray64_flatten_none2empty_64(\n    outoffsets,\n\
    \    outindex,\n    outindexoffset,\n    outindexlength,\n    offsets,\n    offsetsoffset,\n\
    \    offsetslength,\n):\n    return awkward_IndexedArray_flatten_none2empty(\n\
    \        outoffsets,\n        outindex,\n        outindexoffset,\n        outindexlength,\n\
    \        offsets,\n        offsetsoffset,\n        offsetslength,\n    )\n"
- name: awkward_UnionArray_flatten_length
  specializations:
  - args:
    - total_length: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: int32_t
    - fromindexoffset: int64_t
    - length: int64_t
    - '* offsetsraws': int64_t
    - offsetsoffsets: int64_t
    name: awkward_UnionArray32_flatten_length_64
  - args:
    - total_length: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    - '* offsetsraws': int64_t
    - offsetsoffsets: int64_t
    name: awkward_UnionArray64_flatten_length_64
  - args:
    - total_length: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: uint32_t
    - fromindexoffset: int64_t
    - length: int64_t
    - '* offsetsraws': int64_t
    - offsetsoffsets: int64_t
    name: awkward_UnionArrayU32_flatten_length_64
  specification: "def awkward_UnionArray_flatten_length(\n    total_length,\n    fromtags,\n\
    \    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n    length,\n    offsetsraws,\n\
    \    offsetsoffsets,\n):\n    total_length[0] = 0\n    for i in range(int(length)):\n\
    \        tag = fromtags[fromtagsoffset + i]\n        idx = fromindex[fromindexoffset\
    \ + i]\n        start = offsetsraws[tag][offsetsoffsets[tag] + idx]\n        stop\
    \ = offsetsraws[tag][(offsetsoffsets[tag] + idx) + 1]\n        total_length[0]\
    \ = total_length[0] + (stop - start)\n"
- args:
  - total_length: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: int32_t
  - fromindexoffset: int64_t
  - length: int64_t
  - '* offsetsraws': int64_t
  - offsetsoffsets: int64_t
  name: awkward_UnionArray32_flatten_length_64
  specification: "def awkward_UnionArray32_flatten_length_64(\n    total_length,\n\
    \    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n  \
    \  length,\n    offsetsraws,\n    offsetsoffsets,\n):\n    return awkward_UnionArray_flatten_length(\n\
    \        total_length,\n        fromtags,\n        fromtagsoffset,\n        fromindex,\n\
    \        fromindexoffset,\n        length,\n        offsetsraws,\n        offsetsoffsets,\n\
    \    )\n"
- args:
  - total_length: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: uint32_t
  - fromindexoffset: int64_t
  - length: int64_t
  - '* offsetsraws': int64_t
  - offsetsoffsets: int64_t
  name: awkward_UnionArrayU32_flatten_length_64
  specification: "def awkward_UnionArrayU32_flatten_length_64(\n    total_length,\n\
    \    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n  \
    \  length,\n    offsetsraws,\n    offsetsoffsets,\n):\n    return awkward_UnionArray_flatten_length(\n\
    \        total_length,\n        fromtags,\n        fromtagsoffset,\n        fromindex,\n\
    \        fromindexoffset,\n        length,\n        offsetsraws,\n        offsetsoffsets,\n\
    \    )\n"
- args:
  - total_length: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  - '* offsetsraws': int64_t
  - offsetsoffsets: int64_t
  name: awkward_UnionArray64_flatten_length_64
  specification: "def awkward_UnionArray64_flatten_length_64(\n    total_length,\n\
    \    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n  \
    \  length,\n    offsetsraws,\n    offsetsoffsets,\n):\n    return awkward_UnionArray_flatten_length(\n\
    \        total_length,\n        fromtags,\n        fromtagsoffset,\n        fromindex,\n\
    \        fromindexoffset,\n        length,\n        offsetsraws,\n        offsetsoffsets,\n\
    \    )\n"
- name: awkward_UnionArray_flatten_combine
  specializations:
  - args:
    - totags: int8_t
    - toindex: int64_t
    - tooffsets: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: uint32_t
    - fromindexoffset: int64_t
    - length: int64_t
    - '* offsetsraws': int64_t
    - offsetsoffsets: int64_t
    name: awkward_UnionArrayU32_flatten_combine_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - tooffsets: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    - '* offsetsraws': int64_t
    - offsetsoffsets: int64_t
    name: awkward_UnionArray64_flatten_combine_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - tooffsets: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: int32_t
    - fromindexoffset: int64_t
    - length: int64_t
    - '* offsetsraws': int64_t
    - offsetsoffsets: int64_t
    name: awkward_UnionArray32_flatten_combine_64
  specification: "def awkward_UnionArray_flatten_combine(\n    totags,\n    toindex,\n\
    \    tooffsets,\n    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n\
    \    length,\n    offsetsraws,\n    offsetsoffsets,\n):\n    tooffsets[0] = 0\n\
    \    k = 0\n    for i in range(int(length)):\n        tag = fromtags[fromtagsoffset\
    \ + i]\n        idx = fromindex[fromindexoffset + i]\n        start = offsetsraws[tag][offsetsoffsets[tag]\
    \ + idx]\n        stop = offsetsraws[tag][(offsetsoffsets[tag] + idx) + 1]\n \
    \       tooffsets[i + 1] = tooffsets[i] + (stop - start)\n        for j in range(int(start),\
    \ stop):\n            totags[k] = tag\n            toindex[k] = j\n          \
    \  k = k + 1\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - tooffsets: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: int32_t
  - fromindexoffset: int64_t
  - length: int64_t
  - '* offsetsraws': int64_t
  - offsetsoffsets: int64_t
  name: awkward_UnionArray32_flatten_combine_64
  specification: "def awkward_UnionArray32_flatten_combine_64(\n    totags,\n    toindex,\n\
    \    tooffsets,\n    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n\
    \    length,\n    offsetsraws,\n    offsetsoffsets,\n):\n    return awkward_UnionArray_flatten_combine(\n\
    \        totags,\n        toindex,\n        tooffsets,\n        fromtags,\n  \
    \      fromtagsoffset,\n        fromindex,\n        fromindexoffset,\n       \
    \ length,\n        offsetsraws,\n        offsetsoffsets,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - tooffsets: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: uint32_t
  - fromindexoffset: int64_t
  - length: int64_t
  - '* offsetsraws': int64_t
  - offsetsoffsets: int64_t
  name: awkward_UnionArrayU32_flatten_combine_64
  specification: "def awkward_UnionArrayU32_flatten_combine_64(\n    totags,\n   \
    \ toindex,\n    tooffsets,\n    fromtags,\n    fromtagsoffset,\n    fromindex,\n\
    \    fromindexoffset,\n    length,\n    offsetsraws,\n    offsetsoffsets,\n):\n\
    \    return awkward_UnionArray_flatten_combine(\n        totags,\n        toindex,\n\
    \        tooffsets,\n        fromtags,\n        fromtagsoffset,\n        fromindex,\n\
    \        fromindexoffset,\n        length,\n        offsetsraws,\n        offsetsoffsets,\n\
    \    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - tooffsets: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  - '* offsetsraws': int64_t
  - offsetsoffsets: int64_t
  name: awkward_UnionArray64_flatten_combine_64
  specification: "def awkward_UnionArray64_flatten_combine_64(\n    totags,\n    toindex,\n\
    \    tooffsets,\n    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n\
    \    length,\n    offsetsraws,\n    offsetsoffsets,\n):\n    return awkward_UnionArray_flatten_combine(\n\
    \        totags,\n        toindex,\n        tooffsets,\n        fromtags,\n  \
    \      fromtagsoffset,\n        fromindex,\n        fromindexoffset,\n       \
    \ length,\n        offsetsraws,\n        offsetsoffsets,\n    )\n"
- name: awkward_IndexedArray_flatten_nextcarry
  specializations:
  - args:
    - tocarry: int64_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArrayU32_flatten_nextcarry_64
  - args:
    - tocarry: int64_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray32_flatten_nextcarry_64
  - args:
    - tocarry: int64_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray64_flatten_nextcarry_64
  specification: "def awkward_IndexedArray_flatten_nextcarry(\n    tocarry, fromindex,\
    \ indexoffset, lenindex, lencontent\n):\n    k = 0\n    for i in range(int(lenindex)):\n\
    \        j = fromindex[indexoffset + i]\n        if j >= lencontent:\n       \
    \     raise ValueError(\"index out of range\")\n        else:\n            if\
    \ j >= 0:\n                tocarry[k] = j\n                k = k + 1\n"
- args:
  - tocarry: int64_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray32_flatten_nextcarry_64
  specification: "def awkward_IndexedArray32_flatten_nextcarry_64(\n    tocarry, fromindex,\
    \ indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_flatten_nextcarry(\n\
    \        tocarry, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArrayU32_flatten_nextcarry_64
  specification: "def awkward_IndexedArrayU32_flatten_nextcarry_64(\n    tocarry,\
    \ fromindex, indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_flatten_nextcarry(\n\
    \        tocarry, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray64_flatten_nextcarry_64
  specification: "def awkward_IndexedArray64_flatten_nextcarry_64(\n    tocarry, fromindex,\
    \ indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_flatten_nextcarry(\n\
    \        tocarry, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- name: awkward_IndexedArray_overlay_mask
  specializations:
  - args:
    - toindex: int64_t
    - mask: int8_t
    - maskoffset: int64_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArrayU32_overlay_mask8_to64
  - args:
    - toindex: int64_t
    - mask: int8_t
    - maskoffset: int64_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArray64_overlay_mask8_to64
  - args:
    - toindex: int64_t
    - mask: int8_t
    - maskoffset: int64_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArray32_overlay_mask8_to64
  specification: "def awkward_IndexedArray_overlay_mask(\n    toindex, mask, maskoffset,\
    \ fromindex, indexoffset, length\n):\n    for i in range(int(length)):\n     \
    \   m = mask[maskoffset + i]\n        toindex[i] = -1 if m else fromindex[indexoffset\
    \ + i]\n"
- args:
  - toindex: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArray32_overlay_mask8_to64
  specification: "def awkward_IndexedArray32_overlay_mask8_to64(\n    toindex, mask,\
    \ maskoffset, fromindex, indexoffset, length\n):\n    return awkward_IndexedArray_overlay_mask(\n\
    \        toindex, mask, maskoffset, fromindex, indexoffset, length\n    )\n"
- args:
  - toindex: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArrayU32_overlay_mask8_to64
  specification: "def awkward_IndexedArrayU32_overlay_mask8_to64(\n    toindex, mask,\
    \ maskoffset, fromindex, indexoffset, length\n):\n    return awkward_IndexedArray_overlay_mask(\n\
    \        toindex, mask, maskoffset, fromindex, indexoffset, length\n    )\n"
- args:
  - toindex: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArray64_overlay_mask8_to64
  specification: "def awkward_IndexedArray64_overlay_mask8_to64(\n    toindex, mask,\
    \ maskoffset, fromindex, indexoffset, length\n):\n    return awkward_IndexedArray_overlay_mask(\n\
    \        toindex, mask, maskoffset, fromindex, indexoffset, length\n    )\n"
- name: awkward_IndexedArray_mask
  specializations:
  - args:
    - tomask: int8_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArray32_mask8
  - args:
    - tomask: int8_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArrayU32_mask8
  - args:
    - tomask: int8_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArray64_mask8
  specification: "def awkward_IndexedArray_mask(tomask, fromindex, indexoffset, length):\n\
    \    for i in range(int(length)):\n        tomask[i] = fromindex[indexoffset +\
    \ i] < 0\n"
- args:
  - tomask: int8_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArray32_mask8
  specification: "def awkward_IndexedArray32_mask8(tomask, fromindex, indexoffset,\
    \ length):\n    return awkward_IndexedArray_mask(tomask, fromindex, indexoffset,\
    \ length)\n"
- args:
  - tomask: int8_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArrayU32_mask8
  specification: "def awkward_IndexedArrayU32_mask8(tomask, fromindex, indexoffset,\
    \ length):\n    return awkward_IndexedArray_mask(tomask, fromindex, indexoffset,\
    \ length)\n"
- args:
  - tomask: int8_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArray64_mask8
  specification: "def awkward_IndexedArray64_mask8(tomask, fromindex, indexoffset,\
    \ length):\n    return awkward_IndexedArray_mask(tomask, fromindex, indexoffset,\
    \ length)\n"
- name: awkward_ByteMaskedArray_mask
  specializations:
  - args:
    - tomask: int8_t
    - frommask: int8_t
    - maskoffset: int64_t
    - length: int64_t
    - validwhen: bool
    name: awkward_ByteMaskedArray_mask8
  specification: "def awkward_ByteMaskedArray_mask(tomask, frommask, maskoffset, length,\
    \ validwhen):\n    for i in range(int(length)):\n        tomask[i] = (frommask[maskoffset\
    \ + i] != 0) != validwhen\n"
- args:
  - tomask: int8_t
  - frommask: int8_t
  - maskoffset: int64_t
  - length: int64_t
  - validwhen: bool
  name: awkward_ByteMaskedArray_mask8
  specification: "def awkward_ByteMaskedArray_mask8(tomask, frommask, maskoffset,\
    \ length, validwhen):\n    return awkward_ByteMaskedArray_mask(tomask, frommask,\
    \ maskoffset, length, validwhen)\n"
- name: awkward_zero_mask
  specializations:
  - args:
    - tomask: int8_t
    - length: int64_t
    name: awkward_zero_mask8
  specification: "def awkward_zero_mask(tomask, length):\n    for i in range(int(length)):\n\
    \        tomask[i] = 0\n"
- args:
  - tomask: int8_t
  - length: int64_t
  name: awkward_zero_mask8
  specification: "def awkward_zero_mask8(tomask, length):\n    return awkward_zero_mask(tomask,\
    \ length)\n"
- name: awkward_IndexedArray_simplify
  specializations:
  - args:
    - toindex: int64_t
    - outerindex: uint32_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: int32_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArrayU32_simplify32_to64
  - args:
    - toindex: int64_t
    - outerindex: int64_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: uint32_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArray64_simplifyU32_to64
  - args:
    - toindex: int64_t
    - outerindex: int32_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: uint32_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArray32_simplifyU32_to64
  - args:
    - toindex: int64_t
    - outerindex: int64_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: int32_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArray64_simplify32_to64
  - args:
    - toindex: int64_t
    - outerindex: uint32_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: uint32_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArrayU32_simplifyU32_to64
  - args:
    - toindex: int64_t
    - outerindex: uint32_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: int64_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArrayU32_simplify64_to64
  - args:
    - toindex: int64_t
    - outerindex: int64_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: int64_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArray64_simplify64_to64
  - args:
    - toindex: int64_t
    - outerindex: int32_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: int64_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArray32_simplify64_to64
  - args:
    - toindex: int64_t
    - outerindex: int32_t
    - outeroffset: int64_t
    - outerlength: int64_t
    - innerindex: int32_t
    - inneroffset: int64_t
    - innerlength: int64_t
    name: awkward_IndexedArray32_simplify32_to64
  specification: "def awkward_IndexedArray_simplify(\n    toindex, outerindex, outeroffset,\
    \ outerlength, innerindex, inneroffset, innerlength\n):\n    for i in range(int(outerlength)):\n\
    \        j = outerindex[outeroffset + i]\n        if j < 0:\n            toindex[i]\
    \ = -1\n        else:\n            if j >= innerlength:\n                raise\
    \ ValueError(\"index out of range\")\n            else:\n                toindex[i]\
    \ = innerindex[inneroffset + j]\n"
- args:
  - toindex: int64_t
  - outerindex: int32_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: int32_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArray32_simplify32_to64
  specification: "def awkward_IndexedArray32_simplify32_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: int32_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: uint32_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArray32_simplifyU32_to64
  specification: "def awkward_IndexedArray32_simplifyU32_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: int32_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: int64_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArray32_simplify64_to64
  specification: "def awkward_IndexedArray32_simplify64_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: uint32_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: int32_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArrayU32_simplify32_to64
  specification: "def awkward_IndexedArrayU32_simplify32_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: uint32_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: uint32_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArrayU32_simplifyU32_to64
  specification: "def awkward_IndexedArrayU32_simplifyU32_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: uint32_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: int64_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArrayU32_simplify64_to64
  specification: "def awkward_IndexedArrayU32_simplify64_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: int64_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: int32_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArray64_simplify32_to64
  specification: "def awkward_IndexedArray64_simplify32_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: int64_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: uint32_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArray64_simplifyU32_to64
  specification: "def awkward_IndexedArray64_simplifyU32_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- args:
  - toindex: int64_t
  - outerindex: int64_t
  - outeroffset: int64_t
  - outerlength: int64_t
  - innerindex: int64_t
  - inneroffset: int64_t
  - innerlength: int64_t
  name: awkward_IndexedArray64_simplify64_to64
  specification: "def awkward_IndexedArray64_simplify64_to64(\n    toindex, outerindex,\
    \ outeroffset, outerlength, innerindex, inneroffset, innerlength\n):\n    return\
    \ awkward_IndexedArray_simplify(\n        toindex,\n        outerindex,\n    \
    \    outeroffset,\n        outerlength,\n        innerindex,\n        inneroffset,\n\
    \        innerlength,\n    )\n"
- name: awkward_RegularArray_compact_offsets
  specializations:
  - args:
    - tooffsets: int64_t
    - length: int64_t
    - size: int64_t
    name: awkward_RegularArray_compact_offsets64
  specification: "def awkward_RegularArray_compact_offsets(tooffsets, length, size):\n\
    \    tooffsets[0] = 0\n    for i in range(int(length)):\n        tooffsets[i +\
    \ 1] = (i + 1) * size\n"
- args:
  - tooffsets: int64_t
  - length: int64_t
  - size: int64_t
  name: awkward_RegularArray_compact_offsets64
  specification: "def awkward_RegularArray_compact_offsets64(tooffsets, length, size):\n\
    \    return awkward_RegularArray_compact_offsets(tooffsets, length, size)\n"
- name: awkward_ListArray_compact_offsets
  specializations:
  - args:
    - tooffsets: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray32_compact_offsets_64
  - args:
    - tooffsets: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArrayU32_compact_offsets_64
  - args:
    - tooffsets: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray64_compact_offsets_64
  specification: "def awkward_ListArray_compact_offsets(\n    tooffsets, fromstarts,\
    \ fromstops, startsoffset, stopsoffset, length\n):\n    tooffsets[0] = 0\n   \
    \ for i in range(int(length)):\n        start = fromstarts[startsoffset + i]\n\
    \        stop = fromstops[stopsoffset + i]\n        if stop < start:\n       \
    \     raise ValueError(\"stops[i] < starts[i]\")\n        tooffsets[i + 1] = tooffsets[i]\
    \ + (stop - start)\n"
- args:
  - tooffsets: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray32_compact_offsets_64
  specification: "def awkward_ListArray32_compact_offsets_64(\n    tooffsets, fromstarts,\
    \ fromstops, startsoffset, stopsoffset, length\n):\n    return awkward_ListArray_compact_offsets(\n\
    \        tooffsets, fromstarts, fromstops, startsoffset, stopsoffset, length\n\
    \    )\n"
- args:
  - tooffsets: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArrayU32_compact_offsets_64
  specification: "def awkward_ListArrayU32_compact_offsets_64(\n    tooffsets, fromstarts,\
    \ fromstops, startsoffset, stopsoffset, length\n):\n    return awkward_ListArray_compact_offsets(\n\
    \        tooffsets, fromstarts, fromstops, startsoffset, stopsoffset, length\n\
    \    )\n"
- args:
  - tooffsets: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray64_compact_offsets_64
  specification: "def awkward_ListArray64_compact_offsets_64(\n    tooffsets, fromstarts,\
    \ fromstops, startsoffset, stopsoffset, length\n):\n    return awkward_ListArray_compact_offsets(\n\
    \        tooffsets, fromstarts, fromstops, startsoffset, stopsoffset, length\n\
    \    )\n"
- name: awkward_ListOffsetArray_compact_offsets
  specializations:
  - args:
    - tooffsets: int64_t
    - fromoffsets: uint32_t
    - offsetsoffset: int64_t
    - length: int64_t
    name: awkward_ListOffsetArrayU32_compact_offsets_64
  - args:
    - tooffsets: int64_t
    - fromoffsets: int32_t
    - offsetsoffset: int64_t
    - length: int64_t
    name: awkward_ListOffsetArray32_compact_offsets_64
  - args:
    - tooffsets: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - length: int64_t
    name: awkward_ListOffsetArray64_compact_offsets_64
  specification: "def awkward_ListOffsetArray_compact_offsets(\n    tooffsets, fromoffsets,\
    \ offsetsoffset, length\n):\n    diff = int(fromoffsets[offsetsoffset + 0])\n\
    \    tooffsets[0] = 0\n    for i in range(int(length)):\n        tooffsets[i +\
    \ 1] = fromoffsets[(offsetsoffset + i) + 1] - diff\n"
- args:
  - tooffsets: int64_t
  - fromoffsets: int32_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListOffsetArray32_compact_offsets_64
  specification: "def awkward_ListOffsetArray32_compact_offsets_64(\n    tooffsets,\
    \ fromoffsets, offsetsoffset, length\n):\n    return awkward_ListOffsetArray_compact_offsets(\n\
    \        tooffsets, fromoffsets, offsetsoffset, length\n    )\n"
- args:
  - tooffsets: int64_t
  - fromoffsets: uint32_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListOffsetArrayU32_compact_offsets_64
  specification: "def awkward_ListOffsetArrayU32_compact_offsets_64(\n    tooffsets,\
    \ fromoffsets, offsetsoffset, length\n):\n    return awkward_ListOffsetArray_compact_offsets(\n\
    \        tooffsets, fromoffsets, offsetsoffset, length\n    )\n"
- args:
  - tooffsets: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListOffsetArray64_compact_offsets_64
  specification: "def awkward_ListOffsetArray64_compact_offsets_64(\n    tooffsets,\
    \ fromoffsets, offsetsoffset, length\n):\n    return awkward_ListOffsetArray_compact_offsets(\n\
    \        tooffsets, fromoffsets, offsetsoffset, length\n    )\n"
- name: awkward_ListArray_broadcast_tooffsets
  specializations:
  - args:
    - tocarry: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    - fromstarts: uint32_t
    - startsoffset: int64_t
    - fromstops: uint32_t
    - stopsoffset: int64_t
    - lencontent: int64_t
    name: awkward_ListArrayU32_broadcast_tooffsets_64
  - args:
    - tocarry: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    - fromstarts: int64_t
    - startsoffset: int64_t
    - fromstops: int64_t
    - stopsoffset: int64_t
    - lencontent: int64_t
    name: awkward_ListArray64_broadcast_tooffsets_64
  - args:
    - tocarry: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    - fromstarts: int32_t
    - startsoffset: int64_t
    - fromstops: int32_t
    - stopsoffset: int64_t
    - lencontent: int64_t
    name: awkward_ListArray32_broadcast_tooffsets_64
  specification: "def awkward_ListArray_broadcast_tooffsets(\n    tocarry,\n    fromoffsets,\n\
    \    offsetsoffset,\n    offsetslength,\n    fromstarts,\n    startsoffset,\n\
    \    fromstops,\n    stopsoffset,\n    lencontent,\n):\n    k = 0\n    for i in\
    \ range(int(offsetslength - 1)):\n        start = int(fromstarts[startsoffset\
    \ + i])\n        stop = int(fromstops[stopsoffset + i])\n        if (start !=\
    \ stop) and (stop > lencontent):\n            raise ValueError(\"stops[i] > len(content)\"\
    )\n        count = int(\n            fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset\
    \ + i]\n        )\n        if count < 0:\n            raise ValueError(\"broadcast's\
    \ offsets must be monotonically increasing\")\n        if (stop - start) != count:\n\
    \            raise ValueError(\"cannot broadcast nested list\")\n        for j\
    \ in range(int(start), stop):\n            tocarry[k] = float(j)\n           \
    \ k = k + 1\n"
- args:
  - tocarry: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  - fromstarts: int32_t
  - startsoffset: int64_t
  - fromstops: int32_t
  - stopsoffset: int64_t
  - lencontent: int64_t
  name: awkward_ListArray32_broadcast_tooffsets_64
  specification: "def awkward_ListArray32_broadcast_tooffsets_64(\n    tocarry,\n\
    \    fromoffsets,\n    offsetsoffset,\n    offsetslength,\n    fromstarts,\n \
    \   startsoffset,\n    fromstops,\n    stopsoffset,\n    lencontent,\n):\n   \
    \ return awkward_ListArray_broadcast_tooffsets(\n        tocarry,\n        fromoffsets,\n\
    \        offsetsoffset,\n        offsetslength,\n        fromstarts,\n       \
    \ startsoffset,\n        fromstops,\n        stopsoffset,\n        lencontent,\n\
    \    )\n"
- args:
  - tocarry: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  - fromstarts: uint32_t
  - startsoffset: int64_t
  - fromstops: uint32_t
  - stopsoffset: int64_t
  - lencontent: int64_t
  name: awkward_ListArrayU32_broadcast_tooffsets_64
  specification: "def awkward_ListArrayU32_broadcast_tooffsets_64(\n    tocarry,\n\
    \    fromoffsets,\n    offsetsoffset,\n    offsetslength,\n    fromstarts,\n \
    \   startsoffset,\n    fromstops,\n    stopsoffset,\n    lencontent,\n):\n   \
    \ return awkward_ListArray_broadcast_tooffsets(\n        tocarry,\n        fromoffsets,\n\
    \        offsetsoffset,\n        offsetslength,\n        fromstarts,\n       \
    \ startsoffset,\n        fromstops,\n        stopsoffset,\n        lencontent,\n\
    \    )\n"
- args:
  - tocarry: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  - fromstarts: int64_t
  - startsoffset: int64_t
  - fromstops: int64_t
  - stopsoffset: int64_t
  - lencontent: int64_t
  name: awkward_ListArray64_broadcast_tooffsets_64
  specification: "def awkward_ListArray64_broadcast_tooffsets_64(\n    tocarry,\n\
    \    fromoffsets,\n    offsetsoffset,\n    offsetslength,\n    fromstarts,\n \
    \   startsoffset,\n    fromstops,\n    stopsoffset,\n    lencontent,\n):\n   \
    \ return awkward_ListArray_broadcast_tooffsets(\n        tocarry,\n        fromoffsets,\n\
    \        offsetsoffset,\n        offsetslength,\n        fromstarts,\n       \
    \ startsoffset,\n        fromstops,\n        stopsoffset,\n        lencontent,\n\
    \    )\n"
- name: awkward_RegularArray_broadcast_tooffsets
  specializations:
  - args:
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    - size: int64_t
    name: awkward_RegularArray_broadcast_tooffsets_64
  specification: "def awkward_RegularArray_broadcast_tooffsets(\n    fromoffsets,\
    \ offsetsoffset, offsetslength, size\n):\n    for i in range(int(offsetslength\
    \ - 1)):\n        count = int(\n            fromoffsets[(offsetsoffset + i) +\
    \ 1] - fromoffsets[offsetsoffset + i]\n        )\n        if count < 0:\n    \
    \        raise ValueError(\"broadcast's offsets must be monotonically increasing\"\
    )\n        if size != count:\n            raise ValueError(\"cannot broadcast\
    \ nested list\")\n"
- args:
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  - size: int64_t
  name: awkward_RegularArray_broadcast_tooffsets_64
  specification: "def awkward_RegularArray_broadcast_tooffsets_64(\n    fromoffsets,\
    \ offsetsoffset, offsetslength, size\n):\n    return awkward_RegularArray_broadcast_tooffsets(\n\
    \        fromoffsets, offsetsoffset, offsetslength, size\n    )\n"
- name: awkward_RegularArray_broadcast_tooffsets_size1
  specializations:
  - args:
    - tocarry: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    name: awkward_RegularArray_broadcast_tooffsets_size1_64
  specification: "def awkward_RegularArray_broadcast_tooffsets_size1(\n    tocarry,\
    \ fromoffsets, offsetsoffset, offsetslength\n):\n    k = 0\n    for i in range(int(offsetslength\
    \ - 1)):\n        count = int(\n            fromoffsets[(offsetsoffset + i) +\
    \ 1] - fromoffsets[offsetsoffset + i]\n        )\n        if count < 0:\n    \
    \        raise ValueError(\"broadcast's offsets must be monotonically increasing\"\
    )\n        for j in range(int(count)):\n            tocarry[k] = float(i)\n  \
    \          k = k + 1\n"
- args:
  - tocarry: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  name: awkward_RegularArray_broadcast_tooffsets_size1_64
  specification: "def awkward_RegularArray_broadcast_tooffsets_size1_64(\n    tocarry,\
    \ fromoffsets, offsetsoffset, offsetslength\n):\n    return awkward_RegularArray_broadcast_tooffsets_size1(\n\
    \        tocarry, fromoffsets, offsetsoffset, offsetslength\n    )\n"
- name: awkward_ListOffsetArray_toRegularArray
  specializations:
  - args:
    - size: int64_t
    - fromoffsets: uint32_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    name: awkward_ListOffsetArrayU32_toRegularArray
  - args:
    - size: int64_t
    - fromoffsets: int32_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    name: awkward_ListOffsetArray32_toRegularArray
  - args:
    - size: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - offsetslength: int64_t
    name: awkward_ListOffsetArray64_toRegularArray
  specification: "def awkward_ListOffsetArray_toRegularArray(\n    size, fromoffsets,\
    \ offsetsoffset, offsetslength\n):\n    size[0] = -1\n    for i in range(int(offsetslength\
    \ - 1)):\n        count = int(\n            fromoffsets[(offsetsoffset + i) +\
    \ 1] - fromoffsets[offsetsoffset + i]\n        )\n        if count < 0:\n    \
    \        raise ValueError(\"offsets must be monotonically increasing\")\n    \
    \    if size[0] == -1:\n            size[0] = count\n        else:\n         \
    \   if size[0] != count:\n                raise ValueError(\n                \
    \    \"cannot convert to RegularArray because subarray lengths are not regular\"\
    \n                )\n    if size[0] == -1:\n        size[0] = 0\n"
- args:
  - size: int64_t
  - fromoffsets: int32_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  name: awkward_ListOffsetArray32_toRegularArray
  specification: "def awkward_ListOffsetArray32_toRegularArray(\n    size, fromoffsets,\
    \ offsetsoffset, offsetslength\n):\n    return awkward_ListOffsetArray_toRegularArray(\n\
    \        size, fromoffsets, offsetsoffset, offsetslength\n    )\n"
- args:
  - size: int64_t
  - fromoffsets: uint32_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  name: awkward_ListOffsetArrayU32_toRegularArray
  specification: "def awkward_ListOffsetArrayU32_toRegularArray(\n    size, fromoffsets,\
    \ offsetsoffset, offsetslength\n):\n    return awkward_ListOffsetArray_toRegularArray(\n\
    \        size, fromoffsets, offsetsoffset, offsetslength\n    )\n"
- args:
  - size: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - offsetslength: int64_t
  name: awkward_ListOffsetArray64_toRegularArray
  specification: "def awkward_ListOffsetArray64_toRegularArray(\n    size, fromoffsets,\
    \ offsetsoffset, offsetslength\n):\n    return awkward_ListOffsetArray_toRegularArray(\n\
    \        size, fromoffsets, offsetsoffset, offsetslength\n    )\n"
- name: awkward_NumpyArray_fill_frombool
  specializations:
  - args:
    - toptr: int32_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint32_frombool
  - args:
    - toptr: int16_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint16_frombool
  - args:
    - toptr: uint8_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint8_frombool
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_frombool
  - args:
    - toptr: uint16_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint16_frombool
  - args:
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_frombool
  - args:
    - toptr: int8_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint8_frombool
  - args:
    - toptr: uint64_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint64_frombool
  - args:
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_frombool
  - args:
    - toptr: bool
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tobool_frombool
  - args:
    - toptr: uint32_t
    - tooffset: int64_t
    - fromptr: bool
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint32_frombool
  specification: "def awkward_NumpyArray_fill_frombool(toptr, tooffset, fromptr, fromoffset,\
    \ length):\n    for i in range(int(length)):\n        toptr[tooffset + i] = float(fromptr[fromoffset\
    \ + i] != 0)\n"
- args:
  - toptr: bool
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tobool_frombool
  specification: "def awkward_NumpyArray_fill_tobool_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: int8_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint8_frombool
  specification: "def awkward_NumpyArray_fill_toint8_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: int16_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint16_frombool
  specification: "def awkward_NumpyArray_fill_toint16_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: int32_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint32_frombool
  specification: "def awkward_NumpyArray_fill_toint32_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_frombool
  specification: "def awkward_NumpyArray_fill_toint64_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: uint8_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint8_frombool
  specification: "def awkward_NumpyArray_fill_touint8_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: uint16_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint16_frombool
  specification: "def awkward_NumpyArray_fill_touint16_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: uint32_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint32_frombool
  specification: "def awkward_NumpyArray_fill_touint32_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - toptr: uint64_t
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint64_frombool
  specification: "def awkward_NumpyArray_fill_touint64_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_frombool
  specification: "def awkward_NumpyArray_fill_tofloat32_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: bool
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_frombool
  specification: "def awkward_NumpyArray_fill_tofloat64_frombool(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill_fromint(toptr,\
    \ tooffset, fromptr, fromoffset, length)\n"
- name: awkward_NumpyArray_fill
  specializations:
  - args:
    - toptr: uint64_t
    - tooffset: int64_t
    - fromptr: uint32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint64_fromuint32
  - args:
    - tooffset: int64_t
    - fromptr: uint32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromuint32
  - args:
    - tooffset: int64_t
    - fromptr: int16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromint16
  - args:
    - tooffset: int64_t
    - fromptr: uint32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromuint32
  - args:
    - toptr: uint16_t
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint16_fromuint8
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: uint16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromuint16
  - args:
    - toptr: int16_t
    - tooffset: int64_t
    - fromptr: int16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint16_fromint16
  - args:
    - tooffset: int64_t
    - fromptr: int32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromint32
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: int16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromint16
  - args:
    - toptr: int32_t
    - tooffset: int64_t
    - fromptr: int16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint32_fromint16
  - args:
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromuint8
  - args:
    - toptr: uint16_t
    - tooffset: int64_t
    - fromptr: uint16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint16_fromuint16
  - args:
    - toptr: uint32_t
    - tooffset: int64_t
    - fromptr: uint16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint32_fromuint16
  - args:
    - tooffset: int64_t
    - fromptr: uint16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromuint16
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromuint8
  - args:
    - tooffset: int64_t
    - fromptr: uint64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromuint64
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: int8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromint8
  - args:
    - toptr: uint64_t
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint64_fromuint8
  - args:
    - toptr: int32_t
    - tooffset: int64_t
    - fromptr: uint16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint32_fromuint16
  - args:
    - toptr: int32_t
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint32_fromuint8
  - args:
    - toptr: uint32_t
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint32_fromuint8
  - args:
    - toptr: int16_t
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint16_fromuint8
  - args:
    - tooffset: int64_t
    - fromptr: int64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromint64
  - args:
    - tooffset: int64_t
    - fromptr: int64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromint64
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: uint32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromuint32
  - args:
    - toptr: uint64_t
    - tooffset: int64_t
    - fromptr: uint16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint64_fromuint16
  - args:
    - tooffset: int64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromfloat32
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: uint64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromuint64
  - args:
    - tooffset: int64_t
    - fromptr: int16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromint16
  - args:
    - toptr: int32_t
    - tooffset: int64_t
    - fromptr: int8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint32_fromint8
  - args:
    - toptr: uint64_t
    - tooffset: int64_t
    - fromptr: uint64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint64_fromuint64
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: int32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromint32
  - args:
    - tooffset: int64_t
    - fromptr: int8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromint8
  - args:
    - tooffset: int64_t
    - fromptr: int32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromint32
  - args:
    - tooffset: int64_t
    - fromptr: uint64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromuint64
  - args:
    - toptr: int32_t
    - tooffset: int64_t
    - fromptr: int32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint32_fromint32
  - args:
    - toptr: uint32_t
    - tooffset: int64_t
    - fromptr: uint32_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint32_fromuint32
  - args:
    - toptr: int8_t
    - tooffset: int64_t
    - fromptr: int8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint8_fromint8
  - args:
    - tooffset: int64_t
    - fromptr: uint16_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromuint16
  - args:
    - toptr: int16_t
    - tooffset: int64_t
    - fromptr: int8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint16_fromint8
  - args:
    - tooffset: int64_t
    - fromptr: int8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromint8
  - args:
    - toptr: int64_t
    - tooffset: int64_t
    - fromptr: int64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_toint64_fromint64
  - args:
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromuint8
  - args:
    - toptr: uint8_t
    - tooffset: int64_t
    - fromptr: uint8_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_touint8_fromuint8
  - args:
    - tooffset: int64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat32_fromfloat32
  - args:
    - tooffset: int64_t
    - fromoffset: int64_t
    - length: int64_t
    name: awkward_NumpyArray_fill_tofloat64_fromfloat64
  specification: "def awkward_NumpyArray_fill(toptr, tooffset, fromptr, fromoffset,\
    \ length):\n    for i in range(int(length)):\n        toptr[tooffset + i] = float(fromptr[fromoffset\
    \ + i])\n"
- args:
  - toptr: int8_t
  - tooffset: int64_t
  - fromptr: int8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint8_fromint8
  specification: "def awkward_NumpyArray_fill_toint8_fromint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int16_t
  - tooffset: int64_t
  - fromptr: int8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint16_fromint8
  specification: "def awkward_NumpyArray_fill_toint16_fromint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int32_t
  - tooffset: int64_t
  - fromptr: int8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint32_fromint8
  specification: "def awkward_NumpyArray_fill_toint32_fromint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: int8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromint8
  specification: "def awkward_NumpyArray_fill_toint64_fromint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromint8
  specification: "def awkward_NumpyArray_fill_tofloat32_fromint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromint8
  specification: "def awkward_NumpyArray_fill_tofloat64_fromint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int16_t
  - tooffset: int64_t
  - fromptr: int16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint16_fromint16
  specification: "def awkward_NumpyArray_fill_toint16_fromint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int32_t
  - tooffset: int64_t
  - fromptr: int16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint32_fromint16
  specification: "def awkward_NumpyArray_fill_toint32_fromint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: int16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromint16
  specification: "def awkward_NumpyArray_fill_toint64_fromint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromint16
  specification: "def awkward_NumpyArray_fill_tofloat32_fromint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromint16
  specification: "def awkward_NumpyArray_fill_tofloat64_fromint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int32_t
  - tooffset: int64_t
  - fromptr: int32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint32_fromint32
  specification: "def awkward_NumpyArray_fill_toint32_fromint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: int32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromint32
  specification: "def awkward_NumpyArray_fill_toint64_fromint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromint32
  specification: "def awkward_NumpyArray_fill_tofloat32_fromint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromint32
  specification: "def awkward_NumpyArray_fill_tofloat64_fromint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: int64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromint64
  specification: "def awkward_NumpyArray_fill_toint64_fromint64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromint64
  specification: "def awkward_NumpyArray_fill_tofloat32_fromint64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: int64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromint64
  specification: "def awkward_NumpyArray_fill_tofloat64_fromint64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int16_t
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint16_fromuint8
  specification: "def awkward_NumpyArray_fill_toint16_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int32_t
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint32_fromuint8
  specification: "def awkward_NumpyArray_fill_toint32_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromuint8
  specification: "def awkward_NumpyArray_fill_toint64_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint8_t
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint8_fromuint8
  specification: "def awkward_NumpyArray_fill_touint8_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint16_t
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint16_fromuint8
  specification: "def awkward_NumpyArray_fill_touint16_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint32_t
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint32_fromuint8
  specification: "def awkward_NumpyArray_fill_touint32_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint64_t
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint64_fromuint8
  specification: "def awkward_NumpyArray_fill_touint64_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromuint8
  specification: "def awkward_NumpyArray_fill_tofloat32_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint8_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromuint8
  specification: "def awkward_NumpyArray_fill_tofloat64_fromuint8(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int32_t
  - tooffset: int64_t
  - fromptr: uint16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint32_fromuint16
  specification: "def awkward_NumpyArray_fill_toint32_fromuint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: uint16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromuint16
  specification: "def awkward_NumpyArray_fill_toint64_fromuint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint16_t
  - tooffset: int64_t
  - fromptr: uint16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint16_fromuint16
  specification: "def awkward_NumpyArray_fill_touint16_fromuint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint32_t
  - tooffset: int64_t
  - fromptr: uint16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint32_fromuint16
  specification: "def awkward_NumpyArray_fill_touint32_fromuint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint64_t
  - tooffset: int64_t
  - fromptr: uint16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint64_fromuint16
  specification: "def awkward_NumpyArray_fill_touint64_fromuint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromuint16
  specification: "def awkward_NumpyArray_fill_tofloat32_fromuint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint16_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromuint16
  specification: "def awkward_NumpyArray_fill_tofloat64_fromuint16(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: uint32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromuint32
  specification: "def awkward_NumpyArray_fill_toint64_fromuint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint32_t
  - tooffset: int64_t
  - fromptr: uint32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint32_fromuint32
  specification: "def awkward_NumpyArray_fill_touint32_fromuint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint64_t
  - tooffset: int64_t
  - fromptr: uint32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint64_fromuint32
  specification: "def awkward_NumpyArray_fill_touint64_fromuint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromuint32
  specification: "def awkward_NumpyArray_fill_tofloat32_fromuint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint32_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromuint32
  specification: "def awkward_NumpyArray_fill_tofloat64_fromuint32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: uint64_t
  - tooffset: int64_t
  - fromptr: uint64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_touint64_fromuint64
  specification: "def awkward_NumpyArray_fill_touint64_fromuint64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - toptr: int64_t
  - tooffset: int64_t
  - fromptr: uint64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_toint64_fromuint64
  specification: "def awkward_NumpyArray_fill_toint64_fromuint64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromuint64
  specification: "def awkward_NumpyArray_fill_tofloat32_fromuint64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromptr: uint64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromuint64
  specification: "def awkward_NumpyArray_fill_tofloat64_fromuint64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat32_fromfloat32
  specification: "def awkward_NumpyArray_fill_tofloat32_fromfloat32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromfloat32
  specification: "def awkward_NumpyArray_fill_tofloat64_fromfloat32(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- args:
  - tooffset: int64_t
  - fromoffset: int64_t
  - length: int64_t
  name: awkward_NumpyArray_fill_tofloat64_fromfloat64
  specification: "def awkward_NumpyArray_fill_tofloat64_fromfloat64(\n    toptr, tooffset,\
    \ fromptr, fromoffset, length\n):\n    return awkward_NumpyArray_fill(toptr, tooffset,\
    \ fromptr, fromoffset, length)\n"
- name: awkward_ListArray_fill
  specializations:
  - args:
    - tostarts: int64_t
    - tostartsoffset: int64_t
    - tostops: int64_t
    - tostopsoffset: int64_t
    - fromstarts: uint32_t
    - fromstartsoffset: int64_t
    - fromstops: uint32_t
    - fromstopsoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_ListArray_fill_to64_fromU32
  - args:
    - tostarts: int64_t
    - tostartsoffset: int64_t
    - tostops: int64_t
    - tostopsoffset: int64_t
    - fromstarts: int32_t
    - fromstartsoffset: int64_t
    - fromstops: int32_t
    - fromstopsoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_ListArray_fill_to64_from32
  - args:
    - tostarts: int64_t
    - tostartsoffset: int64_t
    - tostops: int64_t
    - tostopsoffset: int64_t
    - fromstarts: int64_t
    - fromstartsoffset: int64_t
    - fromstops: int64_t
    - fromstopsoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_ListArray_fill_to64_from64
  specification: "def awkward_ListArray_fill(\n    tostarts,\n    tostartsoffset,\n\
    \    tostops,\n    tostopsoffset,\n    fromstarts,\n    fromstartsoffset,\n  \
    \  fromstops,\n    fromstopsoffset,\n    length,\n    base,\n):\n    for i in\
    \ range(int(length)):\n        tostarts[tostartsoffset + i] = float(fromstarts[fromstartsoffset\
    \ + i] + base)\n        tostops[tostopsoffset + i] = float(fromstops[fromstopsoffset\
    \ + i] + base)\n"
- args:
  - tostarts: int64_t
  - tostartsoffset: int64_t
  - tostops: int64_t
  - tostopsoffset: int64_t
  - fromstarts: int32_t
  - fromstartsoffset: int64_t
  - fromstops: int32_t
  - fromstopsoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_ListArray_fill_to64_from32
  specification: "def awkward_ListArray_fill_to64_from32(\n    tostarts,\n    tostartsoffset,\n\
    \    tostops,\n    tostopsoffset,\n    fromstarts,\n    fromstartsoffset,\n  \
    \  fromstops,\n    fromstopsoffset,\n    length,\n    base,\n):\n    return awkward_ListArray_fill(\n\
    \        tostarts,\n        tostartsoffset,\n        tostops,\n        tostopsoffset,\n\
    \        fromstarts,\n        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n\
    \        length,\n        base,\n    )\n"
- args:
  - tostarts: int64_t
  - tostartsoffset: int64_t
  - tostops: int64_t
  - tostopsoffset: int64_t
  - fromstarts: uint32_t
  - fromstartsoffset: int64_t
  - fromstops: uint32_t
  - fromstopsoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_ListArray_fill_to64_fromU32
  specification: "def awkward_ListArray_fill_to64_fromU32(\n    tostarts,\n    tostartsoffset,\n\
    \    tostops,\n    tostopsoffset,\n    fromstarts,\n    fromstartsoffset,\n  \
    \  fromstops,\n    fromstopsoffset,\n    length,\n    base,\n):\n    return awkward_ListArray_fill(\n\
    \        tostarts,\n        tostartsoffset,\n        tostops,\n        tostopsoffset,\n\
    \        fromstarts,\n        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n\
    \        length,\n        base,\n    )\n"
- args:
  - tostarts: int64_t
  - tostartsoffset: int64_t
  - tostops: int64_t
  - tostopsoffset: int64_t
  - fromstarts: int64_t
  - fromstartsoffset: int64_t
  - fromstops: int64_t
  - fromstopsoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_ListArray_fill_to64_from64
  specification: "def awkward_ListArray_fill_to64_from64(\n    tostarts,\n    tostartsoffset,\n\
    \    tostops,\n    tostopsoffset,\n    fromstarts,\n    fromstartsoffset,\n  \
    \  fromstops,\n    fromstopsoffset,\n    length,\n    base,\n):\n    return awkward_ListArray_fill(\n\
    \        tostarts,\n        tostartsoffset,\n        tostops,\n        tostopsoffset,\n\
    \        fromstarts,\n        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n\
    \        length,\n        base,\n    )\n"
- name: awkward_IndexedArray_fill
  specializations:
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - fromindex: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_IndexedArray_fill_to64_from64
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - fromindex: int32_t
    - fromindexoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_IndexedArray_fill_to64_from32
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - fromindex: uint32_t
    - fromindexoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_IndexedArray_fill_to64_fromU32
  specification: "def awkward_IndexedArray_fill(\n    toindex, toindexoffset, fromindex,\
    \ fromindexoffset, length, base\n):\n    for i in range(int(length)):\n      \
    \  fromval = fromindex[fromindexoffset + i]\n        toindex[toindexoffset + i]\
    \ = -1 if fromval < 0 else float(fromval + base)\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - fromindex: int32_t
  - fromindexoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_IndexedArray_fill_to64_from32
  specification: "def awkward_IndexedArray_fill_to64_from32(\n    toindex, toindexoffset,\
    \ fromindex, fromindexoffset, length, base\n):\n    return awkward_IndexedArray_fill(\n\
    \        toindex, toindexoffset, fromindex, fromindexoffset, length, base\n  \
    \  )\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - fromindex: uint32_t
  - fromindexoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_IndexedArray_fill_to64_fromU32
  specification: "def awkward_IndexedArray_fill_to64_fromU32(\n    toindex, toindexoffset,\
    \ fromindex, fromindexoffset, length, base\n):\n    return awkward_IndexedArray_fill(\n\
    \        toindex, toindexoffset, fromindex, fromindexoffset, length, base\n  \
    \  )\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - fromindex: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_IndexedArray_fill_to64_from64
  specification: "def awkward_IndexedArray_fill_to64_from64(\n    toindex, toindexoffset,\
    \ fromindex, fromindexoffset, length, base\n):\n    return awkward_IndexedArray_fill(\n\
    \        toindex, toindexoffset, fromindex, fromindexoffset, length, base\n  \
    \  )\n"
- name: awkward_IndexedArray_fill_count
  specializations:
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_IndexedArray_fill_to64_count
  specification: "def awkward_IndexedArray_fill_count(toindex, toindexoffset, length,\
    \ base):\n    for i in range(int(length)):\n        toindex[toindexoffset + i]\
    \ = i + base\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_IndexedArray_fill_to64_count
  specification: "def awkward_IndexedArray_fill_to64_count(toindex, toindexoffset,\
    \ length, base):\n    return awkward_IndexedArray_fill_count(toindex, toindexoffset,\
    \ length, base)\n"
- name: awkward_UnionArray_filltags
  specializations:
  - args:
    - totags: int8_t
    - totagsoffset: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray_filltags_to8_from8
  specification: "def awkward_UnionArray_filltags(\n    totags, totagsoffset, fromtags,\
    \ fromtagsoffset, length, base\n):\n    for i in range(int(length)):\n       \
    \ totags[totagsoffset + i] = float(fromtags[fromtagsoffset + i] + base)\n"
- args:
  - totags: int8_t
  - totagsoffset: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray_filltags_to8_from8
  specification: "def awkward_UnionArray_filltags_to8_from8(\n    totags, totagsoffset,\
    \ fromtags, fromtagsoffset, length, base\n):\n    return awkward_UnionArray_filltags(\n\
    \        totags, totagsoffset, fromtags, fromtagsoffset, length, base\n    )\n"
- name: awkward_UnionArray_fillindex
  specializations:
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - fromindex: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray_fillindex_to64_from64
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - fromindex: int32_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray_fillindex_to64_from32
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - fromindex: uint32_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray_fillindex_to64_fromU32
  specification: "def awkward_UnionArray_fillindex(\n    toindex, toindexoffset, fromindex,\
    \ fromindexoffset, length\n):\n    for i in range(int(length)):\n        toindex[toindexoffset\
    \ + i] = float(fromindex[fromindexoffset + i])\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - fromindex: int32_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray_fillindex_to64_from32
  specification: "def awkward_UnionArray_fillindex_to64_from32(\n    toindex, toindexoffset,\
    \ fromindex, fromindexoffset, length\n):\n    return awkward_UnionArray_fillindex(\n\
    \        toindex, toindexoffset, fromindex, fromindexoffset, length\n    )\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - fromindex: uint32_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray_fillindex_to64_fromU32
  specification: "def awkward_UnionArray_fillindex_to64_fromU32(\n    toindex, toindexoffset,\
    \ fromindex, fromindexoffset, length\n):\n    return awkward_UnionArray_fillindex(\n\
    \        toindex, toindexoffset, fromindex, fromindexoffset, length\n    )\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - fromindex: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray_fillindex_to64_from64
  specification: "def awkward_UnionArray_fillindex_to64_from64(\n    toindex, toindexoffset,\
    \ fromindex, fromindexoffset, length\n):\n    return awkward_UnionArray_fillindex(\n\
    \        toindex, toindexoffset, fromindex, fromindexoffset, length\n    )\n"
- name: awkward_UnionArray_filltags_const
  specializations:
  - args:
    - totags: int8_t
    - totagsoffset: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray_filltags_to8_const
  specification: "def awkward_UnionArray_filltags_const(totags, totagsoffset, length,\
    \ base):\n    for i in range(int(length)):\n        totags[totagsoffset + i] =\
    \ float(base)\n"
- args:
  - totags: int8_t
  - totagsoffset: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray_filltags_to8_const
  specification: "def awkward_UnionArray_filltags_to8_const(totags, totagsoffset,\
    \ length, base):\n    return awkward_UnionArray_filltags_const(totags, totagsoffset,\
    \ length, base)\n"
- name: awkward_UnionArray_fillindex_count
  specializations:
  - args:
    - toindex: int64_t
    - toindexoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray_fillindex_to64_count
  specification: "def awkward_UnionArray_fillindex_count(toindex, toindexoffset, length):\n\
    \    for i in range(int(length)):\n        toindex[toindexoffset + i] = float(i)\n"
- args:
  - toindex: int64_t
  - toindexoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray_fillindex_to64_count
  specification: "def awkward_UnionArray_fillindex_to64_count(toindex, toindexoffset,\
    \ length):\n    return awkward_UnionArray_fillindex_count(toindex, toindexoffset,\
    \ length)\n"
- name: awkward_UnionArray_simplify
  specializations:
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: int32_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: int64_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_32_simplify8_64_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: uint32_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: uint32_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_U32_simplify8_U32_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: int64_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: int32_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_64_simplify8_32_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: int64_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: uint32_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_64_simplify8_U32_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: uint32_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: int32_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_U32_simplify8_32_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: int32_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: uint32_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_32_simplify8_U32_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: int64_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: int64_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_64_simplify8_64_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: int32_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: int32_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_32_simplify8_32_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - outertags: int8_t
    - outertagsoffset: int64_t
    - outerindex: uint32_t
    - outerindexoffset: int64_t
    - innertags: int8_t
    - innertagsoffset: int64_t
    - innerindex: int64_t
    - innerindexoffset: int64_t
    - towhich: int64_t
    - innerwhich: int64_t
    - outerwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_U32_simplify8_64_to8_64
  specification: "def awkward_UnionArray_simplify(\n    totags,\n    toindex,\n  \
    \  outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    for i in range(int(length)):\n        if outertags[outertagsoffset + i] ==\
    \ outerwhich:\n            j = outerindex[outerindexoffset + i]\n            if\
    \ innertags[innertagsoffset + j] == innerwhich:\n                totags[i] = float(towhich)\n\
    \                toindex[i] = float(innerindex[innerindexoffset + j] + base)\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: int32_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: int32_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_32_simplify8_32_to8_64
  specification: "def awkward_UnionArray8_32_simplify8_32_to8_64(\n    totags,\n \
    \   toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: int32_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: uint32_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_32_simplify8_U32_to8_64
  specification: "def awkward_UnionArray8_32_simplify8_U32_to8_64(\n    totags,\n\
    \    toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: int32_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: int64_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_32_simplify8_64_to8_64
  specification: "def awkward_UnionArray8_32_simplify8_64_to8_64(\n    totags,\n \
    \   toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: uint32_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: int32_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_U32_simplify8_32_to8_64
  specification: "def awkward_UnionArray8_U32_simplify8_32_to8_64(\n    totags,\n\
    \    toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: uint32_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: uint32_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_U32_simplify8_U32_to8_64
  specification: "def awkward_UnionArray8_U32_simplify8_U32_to8_64(\n    totags,\n\
    \    toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: uint32_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: int64_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_U32_simplify8_64_to8_64
  specification: "def awkward_UnionArray8_U32_simplify8_64_to8_64(\n    totags,\n\
    \    toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: int64_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: int32_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_64_simplify8_32_to8_64
  specification: "def awkward_UnionArray8_64_simplify8_32_to8_64(\n    totags,\n \
    \   toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: int64_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: uint32_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_64_simplify8_U32_to8_64
  specification: "def awkward_UnionArray8_64_simplify8_U32_to8_64(\n    totags,\n\
    \    toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - outertags: int8_t
  - outertagsoffset: int64_t
  - outerindex: int64_t
  - outerindexoffset: int64_t
  - innertags: int8_t
  - innertagsoffset: int64_t
  - innerindex: int64_t
  - innerindexoffset: int64_t
  - towhich: int64_t
  - innerwhich: int64_t
  - outerwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_64_simplify8_64_to8_64
  specification: "def awkward_UnionArray8_64_simplify8_64_to8_64(\n    totags,\n \
    \   toindex,\n    outertags,\n    outertagsoffset,\n    outerindex,\n    outerindexoffset,\n\
    \    innertags,\n    innertagsoffset,\n    innerindex,\n    innerindexoffset,\n\
    \    towhich,\n    innerwhich,\n    outerwhich,\n    length,\n    base,\n):\n\
    \    return awkward_UnionArray_simplify(\n        totags,\n        toindex,\n\
    \        outertags,\n        outertagsoffset,\n        outerindex,\n        outerindexoffset,\n\
    \        innertags,\n        innertagsoffset,\n        innerindex,\n        innerindexoffset,\n\
    \        towhich,\n        innerwhich,\n        outerwhich,\n        length,\n\
    \        base,\n    )\n"
- name: awkward_UnionArray_simplify_one
  specializations:
  - args:
    - totags: int8_t
    - toindex: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: uint32_t
    - fromindexoffset: int64_t
    - towhich: int64_t
    - fromwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_U32_simplify_one_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: int64_t
    - fromindexoffset: int64_t
    - towhich: int64_t
    - fromwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_64_simplify_one_to8_64
  - args:
    - totags: int8_t
    - toindex: int64_t
    - fromtags: int8_t
    - fromtagsoffset: int64_t
    - fromindex: int32_t
    - fromindexoffset: int64_t
    - towhich: int64_t
    - fromwhich: int64_t
    - length: int64_t
    - base: int64_t
    name: awkward_UnionArray8_32_simplify_one_to8_64
  specification: "def awkward_UnionArray_simplify_one(\n    totags,\n    toindex,\n\
    \    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n  \
    \  towhich,\n    fromwhich,\n    length,\n    base,\n):\n    for i in range(int(length)):\n\
    \        if fromtags[fromtagsoffset + i] == fromwhich:\n            totags[i]\
    \ = float(towhich)\n            toindex[i] = float(fromindex[fromindexoffset +\
    \ i] + base)\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: int32_t
  - fromindexoffset: int64_t
  - towhich: int64_t
  - fromwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_32_simplify_one_to8_64
  specification: "def awkward_UnionArray8_32_simplify_one_to8_64(\n    totags,\n \
    \   toindex,\n    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n\
    \    towhich,\n    fromwhich,\n    length,\n    base,\n):\n    return awkward_UnionArray_simplify_one(\n\
    \        totags,\n        toindex,\n        fromtags,\n        fromtagsoffset,\n\
    \        fromindex,\n        fromindexoffset,\n        towhich,\n        fromwhich,\n\
    \        length,\n        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: uint32_t
  - fromindexoffset: int64_t
  - towhich: int64_t
  - fromwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_U32_simplify_one_to8_64
  specification: "def awkward_UnionArray8_U32_simplify_one_to8_64(\n    totags,\n\
    \    toindex,\n    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n\
    \    towhich,\n    fromwhich,\n    length,\n    base,\n):\n    return awkward_UnionArray_simplify_one(\n\
    \        totags,\n        toindex,\n        fromtags,\n        fromtagsoffset,\n\
    \        fromindex,\n        fromindexoffset,\n        towhich,\n        fromwhich,\n\
    \        length,\n        base,\n    )\n"
- args:
  - totags: int8_t
  - toindex: int64_t
  - fromtags: int8_t
  - fromtagsoffset: int64_t
  - fromindex: int64_t
  - fromindexoffset: int64_t
  - towhich: int64_t
  - fromwhich: int64_t
  - length: int64_t
  - base: int64_t
  name: awkward_UnionArray8_64_simplify_one_to8_64
  specification: "def awkward_UnionArray8_64_simplify_one_to8_64(\n    totags,\n \
    \   toindex,\n    fromtags,\n    fromtagsoffset,\n    fromindex,\n    fromindexoffset,\n\
    \    towhich,\n    fromwhich,\n    length,\n    base,\n):\n    return awkward_UnionArray_simplify_one(\n\
    \        totags,\n        toindex,\n        fromtags,\n        fromtagsoffset,\n\
    \        fromindex,\n        fromindexoffset,\n        towhich,\n        fromwhich,\n\
    \        length,\n        base,\n    )\n"
- name: awkward_ListArray_validity
  specializations:
  - args:
    - starts: int64_t
    - startsoffset: int64_t
    - stops: int64_t
    - stopsoffset: int64_t
    - length: int64_t
    - lencontent: int64_t
    name: awkward_ListArray64_validity
  - args:
    - starts: int32_t
    - startsoffset: int64_t
    - stops: int32_t
    - stopsoffset: int64_t
    - length: int64_t
    - lencontent: int64_t
    name: awkward_ListArray32_validity
  - args:
    - starts: uint32_t
    - startsoffset: int64_t
    - stops: uint32_t
    - stopsoffset: int64_t
    - length: int64_t
    - lencontent: int64_t
    name: awkward_ListArrayU32_validity
  specification: "def awkward_ListArray_validity(\n    starts, startsoffset, stops,\
    \ stopsoffset, length, lencontent\n):\n    for i in range(int(length)):\n    \
    \    start = starts[startsoffset + i]\n        stop = stops[stopsoffset + i]\n\
    \        if start != stop:\n            if start > stop:\n                raise\
    \ ValueError(\"start[i] > stop[i]\")\n            if start < 0:\n            \
    \    raise ValueError(\"start[i] < 0\")\n            if stop > lencontent:\n \
    \               raise ValueError(\"stop[i] > len(content)\")\n"
- args:
  - starts: int32_t
  - startsoffset: int64_t
  - stops: int32_t
  - stopsoffset: int64_t
  - length: int64_t
  - lencontent: int64_t
  name: awkward_ListArray32_validity
  specification: "def awkward_ListArray32_validity(\n    starts, startsoffset, stops,\
    \ stopsoffset, length, lencontent\n):\n    return awkward_ListArray_validity(\n\
    \        starts, startsoffset, stops, stopsoffset, length, lencontent\n    )\n"
- args:
  - starts: uint32_t
  - startsoffset: int64_t
  - stops: uint32_t
  - stopsoffset: int64_t
  - length: int64_t
  - lencontent: int64_t
  name: awkward_ListArrayU32_validity
  specification: "def awkward_ListArrayU32_validity(\n    starts, startsoffset, stops,\
    \ stopsoffset, length, lencontent\n):\n    return awkward_ListArray_validity(\n\
    \        starts, startsoffset, stops, stopsoffset, length, lencontent\n    )\n"
- args:
  - starts: int64_t
  - startsoffset: int64_t
  - stops: int64_t
  - stopsoffset: int64_t
  - length: int64_t
  - lencontent: int64_t
  name: awkward_ListArray64_validity
  specification: "def awkward_ListArray64_validity(\n    starts, startsoffset, stops,\
    \ stopsoffset, length, lencontent\n):\n    return awkward_ListArray_validity(\n\
    \        starts, startsoffset, stops, stopsoffset, length, lencontent\n    )\n"
- name: awkward_IndexedArray_validity
  specializations:
  - args:
    - index: uint32_t
    - indexoffset: int64_t
    - length: int64_t
    - lencontent: int64_t
    - isoption: bool
    name: awkward_IndexedArrayU32_validity
  - args:
    - index: int32_t
    - indexoffset: int64_t
    - length: int64_t
    - lencontent: int64_t
    - isoption: bool
    name: awkward_IndexedArray32_validity
  - args:
    - index: int64_t
    - indexoffset: int64_t
    - length: int64_t
    - lencontent: int64_t
    - isoption: bool
    name: awkward_IndexedArray64_validity
  specification: "def awkward_IndexedArray_validity(index, indexoffset, length, lencontent,\
    \ isoption):\n    for i in range(int(length)):\n        idx = index[indexoffset\
    \ + i]\n        if not (isoption):\n            if idx < 0:\n                raise\
    \ ValueError(\"index[i] < 0\")\n        if idx >= lencontent:\n            raise\
    \ ValueError(\"index[i] >= len(content)\")\n"
- args:
  - index: int32_t
  - indexoffset: int64_t
  - length: int64_t
  - lencontent: int64_t
  - isoption: bool
  name: awkward_IndexedArray32_validity
  specification: "def awkward_IndexedArray32_validity(index, indexoffset, length,\
    \ lencontent, isoption):\n    return awkward_IndexedArray_validity(\n        index,\
    \ indexoffset, length, lencontent, isoption\n    )\n"
- args:
  - index: uint32_t
  - indexoffset: int64_t
  - length: int64_t
  - lencontent: int64_t
  - isoption: bool
  name: awkward_IndexedArrayU32_validity
  specification: "def awkward_IndexedArrayU32_validity(index, indexoffset, length,\
    \ lencontent, isoption):\n    return awkward_IndexedArray_validity(\n        index,\
    \ indexoffset, length, lencontent, isoption\n    )\n"
- args:
  - index: int64_t
  - indexoffset: int64_t
  - length: int64_t
  - lencontent: int64_t
  - isoption: bool
  name: awkward_IndexedArray64_validity
  specification: "def awkward_IndexedArray64_validity(index, indexoffset, length,\
    \ lencontent, isoption):\n    return awkward_IndexedArray_validity(\n        index,\
    \ indexoffset, length, lencontent, isoption\n    )\n"
- name: awkward_UnionArray_validity
  specializations:
  - args:
    - tags: int8_t
    - tagsoffset: int64_t
    - index: int32_t
    - indexoffset: int64_t
    - length: int64_t
    - numcontents: int64_t
    - lencontents: int64_t
    name: awkward_UnionArray8_32_validity
  - args:
    - tags: int8_t
    - tagsoffset: int64_t
    - index: int64_t
    - indexoffset: int64_t
    - length: int64_t
    - numcontents: int64_t
    - lencontents: int64_t
    name: awkward_UnionArray8_64_validity
  - args:
    - tags: int8_t
    - tagsoffset: int64_t
    - index: uint32_t
    - indexoffset: int64_t
    - length: int64_t
    - numcontents: int64_t
    - lencontents: int64_t
    name: awkward_UnionArray8_U32_validity
  specification: "def awkward_UnionArray_validity(\n    tags, tagsoffset, index, indexoffset,\
    \ length, numcontents, lencontents\n):\n    for i in range(int(length)):\n   \
    \     tag = tags[tagsoffset + i]\n        idx = index[indexoffset + i]\n     \
    \   if tag < 0:\n            raise ValueError(\"tags[i] < 0\")\n        if idx\
    \ < 0:\n            raise ValueError(\"index[i] < 0\")\n        if tag >= numcontents:\n\
    \            raise ValueError(\"tags[i] >= len(contents)\")\n        lencontent\
    \ = lencontents[tag]\n        if idx >= lencontent:\n            raise ValueError(\"\
    index[i] >= len(content[tags[i]])\")\n"
- args:
  - tags: int8_t
  - tagsoffset: int64_t
  - index: int32_t
  - indexoffset: int64_t
  - length: int64_t
  - numcontents: int64_t
  - lencontents: int64_t
  name: awkward_UnionArray8_32_validity
  specification: "def awkward_UnionArray8_32_validity(\n    tags, tagsoffset, index,\
    \ indexoffset, length, numcontents, lencontents\n):\n    return awkward_UnionArray_validity(\n\
    \        tags, tagsoffset, index, indexoffset, length, numcontents, lencontents\n\
    \    )\n"
- args:
  - tags: int8_t
  - tagsoffset: int64_t
  - index: uint32_t
  - indexoffset: int64_t
  - length: int64_t
  - numcontents: int64_t
  - lencontents: int64_t
  name: awkward_UnionArray8_U32_validity
  specification: "def awkward_UnionArray8_U32_validity(\n    tags, tagsoffset, index,\
    \ indexoffset, length, numcontents, lencontents\n):\n    return awkward_UnionArray_validity(\n\
    \        tags, tagsoffset, index, indexoffset, length, numcontents, lencontents\n\
    \    )\n"
- args:
  - tags: int8_t
  - tagsoffset: int64_t
  - index: int64_t
  - indexoffset: int64_t
  - length: int64_t
  - numcontents: int64_t
  - lencontents: int64_t
  name: awkward_UnionArray8_64_validity
  specification: "def awkward_UnionArray8_64_validity(\n    tags, tagsoffset, index,\
    \ indexoffset, length, numcontents, lencontents\n):\n    return awkward_UnionArray_validity(\n\
    \        tags, tagsoffset, index, indexoffset, length, numcontents, lencontents\n\
    \    )\n"
- name: awkward_UnionArray_fillna
  specializations:
  - args:
    - toindex: int64_t
    - fromindex: int32_t
    - offset: int64_t
    - length: int64_t
    name: awkward_UnionArray_fillna_from32_to64
  - args:
    - toindex: int64_t
    - fromindex: uint32_t
    - offset: int64_t
    - length: int64_t
    name: awkward_UnionArray_fillna_fromU32_to64
  - args:
    - toindex: int64_t
    - fromindex: int64_t
    - offset: int64_t
    - length: int64_t
    name: awkward_UnionArray_fillna_from64_to64
  specification: "def awkward_UnionArray_fillna(toindex, fromindex, offset, length):\n\
    \    for i in range(int(length)):\n        toindex[i] = fromindex[offset + i]\
    \ if fromindex[offset + i] >= 0 else 0\n"
- args:
  - toindex: int64_t
  - fromindex: int32_t
  - offset: int64_t
  - length: int64_t
  name: awkward_UnionArray_fillna_from32_to64
  specification: "def awkward_UnionArray_fillna_from32_to64(toindex, fromindex, offset,\
    \ length):\n    return awkward_UnionArray_fillna(toindex, fromindex, offset, length)\n"
- args:
  - toindex: int64_t
  - fromindex: uint32_t
  - offset: int64_t
  - length: int64_t
  name: awkward_UnionArray_fillna_fromU32_to64
  specification: "def awkward_UnionArray_fillna_fromU32_to64(toindex, fromindex, offset,\
    \ length):\n    return awkward_UnionArray_fillna(toindex, fromindex, offset, length)\n"
- args:
  - toindex: int64_t
  - fromindex: int64_t
  - offset: int64_t
  - length: int64_t
  name: awkward_UnionArray_fillna_from64_to64
  specification: "def awkward_UnionArray_fillna_from64_to64(toindex, fromindex, offset,\
    \ length):\n    return awkward_UnionArray_fillna(toindex, fromindex, offset, length)\n"
- name: awkward_IndexedOptionArray_rpad_and_clip_mask_axis1
  specializations:
  - args:
    - toindex: int64_t
    - frommask: int8_t
    - length: int64_t
    name: awkward_IndexedOptionArray_rpad_and_clip_mask_axis1_64
  specification: "def awkward_IndexedOptionArray_rpad_and_clip_mask_axis1(toindex,\
    \ frommask, length):\n    count = 0\n    for i in range(int(length)):\n      \
    \  if frommask[i]:\n            toindex[i] = -1\n        else:\n            toindex[i]\
    \ = count = count + 1\n"
- args:
  - toindex: int64_t
  - frommask: int8_t
  - length: int64_t
  name: awkward_IndexedOptionArray_rpad_and_clip_mask_axis1_64
  specification: "def awkward_IndexedOptionArray_rpad_and_clip_mask_axis1_64(toindex,\
    \ frommask, length):\n    return awkward_IndexedOptionArray_rpad_and_clip_mask_axis1(\n\
    \        toindex, frommask, length\n    )\n"
- name: awkward_index_rpad_and_clip_axis0
  specializations:
  - args:
    - toindex: int64_t
    - target: int64_t
    - length: int64_t
    name: awkward_index_rpad_and_clip_axis0_64
  specification: "def awkward_index_rpad_and_clip_axis0(toindex, target, length):\n\
    \    shorter = target if target < length else length\n    for i in range(int(shorter)):\n\
    \        toindex[i] = i\n    for i in range(int(shorter), target):\n        toindex[i]\
    \ = -1\n"
- args:
  - toindex: int64_t
  - target: int64_t
  - length: int64_t
  name: awkward_index_rpad_and_clip_axis0_64
  specification: "def awkward_index_rpad_and_clip_axis0_64(toindex, target, length):\n\
    \    return awkward_index_rpad_and_clip_axis0(toindex, target, length)\n"
- name: awkward_index_rpad_and_clip_axis1
  specializations:
  - args:
    - tostarts: int64_t
    - tostops: int64_t
    - target: int64_t
    - length: int64_t
    name: awkward_index_rpad_and_clip_axis1_64
  specification: "def awkward_index_rpad_and_clip_axis1(tostarts, tostops, target,\
    \ length):\n    offset = 0\n    for i in range(int(length)):\n        tostarts[i]\
    \ = offset\n        offset = offset + target\n        tostops[i] = offset\n"
- args:
  - tostarts: int64_t
  - tostops: int64_t
  - target: int64_t
  - length: int64_t
  name: awkward_index_rpad_and_clip_axis1_64
  specification: "def awkward_index_rpad_and_clip_axis1_64(tostarts, tostops, target,\
    \ length):\n    return awkward_index_rpad_and_clip_axis1(tostarts, tostops, target,\
    \ length)\n"
- name: awkward_RegularArray_rpad_and_clip_axis1
  specializations:
  - args:
    - toindex: int64_t
    - target: int64_t
    - size: int64_t
    - length: int64_t
    name: awkward_RegularArray_rpad_and_clip_axis1_64
  specification: "def awkward_RegularArray_rpad_and_clip_axis1(toindex, target, size,\
    \ length):\n    shorter = target if target < size else size\n    for i in range(int(length)):\n\
    \        for j in range(int(shorter)):\n            toindex[(i * target) + j]\
    \ = (i * size) + j\n        for j in range(int(shorter), target):\n          \
    \  toindex[(i * target) + j] = -1\n"
- args:
  - toindex: int64_t
  - target: int64_t
  - size: int64_t
  - length: int64_t
  name: awkward_RegularArray_rpad_and_clip_axis1_64
  specification: "def awkward_RegularArray_rpad_and_clip_axis1_64(toindex, target,\
    \ size, length):\n    return awkward_RegularArray_rpad_and_clip_axis1(toindex,\
    \ target, size, length)\n"
- name: awkward_ListArray_min_range
  specializations:
  - args:
    - tomin: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArray32_min_range
  - args:
    - tomin: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArrayU32_min_range
  - args:
    - tomin: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArray64_min_range
  specification: "def awkward_ListArray_min_range(\n    tomin, fromstarts, fromstops,\
    \ lenstarts, startsoffset, stopsoffset\n):\n    shorter = fromstops[stopsoffset\
    \ + 0] - fromstarts[startsoffset + 0]\n    for i in range(int(1), lenstarts):\n\
    \        rangeval = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]\n\
    \        shorter = shorter if shorter < rangeval else rangeval\n    tomin[0] =\
    \ shorter\n"
- args:
  - tomin: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArray32_min_range
  specification: "def awkward_ListArray32_min_range(\n    tomin, fromstarts, fromstops,\
    \ lenstarts, startsoffset, stopsoffset\n):\n    return awkward_ListArray_min_range(\n\
    \        tomin, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset\n\
    \    )\n"
- args:
  - tomin: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArrayU32_min_range
  specification: "def awkward_ListArrayU32_min_range(\n    tomin, fromstarts, fromstops,\
    \ lenstarts, startsoffset, stopsoffset\n):\n    return awkward_ListArray_min_range(\n\
    \        tomin, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset\n\
    \    )\n"
- args:
  - tomin: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArray64_min_range
  specification: "def awkward_ListArray64_min_range(\n    tomin, fromstarts, fromstops,\
    \ lenstarts, startsoffset, stopsoffset\n):\n    return awkward_ListArray_min_range(\n\
    \        tomin, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset\n\
    \    )\n"
- name: awkward_ListArray_rpad_and_clip_length_axis1
  specializations:
  - args:
    - tomin: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - target: int64_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArray64_rpad_and_clip_length_axis1
  - args:
    - tomin: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - target: int64_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArray32_rpad_and_clip_length_axis1
  - args:
    - tomin: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - target: int64_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArrayU32_rpad_and_clip_length_axis1
  specification: "def awkward_ListArray_rpad_and_clip_length_axis1(\n    tomin, fromstarts,\
    \ fromstops, target, lenstarts, startsoffset, stopsoffset\n):\n    length = 0\n\
    \    for i in range(int(lenstarts)):\n        rangeval = fromstops[stopsoffset\
    \ + i] - fromstarts[startsoffset + i]\n        length += target if target > rangeval\
    \ else rangeval\n    tomin[0] = length\n"
- args:
  - tomin: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - target: int64_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArray32_rpad_and_clip_length_axis1
  specification: "def awkward_ListArray32_rpad_and_clip_length_axis1(\n    tomin,\
    \ fromstarts, fromstops, target, lenstarts, startsoffset, stopsoffset\n):\n  \
    \  return awkward_ListArray_rpad_and_clip_length_axis1(\n        tomin, fromstarts,\
    \ fromstops, target, lenstarts, startsoffset, stopsoffset\n    )\n"
- args:
  - tomin: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - target: int64_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArrayU32_rpad_and_clip_length_axis1
  specification: "def awkward_ListArrayU32_rpad_and_clip_length_axis1(\n    tomin,\
    \ fromstarts, fromstops, target, lenstarts, startsoffset, stopsoffset\n):\n  \
    \  return awkward_ListArray_rpad_and_clip_length_axis1(\n        tomin, fromstarts,\
    \ fromstops, target, lenstarts, startsoffset, stopsoffset\n    )\n"
- args:
  - tomin: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - target: int64_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArray64_rpad_and_clip_length_axis1
  specification: "def awkward_ListArray64_rpad_and_clip_length_axis1(\n    tomin,\
    \ fromstarts, fromstops, target, lenstarts, startsoffset, stopsoffset\n):\n  \
    \  return awkward_ListArray_rpad_and_clip_length_axis1(\n        tomin, fromstarts,\
    \ fromstops, target, lenstarts, startsoffset, stopsoffset\n    )\n"
- name: awkward_ListArray_rpad_axis1
  specializations:
  - args:
    - toindex: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - tostarts: int64_t
    - tostops: int64_t
    - target: int64_t
    - length: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArray64_rpad_axis1_64
  - args:
    - toindex: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - tostarts: uint32_t
    - tostops: uint32_t
    - target: int64_t
    - length: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArrayU32_rpad_axis1_64
  - args:
    - toindex: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - tostarts: int32_t
    - tostops: int32_t
    - target: int64_t
    - length: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    name: awkward_ListArray32_rpad_axis1_64
  specification: "def awkward_ListArray_rpad_axis1(\n    toindex,\n    fromstarts,\n\
    \    fromstops,\n    tostarts,\n    tostops,\n    target,\n    length,\n    startsoffset,\n\
    \    stopsoffset,\n):\n    offset = 0\n    for i in range(int(length)):\n    \
    \    tostarts[i] = offset\n        rangeval = fromstops[stopsoffset + i] - fromstarts[startsoffset\
    \ + i]\n        for j in range(int(rangeval)):\n            toindex[offset + j]\
    \ = fromstarts[startsoffset + i] + j\n        for j in range(int(rangeval), target):\n\
    \            toindex[offset + j] = -1\n        offset = tostarts[i] + target if\
    \ target > rangeval else tostarts[i] + rangeval\n        tostops[i] = offset\n"
- args:
  - toindex: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - tostarts: int32_t
  - tostops: int32_t
  - target: int64_t
  - length: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArray32_rpad_axis1_64
  specification: "def awkward_ListArray32_rpad_axis1_64(\n    toindex,\n    fromstarts,\n\
    \    fromstops,\n    tostarts,\n    tostops,\n    target,\n    length,\n    startsoffset,\n\
    \    stopsoffset,\n):\n    return awkward_ListArray_rpad_axis1(\n        toindex,\n\
    \        fromstarts,\n        fromstops,\n        tostarts,\n        tostops,\n\
    \        target,\n        length,\n        startsoffset,\n        stopsoffset,\n\
    \    )\n"
- args:
  - toindex: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - tostarts: uint32_t
  - tostops: uint32_t
  - target: int64_t
  - length: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArrayU32_rpad_axis1_64
  specification: "def awkward_ListArrayU32_rpad_axis1_64(\n    toindex,\n    fromstarts,\n\
    \    fromstops,\n    tostarts,\n    tostops,\n    target,\n    length,\n    startsoffset,\n\
    \    stopsoffset,\n):\n    return awkward_ListArray_rpad_axis1(\n        toindex,\n\
    \        fromstarts,\n        fromstops,\n        tostarts,\n        tostops,\n\
    \        target,\n        length,\n        startsoffset,\n        stopsoffset,\n\
    \    )\n"
- args:
  - toindex: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - tostarts: int64_t
  - tostops: int64_t
  - target: int64_t
  - length: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  name: awkward_ListArray64_rpad_axis1_64
  specification: "def awkward_ListArray64_rpad_axis1_64(\n    toindex,\n    fromstarts,\n\
    \    fromstops,\n    tostarts,\n    tostops,\n    target,\n    length,\n    startsoffset,\n\
    \    stopsoffset,\n):\n    return awkward_ListArray_rpad_axis1(\n        toindex,\n\
    \        fromstarts,\n        fromstops,\n        tostarts,\n        tostops,\n\
    \        target,\n        length,\n        startsoffset,\n        stopsoffset,\n\
    \    )\n"
- name: awkward_ListOffsetArray_rpad_and_clip_axis1
  specializations:
  - args:
    - toindex: int64_t
    - fromoffsets: uint32_t
    - offsetsoffset: int64_t
    - length: int64_t
    - target: int64_t
    name: awkward_ListOffsetArrayU32_rpad_and_clip_axis1_64
  - args:
    - toindex: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - length: int64_t
    - target: int64_t
    name: awkward_ListOffsetArray64_rpad_and_clip_axis1_64
  - args:
    - toindex: int64_t
    - fromoffsets: int32_t
    - offsetsoffset: int64_t
    - length: int64_t
    - target: int64_t
    name: awkward_ListOffsetArray32_rpad_and_clip_axis1_64
  specification: "def awkward_ListOffsetArray_rpad_and_clip_axis1(\n    toindex, fromoffsets,\
    \ offsetsoffset, length, target\n):\n    for i in range(int(length)):\n      \
    \  rangeval = float(\n            fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset\
    \ + i]\n        )\n        shorter = target if target < rangeval else rangeval\n\
    \        for j in range(int(shorter)):\n            toindex[(i * target) + j]\
    \ = float(fromoffsets[offsetsoffset + i]) + j\n        for j in range(int(shorter),\
    \ target):\n            toindex[(i * target) + j] = -1\n"
- args:
  - toindex: int64_t
  - fromoffsets: int32_t
  - offsetsoffset: int64_t
  - length: int64_t
  - target: int64_t
  name: awkward_ListOffsetArray32_rpad_and_clip_axis1_64
  specification: "def awkward_ListOffsetArray32_rpad_and_clip_axis1_64(\n    toindex,\
    \ fromoffsets, offsetsoffset, length, target\n):\n    return awkward_ListOffsetArray_rpad_and_clip_axis1(\n\
    \        toindex, fromoffsets, offsetsoffset, length, target\n    )\n"
- args:
  - toindex: int64_t
  - fromoffsets: uint32_t
  - offsetsoffset: int64_t
  - length: int64_t
  - target: int64_t
  name: awkward_ListOffsetArrayU32_rpad_and_clip_axis1_64
  specification: "def awkward_ListOffsetArrayU32_rpad_and_clip_axis1_64(\n    toindex,\
    \ fromoffsets, offsetsoffset, length, target\n):\n    return awkward_ListOffsetArray_rpad_and_clip_axis1(\n\
    \        toindex, fromoffsets, offsetsoffset, length, target\n    )\n"
- args:
  - toindex: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  - target: int64_t
  name: awkward_ListOffsetArray64_rpad_and_clip_axis1_64
  specification: "def awkward_ListOffsetArray64_rpad_and_clip_axis1_64(\n    toindex,\
    \ fromoffsets, offsetsoffset, length, target\n):\n    return awkward_ListOffsetArray_rpad_and_clip_axis1(\n\
    \        toindex, fromoffsets, offsetsoffset, length, target\n    )\n"
- name: awkward_ListOffsetArray_rpad_length_axis1
  specializations:
  - args:
    - tooffsets: uint32_t
    - fromoffsets: uint32_t
    - offsetsoffset: int64_t
    - fromlength: int64_t
    - target: int64_t
    - tolength: int64_t
    name: awkward_ListOffsetArrayU32_rpad_length_axis1
  - args:
    - tooffsets: int32_t
    - fromoffsets: int32_t
    - offsetsoffset: int64_t
    - fromlength: int64_t
    - target: int64_t
    - tolength: int64_t
    name: awkward_ListOffsetArray32_rpad_length_axis1
  - args:
    - tooffsets: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - fromlength: int64_t
    - target: int64_t
    - tolength: int64_t
    name: awkward_ListOffsetArray64_rpad_length_axis1
  specification: "def awkward_ListOffsetArray_rpad_length_axis1(\n    tooffsets, fromoffsets,\
    \ offsetsoffset, fromlength, target, tolength\n):\n    length = 0\n    tooffsets[0]\
    \ = 0\n    for i in range(int(fromlength)):\n        rangeval = fromoffsets[(offsetsoffset\
    \ + i) + 1] - fromoffsets[offsetsoffset + i]\n        longer = rangeval if target\
    \ < rangeval else target\n        length = length + longer\n        tooffsets[i\
    \ + 1] = tooffsets[i] + longer\n    tolength[0] = length\n"
- args:
  - tooffsets: int32_t
  - fromoffsets: int32_t
  - offsetsoffset: int64_t
  - fromlength: int64_t
  - target: int64_t
  - tolength: int64_t
  name: awkward_ListOffsetArray32_rpad_length_axis1
  specification: "def awkward_ListOffsetArray32_rpad_length_axis1(\n    tooffsets,\
    \ fromoffsets, offsetsoffset, fromlength, target, tolength\n):\n    return awkward_ListOffsetArray_rpad_length_axis1(\n\
    \        tooffsets, fromoffsets, offsetsoffset, fromlength, target, tolength\n\
    \    )\n"
- args:
  - tooffsets: uint32_t
  - fromoffsets: uint32_t
  - offsetsoffset: int64_t
  - fromlength: int64_t
  - target: int64_t
  - tolength: int64_t
  name: awkward_ListOffsetArrayU32_rpad_length_axis1
  specification: "def awkward_ListOffsetArrayU32_rpad_length_axis1(\n    tooffsets,\
    \ fromoffsets, offsetsoffset, fromlength, target, tolength\n):\n    return awkward_ListOffsetArray_rpad_length_axis1(\n\
    \        tooffsets, fromoffsets, offsetsoffset, fromlength, target, tolength\n\
    \    )\n"
- args:
  - tooffsets: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - fromlength: int64_t
  - target: int64_t
  - tolength: int64_t
  name: awkward_ListOffsetArray64_rpad_length_axis1
  specification: "def awkward_ListOffsetArray64_rpad_length_axis1(\n    tooffsets,\
    \ fromoffsets, offsetsoffset, fromlength, target, tolength\n):\n    return awkward_ListOffsetArray_rpad_length_axis1(\n\
    \        tooffsets, fromoffsets, offsetsoffset, fromlength, target, tolength\n\
    \    )\n"
- name: awkward_ListOffsetArray_rpad_axis1
  specializations:
  - args:
    - toindex: int64_t
    - fromoffsets: uint32_t
    - offsetsoffset: int64_t
    - fromlength: int64_t
    - target: int64_t
    name: awkward_ListOffsetArrayU32_rpad_axis1_64
  - args:
    - toindex: int64_t
    - fromoffsets: int32_t
    - offsetsoffset: int64_t
    - fromlength: int64_t
    - target: int64_t
    name: awkward_ListOffsetArray32_rpad_axis1_64
  - args:
    - toindex: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - fromlength: int64_t
    - target: int64_t
    name: awkward_ListOffsetArray64_rpad_axis1_64
  specification: "def awkward_ListOffsetArray_rpad_axis1(\n    toindex, fromoffsets,\
    \ offsetsoffset, fromlength, target\n):\n    count = 0\n    for i in range(int(fromlength)):\n\
    \        rangeval = float(\n            fromoffsets[(offsetsoffset + i) + 1] -\
    \ fromoffsets[offsetsoffset + i]\n        )\n        for j in range(int(rangeval)):\n\
    \            toindex[count] = float(fromoffsets[offsetsoffset + i]) + j\n    \
    \        count = count + 1\n        for j in range(int(rangeval), target):\n \
    \           toindex[count] = -1\n            count = count + 1\n"
- args:
  - toindex: int64_t
  - fromoffsets: int32_t
  - offsetsoffset: int64_t
  - fromlength: int64_t
  - target: int64_t
  name: awkward_ListOffsetArray32_rpad_axis1_64
  specification: "def awkward_ListOffsetArray32_rpad_axis1_64(\n    toindex, fromoffsets,\
    \ offsetsoffset, fromlength, target\n):\n    return awkward_ListOffsetArray_rpad_axis1(\n\
    \        toindex, fromoffsets, offsetsoffset, fromlength, target\n    )\n"
- args:
  - toindex: int64_t
  - fromoffsets: uint32_t
  - offsetsoffset: int64_t
  - fromlength: int64_t
  - target: int64_t
  name: awkward_ListOffsetArrayU32_rpad_axis1_64
  specification: "def awkward_ListOffsetArrayU32_rpad_axis1_64(\n    toindex, fromoffsets,\
    \ offsetsoffset, fromlength, target\n):\n    return awkward_ListOffsetArray_rpad_axis1(\n\
    \        toindex, fromoffsets, offsetsoffset, fromlength, target\n    )\n"
- args:
  - toindex: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - fromlength: int64_t
  - target: int64_t
  name: awkward_ListOffsetArray64_rpad_axis1_64
  specification: "def awkward_ListOffsetArray64_rpad_axis1_64(\n    toindex, fromoffsets,\
    \ offsetsoffset, fromlength, target\n):\n    return awkward_ListOffsetArray_rpad_axis1(\n\
    \        toindex, fromoffsets, offsetsoffset, fromlength, target\n    )\n"
- name: awkward_localindex
  specializations:
  - args:
    - toindex: int64_t
    - length: int64_t
    name: awkward_localindex_64
  specification: "def awkward_localindex(toindex, length):\n    for i in range(int(length)):\n\
    \        toindex[i] = i\n"
- args:
  - toindex: int64_t
  - length: int64_t
  name: awkward_localindex_64
  specification: "def awkward_localindex_64(toindex, length):\n    return awkward_localindex(toindex,\
    \ length)\n"
- name: awkward_ListArray_localindex
  specializations:
  - args:
    - toindex: int64_t
    - offsets: int32_t
    - offsetsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray32_localindex_64
  - args:
    - toindex: int64_t
    - offsets: int64_t
    - offsetsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray64_localindex_64
  - args:
    - toindex: int64_t
    - offsets: uint32_t
    - offsetsoffset: int64_t
    - length: int64_t
    name: awkward_ListArrayU32_localindex_64
  specification: "def awkward_ListArray_localindex(toindex, offsets, offsetsoffset,\
    \ length):\n    for i in range(int(length)):\n        start = int(offsets[offsetsoffset\
    \ + i])\n        stop = int(offsets[(offsetsoffset + i) + 1])\n        for j in\
    \ range(int(start), stop):\n            toindex[j] = j - start\n"
- args:
  - toindex: int64_t
  - offsets: int32_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray32_localindex_64
  specification: "def awkward_ListArray32_localindex_64(toindex, offsets, offsetsoffset,\
    \ length):\n    return awkward_ListArray_localindex(toindex, offsets, offsetsoffset,\
    \ length)\n"
- args:
  - toindex: int64_t
  - offsets: uint32_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListArrayU32_localindex_64
  specification: "def awkward_ListArrayU32_localindex_64(toindex, offsets, offsetsoffset,\
    \ length):\n    return awkward_ListArray_localindex(toindex, offsets, offsetsoffset,\
    \ length)\n"
- args:
  - toindex: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray64_localindex_64
  specification: "def awkward_ListArray64_localindex_64(toindex, offsets, offsetsoffset,\
    \ length):\n    return awkward_ListArray_localindex(toindex, offsets, offsetsoffset,\
    \ length)\n"
- name: awkward_RegularArray_localindex
  specializations:
  - args:
    - toindex: int64_t
    - size: int64_t
    - length: int64_t
    name: awkward_RegularArray_localindex_64
  specification: "def awkward_RegularArray_localindex(toindex, size, length):\n  \
    \  for i in range(int(length)):\n        for j in range(int(size)):\n        \
    \    toindex[(i * size) + j] = j\n"
- args:
  - toindex: int64_t
  - size: int64_t
  - length: int64_t
  name: awkward_RegularArray_localindex_64
  specification: "def awkward_RegularArray_localindex_64(toindex, size, length):\n\
    \    return awkward_RegularArray_localindex(toindex, size, length)\n"
- name: awkward_combinations
  specializations:
  - args:
    - toindex: int64_t
    - n: int64_t
    - replacement: bool
    - singlelen: int64_t
    name: awkward_combinations_64
  specification: "def awkward_combinations(toindex, n, replacement, singlelen):\n\
    \    raise ValueError(\"FIXME: awkward_combinations\")\n"
- args:
  - toindex: int64_t
  - n: int64_t
  - replacement: bool
  - singlelen: int64_t
  name: awkward_combinations_64
  specification: "def awkward_combinations_64(toindex, n, replacement, singlelen):\n\
    \    return awkward_combinations(toindex, n, replacement, singlelen)\n"
- name: awkward_ListArray_combinations_length
  specializations:
  - args:
    - totallen: int64_t
    - tooffsets: int64_t
    - n: int64_t
    - replacement: bool
    - starts: uint32_t
    - startsoffset: int64_t
    - stops: uint32_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArrayU32_combinations_length_64
  - args:
    - totallen: int64_t
    - tooffsets: int64_t
    - n: int64_t
    - replacement: bool
    - starts: int64_t
    - startsoffset: int64_t
    - stops: int64_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray64_combinations_length_64
  - args:
    - totallen: int64_t
    - tooffsets: int64_t
    - n: int64_t
    - replacement: bool
    - starts: int32_t
    - startsoffset: int64_t
    - stops: int32_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray32_combinations_length_64
  specification: "def awkward_ListArray_combinations_length(\n    totallen,\n    tooffsets,\n\
    \    n,\n    replacement,\n    starts,\n    startsoffset,\n    stops,\n    stopsoffset,\n\
    \    length,\n):\n    totallen[0] = 0\n    tooffsets[0] = 0\n    for i in range(int(length)):\n\
    \        size = int(stops[stopsoffset + i] - starts[startsoffset + i])\n     \
    \   if replacement:\n            size += n - 1\n        thisn = n\n\n        if\
    \ thisn > size:\n            combinationslen = 0\n        else:\n            if\
    \ thisn == size:\n                combinationslen = 1\n            else:\n   \
    \             if (thisn * 2) > size:\n                    thisn = size - thisn\n\
    \                combinationslen = size\n                j = 2\n             \
    \   while j <= thisn:\n                    combinationslen *= (size - j) + 1\n\
    \                    combinationslen /= j\n                    j = j + 1\n   \
    \     totallen[0] = totallen[0] + combinationslen\n        tooffsets[i + 1] =\
    \ tooffsets[i] + combinationslen\n"
- args:
  - totallen: int64_t
  - tooffsets: int64_t
  - n: int64_t
  - replacement: bool
  - starts: int32_t
  - startsoffset: int64_t
  - stops: int32_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray32_combinations_length_64
  specification: "def awkward_ListArray32_combinations_length_64(\n    totallen,\n\
    \    tooffsets,\n    n,\n    replacement,\n    starts,\n    startsoffset,\n  \
    \  stops,\n    stopsoffset,\n    length,\n):\n    return awkward_ListArray_combinations_length(\n\
    \        totallen,\n        tooffsets,\n        n,\n        replacement,\n   \
    \     starts,\n        startsoffset,\n        stops,\n        stopsoffset,\n \
    \       length,\n    )\n"
- args:
  - totallen: int64_t
  - tooffsets: int64_t
  - n: int64_t
  - replacement: bool
  - starts: uint32_t
  - startsoffset: int64_t
  - stops: uint32_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArrayU32_combinations_length_64
  specification: "def awkward_ListArrayU32_combinations_length_64(\n    totallen,\n\
    \    tooffsets,\n    n,\n    replacement,\n    starts,\n    startsoffset,\n  \
    \  stops,\n    stopsoffset,\n    length,\n):\n    return awkward_ListArray_combinations_length(\n\
    \        totallen,\n        tooffsets,\n        n,\n        replacement,\n   \
    \     starts,\n        startsoffset,\n        stops,\n        stopsoffset,\n \
    \       length,\n    )\n"
- args:
  - totallen: int64_t
  - tooffsets: int64_t
  - n: int64_t
  - replacement: bool
  - starts: int64_t
  - startsoffset: int64_t
  - stops: int64_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray64_combinations_length_64
  specification: "def awkward_ListArray64_combinations_length_64(\n    totallen,\n\
    \    tooffsets,\n    n,\n    replacement,\n    starts,\n    startsoffset,\n  \
    \  stops,\n    stopsoffset,\n    length,\n):\n    return awkward_ListArray_combinations_length(\n\
    \        totallen,\n        tooffsets,\n        n,\n        replacement,\n   \
    \     starts,\n        startsoffset,\n        stops,\n        stopsoffset,\n \
    \       length,\n    )\n"
- args:
  - toindex: int64_t
  - fromindex: int64_t
  - j: int64_t
  - stop: int64_t
  - n: int64_t
  - replacement: bool
  name: awkward_ListArray_combinations_step
  specification: "def awkward_ListArray_combinations_step(\n    tocarry, toindex,\
    \ fromindex, j, stop, n, replacement\n):\n    while fromindex[j] < stop:\n   \
    \     if replacement:\n            k = j + 1\n            while k < n:\n     \
    \           fromindex[k] = fromindex[j]\n                k = k + 1\n        else:\n\
    \            k = j + 1\n            while k < n:\n                fromindex[k]\
    \ = fromindex[j] + (k - j)\n                k = k + 1\n        if (j + 1) == n:\n\
    \            for k in range(int(n)):\n                tocarry[k][toindex[k]] =\
    \ fromindex[k]\n                toindex[k] = toindex[k] + 1\n        else:\n \
    \           awkward_ListArray_combinations_step(\n                tocarry, toindex,\
    \ fromindex, j + 1, stop, n, replacement\n            )\n        fromindex[j]\
    \ = fromindex[j] + 1\n"
- name: awkward_ListArray_combinations
  specializations:
  - args:
    - '* tocarry': int64_t
    - toindex: int64_t
    - fromindex: int64_t
    - n: int64_t
    - replacement: bool
    - starts: uint32_t
    - startsoffset: int64_t
    - stops: uint32_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArrayU32_combinations_64
  - args:
    - '* tocarry': int64_t
    - toindex: int64_t
    - fromindex: int64_t
    - n: int64_t
    - replacement: bool
    - starts: int64_t
    - startsoffset: int64_t
    - stops: int64_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray64_combinations_64
  - args:
    - '* tocarry': int64_t
    - toindex: int64_t
    - fromindex: int64_t
    - n: int64_t
    - replacement: bool
    - starts: int32_t
    - startsoffset: int64_t
    - stops: int32_t
    - stopsoffset: int64_t
    - length: int64_t
    name: awkward_ListArray32_combinations_64
  specification: "def awkward_ListArray_combinations(\n    tocarry,\n    toindex,\n\
    \    fromindex,\n    n,\n    replacement,\n    starts,\n    startsoffset,\n  \
    \  stops,\n    stopsoffset,\n    length,\n):\n    for j in range(int(n)):\n  \
    \      toindex[j] = 0\n    for i in range(int(length)):\n        start = int(starts[startsoffset\
    \ + i])\n        stop = int(stops[stopsoffset + i])\n        fromindex[0] = start\n\
    \        awkward_ListArray_combinations_step(\n            tocarry, toindex, fromindex,\
    \ 0, stop, n, replacement\n        )\n"
- args:
  - '* tocarry': int64_t
  - toindex: int64_t
  - fromindex: int64_t
  - n: int64_t
  - replacement: bool
  - starts: int32_t
  - startsoffset: int64_t
  - stops: int32_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray32_combinations_64
  specification: "def awkward_ListArray32_combinations_64(\n    tocarry,\n    toindex,\n\
    \    fromindex,\n    n,\n    replacement,\n    starts,\n    startsoffset,\n  \
    \  stops,\n    stopsoffset,\n    length,\n):\n    return awkward_ListArray_combinations(\n\
    \        tocarry,\n        toindex,\n        fromindex,\n        n,\n        replacement,\n\
    \        starts,\n        startsoffset,\n        stops,\n        stopsoffset,\n\
    \        length,\n    )\n"
- args:
  - '* tocarry': int64_t
  - toindex: int64_t
  - fromindex: int64_t
  - n: int64_t
  - replacement: bool
  - starts: uint32_t
  - startsoffset: int64_t
  - stops: uint32_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArrayU32_combinations_64
  specification: "def awkward_ListArrayU32_combinations_64(\n    tocarry,\n    toindex,\n\
    \    fromindex,\n    n,\n    replacement,\n    starts,\n    startsoffset,\n  \
    \  stops,\n    stopsoffset,\n    length,\n):\n    return awkward_ListArray_combinations(\n\
    \        tocarry,\n        toindex,\n        fromindex,\n        n,\n        replacement,\n\
    \        starts,\n        startsoffset,\n        stops,\n        stopsoffset,\n\
    \        length,\n    )\n"
- args:
  - '* tocarry': int64_t
  - toindex: int64_t
  - fromindex: int64_t
  - n: int64_t
  - replacement: bool
  - starts: int64_t
  - startsoffset: int64_t
  - stops: int64_t
  - stopsoffset: int64_t
  - length: int64_t
  name: awkward_ListArray64_combinations_64
  specification: "def awkward_ListArray64_combinations_64(\n    tocarry,\n    toindex,\n\
    \    fromindex,\n    n,\n    replacement,\n    starts,\n    startsoffset,\n  \
    \  stops,\n    stopsoffset,\n    length,\n):\n    return awkward_ListArray_combinations(\n\
    \        tocarry,\n        toindex,\n        fromindex,\n        n,\n        replacement,\n\
    \        starts,\n        startsoffset,\n        stops,\n        stopsoffset,\n\
    \        length,\n    )\n"
- name: awkward_RegularArray_combinations
  specializations:
  - args:
    - '* tocarry': int64_t
    - toindex: int64_t
    - fromindex: int64_t
    - n: int64_t
    - replacement: bool
    - size: int64_t
    - length: int64_t
    name: awkward_RegularArray_combinations_64
  specification: "def awkward_RegularArray_combinations(\n    tocarry, toindex, fromindex,\
    \ n, replacement, size, length\n):\n    for j in range(int(n)):\n        toindex[j]\
    \ = 0\n    for i in range(int(length)):\n        start = size * i\n        stop\
    \ = start + size\n        fromindex[0] = start\n        awkward_ListArray_combinations_step(\n\
    \            tocarry, toindex, fromindex, 0, stop, n, replacement\n        )\n"
- args:
  - '* tocarry': int64_t
  - toindex: int64_t
  - fromindex: int64_t
  - n: int64_t
  - replacement: bool
  - size: int64_t
  - length: int64_t
  name: awkward_RegularArray_combinations_64
  specification: "def awkward_RegularArray_combinations_64(\n    tocarry, toindex,\
    \ fromindex, n, replacement, size, length\n):\n    return awkward_RegularArray_combinations(\n\
    \        tocarry, toindex, fromindex, n, replacement, size, length\n    )\n"
- name: awkward_ByteMaskedArray_overlay_mask
  specializations:
  - args:
    - tomask: int8_t
    - theirmask: int8_t
    - theirmaskoffset: int64_t
    - mymask: int8_t
    - mymaskoffset: int64_t
    - length: int64_t
    - validwhen: bool
    name: awkward_ByteMaskedArray_overlay_mask8
  specification: "def awkward_ByteMaskedArray_overlay_mask(\n    tomask, theirmask,\
    \ theirmaskoffset, mymask, mymaskoffset, length, validwhen\n):\n    for i in range(int(length)):\n\
    \        theirs = theirmask[theirmaskoffset + i]\n        mine = (mymask[mymaskoffset\
    \ + i] != 0) != validwhen\n        tomask[i] = 1 if theirs | mine else 0\n"
- args:
  - tomask: int8_t
  - theirmask: int8_t
  - theirmaskoffset: int64_t
  - mymask: int8_t
  - mymaskoffset: int64_t
  - length: int64_t
  - validwhen: bool
  name: awkward_ByteMaskedArray_overlay_mask8
  specification: "def awkward_ByteMaskedArray_overlay_mask8(\n    tomask, theirmask,\
    \ theirmaskoffset, mymask, mymaskoffset, length, validwhen\n):\n    return awkward_ByteMaskedArray_overlay_mask(\n\
    \        tomask, theirmask, theirmaskoffset, mymask, mymaskoffset, length, validwhen\n\
    \    )\n"
- args:
  - tobytemask: int8_t
  - frombitmask: uint8_t
  - bitmaskoffset: int64_t
  - bitmasklength: int64_t
  - validwhen: bool
  - lsborder: bool
  name: awkward_BitMaskedArray_to_ByteMaskedArray
  specification: "def awkward_BitMaskedArray_to_ByteMaskedArray(\n    tobytemask,\
    \ frombitmask, bitmaskoffset, bitmasklength, validwhen, lsb_order\n):\n    if\
    \ lsb_order:\n        for i in range(int(bitmasklength)):\n            byte =\
    \ frombitmask[bitmaskoffset + i]\n            tobytemask[(i * 8) + 0] = (byte\
    \ & int(1)) != validwhen\n            byte >>= 1\n            tobytemask[(i *\
    \ 8) + 1] = (byte & int(1)) != validwhen\n            byte >>= 1\n           \
    \ tobytemask[(i * 8) + 2] = (byte & int(1)) != validwhen\n            byte >>=\
    \ 1\n            tobytemask[(i * 8) + 3] = (byte & int(1)) != validwhen\n    \
    \        byte >>= 1\n            tobytemask[(i * 8) + 4] = (byte & int(1)) !=\
    \ validwhen\n            byte >>= 1\n            tobytemask[(i * 8) + 5] = (byte\
    \ & int(1)) != validwhen\n            byte >>= 1\n            tobytemask[(i *\
    \ 8) + 6] = (byte & int(1)) != validwhen\n            byte >>= 1\n           \
    \ tobytemask[(i * 8) + 7] = (byte & int(1)) != validwhen\n    else:\n        for\
    \ i in range(int(bitmasklength)):\n            byte = frombitmask[bitmaskoffset\
    \ + i]\n            tobytemask[(i * 8) + 0] = ((byte & int(128)) != 0) != validwhen\n\
    \            byte <<= 1\n            tobytemask[(i * 8) + 1] = ((byte & int(128))\
    \ != 0) != validwhen\n            byte <<= 1\n            tobytemask[(i * 8) +\
    \ 2] = ((byte & int(128)) != 0) != validwhen\n            byte <<= 1\n       \
    \     tobytemask[(i * 8) + 3] = ((byte & int(128)) != 0) != validwhen\n      \
    \      byte <<= 1\n            tobytemask[(i * 8) + 4] = ((byte & int(128)) !=\
    \ 0) != validwhen\n            byte <<= 1\n            tobytemask[(i * 8) + 5]\
    \ = ((byte & int(128)) != 0) != validwhen\n            byte <<= 1\n          \
    \  tobytemask[(i * 8) + 6] = ((byte & int(128)) != 0) != validwhen\n         \
    \   byte <<= 1\n            tobytemask[(i * 8) + 7] = ((byte & int(128)) != 0)\
    \ != validwhen\n"
- name: awkward_BitMaskedArray_to_IndexedOptionArray
  specializations:
  - args:
    - toindex: int64_t
    - frombitmask: uint8_t
    - bitmaskoffset: int64_t
    - bitmasklength: int64_t
    - validwhen: bool
    - lsborder: bool
    name: awkward_BitMaskedArray_to_IndexedOptionArray64
  specification: "def awkward_BitMaskedArray_to_IndexedOptionArray(\n    toindex,\
    \ frombitmask, bitmaskoffset, bitmasklength, validwhen, lsb_order\n):\n    if\
    \ lsb_order:\n        for i in range(int(bitmasklength)):\n            byte =\
    \ frombitmask[bitmaskoffset + i]\n            if (byte & int(1)) == validwhen:\n\
    \                toindex[(i * 8) + 0] = (i * 8) + 0\n            else:\n     \
    \           toindex[(i * 8) + 0] = -1\n            byte >>= 1\n            if\
    \ (byte & int(1)) == validwhen:\n                toindex[(i * 8) + 1] = (i * 8)\
    \ + 1\n            else:\n                toindex[(i * 8) + 1] = -1\n        \
    \    byte >>= 1\n            if (byte & int(1)) == validwhen:\n              \
    \  toindex[(i * 8) + 2] = (i * 8) + 2\n            else:\n                toindex[(i\
    \ * 8) + 2] = -1\n            byte >>= 1\n            if (byte & int(1)) == validwhen:\n\
    \                toindex[(i * 8) + 3] = (i * 8) + 3\n            else:\n     \
    \           toindex[(i * 8) + 3] = -1\n            byte >>= 1\n            if\
    \ (byte & int(1)) == validwhen:\n                toindex[(i * 8) + 4] = (i * 8)\
    \ + 4\n            else:\n                toindex[(i * 8) + 4] = -1\n        \
    \    byte >>= 1\n            if (byte & int(1)) == validwhen:\n              \
    \  toindex[(i * 8) + 5] = (i * 8) + 5\n            else:\n                toindex[(i\
    \ * 8) + 5] = -1\n            byte >>= 1\n            if (byte & int(1)) == validwhen:\n\
    \                toindex[(i * 8) + 6] = (i * 8) + 6\n            else:\n     \
    \           toindex[(i * 8) + 6] = -1\n            byte >>= 1\n            if\
    \ (byte & int(1)) == validwhen:\n                toindex[(i * 8) + 7] = (i * 8)\
    \ + 7\n            else:\n                toindex[(i * 8) + 7] = -1\n    else:\n\
    \        for i in range(int(bitmasklength)):\n            byte = frombitmask[bitmaskoffset\
    \ + i]\n            if ((byte & int(128)) != 0) == validwhen:\n              \
    \  toindex[(i * 8) + 0] = (i * 8) + 0\n            else:\n                toindex[(i\
    \ * 8) + 0] = -1\n            byte <<= 1\n            if ((byte & int(128)) !=\
    \ 0) == validwhen:\n                toindex[(i * 8) + 1] = (i * 8) + 1\n     \
    \       else:\n                toindex[(i * 8) + 1] = -1\n            byte <<=\
    \ 1\n            if ((byte & int(128)) != 0) == validwhen:\n                toindex[(i\
    \ * 8) + 2] = (i * 8) + 2\n            else:\n                toindex[(i * 8)\
    \ + 2] = -1\n            byte <<= 1\n            if ((byte & int(128)) != 0) ==\
    \ validwhen:\n                toindex[(i * 8) + 3] = (i * 8) + 3\n           \
    \ else:\n                toindex[(i * 8) + 3] = -1\n            byte <<= 1\n \
    \           if ((byte & int(128)) != 0) == validwhen:\n                toindex[(i\
    \ * 8) + 4] = (i * 8) + 4\n            else:\n                toindex[(i * 8)\
    \ + 4] = -1\n            byte <<= 1\n            if ((byte & int(128)) != 0) ==\
    \ validwhen:\n                toindex[(i * 8) + 5] = (i * 8) + 5\n           \
    \ else:\n                toindex[(i * 8) + 5] = -1\n            byte <<= 1\n \
    \           if ((byte & int(128)) != 0) == validwhen:\n                toindex[(i\
    \ * 8) + 6] = (i * 8) + 6\n            else:\n                toindex[(i * 8)\
    \ + 6] = -1\n            byte <<= 1\n            if ((byte & int(128)) != 0) ==\
    \ validwhen:\n                toindex[(i * 8) + 7] = (i * 8) + 7\n           \
    \ else:\n                toindex[(i * 8) + 7] = -1\n"
- args:
  - toindex: int64_t
  - frombitmask: uint8_t
  - bitmaskoffset: int64_t
  - bitmasklength: int64_t
  - validwhen: bool
  - lsborder: bool
  name: awkward_BitMaskedArray_to_IndexedOptionArray64
  specification: "def awkward_BitMaskedArray_to_IndexedOptionArray64(\n    toindex,\
    \ frombitmask, bitmaskoffset, bitmasklength, validwhen, lsb_order\n):\n    return\
    \ awkward_BitMaskedArray_to_IndexedOptionArray(\n        toindex, frombitmask,\
    \ bitmaskoffset, bitmasklength, validwhen, lsb_order\n    )\n"
- args:
  - toptr: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_count_64
  specification: "def awkward_reduce_count_64(toptr, parents, parentsoffset, lenparents,\
    \ outlength):\n    for i in range(int(outlength)):\n        toptr[i] = 0\n   \
    \ for i in range(int(lenparents)):\n        toptr[parents[parentsoffset + i]]\
    \ = toptr[parents[parentsoffset + i]] + 1\n"
- name: awkward_reduce_countnonzero
  specializations:
  - args:
    - toptr: int64_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_int8_64
  - args:
    - toptr: int64_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_int32_64
  - args:
    - toptr: int64_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_uint16_64
  - args:
    - toptr: int64_t
    - fromptr: bool
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_bool_64
  - args:
    - toptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_float32_64
  - args:
    - toptr: int64_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_uint8_64
  - args:
    - toptr: int64_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_uint32_64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_int64_64
  - args:
    - toptr: int64_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_int16_64
  - args:
    - toptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_float64_64
  - args:
    - toptr: int64_t
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_countnonzero_uint64_64
  specification: "def awkward_reduce_countnonzero(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = 0\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] += fromptr[fromptroffset + i] != 0\n"
- args:
  - toptr: int64_t
  - fromptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_bool_64
  specification: "def awkward_reduce_countnonzero_bool_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_countnonzero(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_int8_64
  specification: "def awkward_reduce_countnonzero_int8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_countnonzero(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_uint8_64
  specification: "def awkward_reduce_countnonzero_uint8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_countnonzero(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_int16_64
  specification: "def awkward_reduce_countnonzero_int16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_countnonzero(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_uint16_64
  specification: "def awkward_reduce_countnonzero_uint16_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_countnonzero(\n        toptr, fromptr, fromptroffset, parents,\
    \ parentsoffset, lenparents, outlength\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_int32_64
  specification: "def awkward_reduce_countnonzero_int32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_countnonzero(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_uint32_64
  specification: "def awkward_reduce_countnonzero_uint32_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_countnonzero(\n        toptr, fromptr, fromptroffset, parents,\
    \ parentsoffset, lenparents, outlength\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_int64_64
  specification: "def awkward_reduce_countnonzero_int64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_countnonzero(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_uint64_64
  specification: "def awkward_reduce_countnonzero_uint64_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_countnonzero(\n        toptr, fromptr, fromptroffset, parents,\
    \ parentsoffset, lenparents, outlength\n    )\n"
- args:
  - toptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_float32_64
  specification: "def awkward_reduce_countnonzero_float32_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_countnonzero(\n        toptr, fromptr, fromptroffset, parents,\
    \ parentsoffset, lenparents, outlength\n    )\n"
- args:
  - toptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_countnonzero_float64_64
  specification: "def awkward_reduce_countnonzero_float64_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_countnonzero(\n        toptr, fromptr, fromptroffset, parents,\
    \ parentsoffset, lenparents, outlength\n    )\n"
- name: awkward_reduce_sum
  specializations:
  - args:
    - toptr: uint32_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_uint32_uint16_64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_int64_int64_64
  - args:
    - toptr: uint32_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_uint32_uint32_64
  - args:
    - toptr: uint64_t
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_uint64_uint64_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_float64_float64_64
  - args:
    - toptr: int64_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_int64_int16_64
  - args:
    - toptr: uint64_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_uint64_uint32_64
  - args:
    - toptr: int32_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_int32_int16_64
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_int32_int32_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_float32_float32_64
  - args:
    - toptr: uint64_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_uint64_uint16_64
  - args:
    - toptr: uint64_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_uint64_uint8_64
  - args:
    - toptr: int64_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_int64_int8_64
  - args:
    - toptr: int32_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_int32_int8_64
  - args:
    - toptr: int64_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_int64_int32_64
  - args:
    - toptr: uint32_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_uint32_uint8_64
  specification: "def awkward_reduce_sum(\n    toptr, fromptr, fromptroffset, parents,\
    \ parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = float(0)\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] += float(fromptr[fromptroffset + i])\n"
- args:
  - toptr: int64_t
  - fromptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int64_bool_64
  specification: "def awkward_reduce_sum_int64_bool_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = 0\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] += fromptr[fromptroffset + i] != 0\n"
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int64_int8_64
  specification: "def awkward_reduce_sum_int64_int8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_uint64_uint8_64
  specification: "def awkward_reduce_sum_uint64_uint8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int64_int16_64
  specification: "def awkward_reduce_sum_int64_int16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_uint64_uint16_64
  specification: "def awkward_reduce_sum_uint64_uint16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int64_int32_64
  specification: "def awkward_reduce_sum_int64_int32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_uint64_uint32_64
  specification: "def awkward_reduce_sum_uint64_uint32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int64_int64_64
  specification: "def awkward_reduce_sum_int64_int64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_uint64_uint64_64
  specification: "def awkward_reduce_sum_uint64_uint64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_float32_float32_64
  specification: "def awkward_reduce_sum_float32_float32_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_sum(\n        toptr, fromptr, fromptroffset, parents, parentsoffset,\
    \ lenparents, outlength\n    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_float64_float64_64
  specification: "def awkward_reduce_sum_float64_float64_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_sum(\n        toptr, fromptr, fromptroffset, parents, parentsoffset,\
    \ lenparents, outlength\n    )\n"
- args:
  - toptr: int32_t
  - fromptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int32_bool_64
  specification: "def awkward_reduce_sum_int32_bool_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = 0\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] += fromptr[fromptroffset + i] != 0\n"
- args:
  - toptr: int32_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int32_int8_64
  specification: "def awkward_reduce_sum_int32_int8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_uint32_uint8_64
  specification: "def awkward_reduce_sum_uint32_uint8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int32_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int32_int16_64
  specification: "def awkward_reduce_sum_int32_int16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_uint32_uint16_64
  specification: "def awkward_reduce_sum_uint32_uint16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_int32_int32_64
  specification: "def awkward_reduce_sum_int32_int32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_uint32_uint32_64
  specification: "def awkward_reduce_sum_uint32_uint32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- name: awkward_reduce_sum_bool
  specializations:
  - args:
    - toptr: bool
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_int32_64
  - args:
    - toptr: bool
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_uint8_64
  - args:
    - toptr: bool
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_uint32_64
  - args:
    - toptr: bool
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_int8_64
  - args:
    - toptr: bool
    - fromptr: bool
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_bool_64
  - args:
    - toptr: bool
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_uint16_64
  - args:
    - toptr: bool
    - fromptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_int64_64
  - args:
    - toptr: bool
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_int16_64
  - args:
    - toptr: bool
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_float64_64
  - args:
    - toptr: bool
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_uint64_64
  - args:
    - toptr: bool
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_sum_bool_float32_64
  specification: "def awkward_reduce_sum_bool(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = int(0)\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] |= fromptr[fromptroffset + i] != 0\n"
- args:
  - toptr: bool
  - fromptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_bool_64
  specification: "def awkward_reduce_sum_bool_bool_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_int8_64
  specification: "def awkward_reduce_sum_bool_int8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_uint8_64
  specification: "def awkward_reduce_sum_bool_uint8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_int16_64
  specification: "def awkward_reduce_sum_bool_int16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_uint16_64
  specification: "def awkward_reduce_sum_bool_uint16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_int32_64
  specification: "def awkward_reduce_sum_bool_int32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_uint32_64
  specification: "def awkward_reduce_sum_bool_uint32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_int64_64
  specification: "def awkward_reduce_sum_bool_int64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_uint64_64
  specification: "def awkward_reduce_sum_bool_uint64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_float32_64
  specification: "def awkward_reduce_sum_bool_float32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_sum_bool_float64_64
  specification: "def awkward_reduce_sum_bool_float64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_sum_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- name: awkward_reduce_prod
  specializations:
  - args:
    - toptr: uint64_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_uint64_uint16_64
  - args:
    - toptr: int64_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_int64_int16_64
  - args:
    - toptr: uint64_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_uint64_uint32_64
  - args:
    - toptr: int64_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_int64_int8_64
  - args:
    - toptr: int32_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_int32_int8_64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_int64_int64_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_float32_float32_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_float64_float64_64
  - args:
    - toptr: int32_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_int32_int16_64
  - args:
    - toptr: uint32_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_uint32_uint8_64
  - args:
    - toptr: uint32_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_uint32_uint32_64
  - args:
    - toptr: int64_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_int64_int32_64
  - args:
    - toptr: uint64_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_uint64_uint8_64
  - args:
    - toptr: uint32_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_uint32_uint16_64
  - args:
    - toptr: uint64_t
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_uint64_uint64_64
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_int32_int32_64
  specification: "def awkward_reduce_prod(\n    toptr, fromptr, fromptroffset, parents,\
    \ parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = float(1)\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] *= float(fromptr[fromptroffset + i])\n"
- args:
  - toptr: int64_t
  - fromptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int64_bool_64
  specification: "def awkward_reduce_prod_int64_bool_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = 1\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] *= fromptr[fromptroffset + i] != 0\n"
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int64_int8_64
  specification: "def awkward_reduce_prod_int64_int8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_uint64_uint8_64
  specification: "def awkward_reduce_prod_uint64_uint8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int64_int16_64
  specification: "def awkward_reduce_prod_int64_int16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_uint64_uint16_64
  specification: "def awkward_reduce_prod_uint64_uint16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int64_int32_64
  specification: "def awkward_reduce_prod_int64_int32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_uint64_uint32_64
  specification: "def awkward_reduce_prod_uint64_uint32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int64_int64_64
  specification: "def awkward_reduce_prod_int64_int64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_uint64_uint64_64
  specification: "def awkward_reduce_prod_uint64_uint64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_float32_float32_64
  specification: "def awkward_reduce_prod_float32_float32_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_prod(\n        toptr, fromptr, fromptroffset, parents, parentsoffset,\
    \ lenparents, outlength\n    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_float64_float64_64
  specification: "def awkward_reduce_prod_float64_float64_64(\n    toptr, fromptr,\
    \ fromptroffset, parents, parentsoffset, lenparents, outlength\n):\n    return\
    \ awkward_reduce_prod(\n        toptr, fromptr, fromptroffset, parents, parentsoffset,\
    \ lenparents, outlength\n    )\n"
- args:
  - toptr: int32_t
  - fromptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int32_bool_64
  specification: "def awkward_reduce_prod_int32_bool_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = 1\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] *= fromptr[fromptroffset + i] != 0\n"
- args:
  - toptr: int32_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int32_int8_64
  specification: "def awkward_reduce_prod_int32_int8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_uint32_uint8_64
  specification: "def awkward_reduce_prod_uint32_uint8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int32_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int32_int16_64
  specification: "def awkward_reduce_prod_int32_int16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_uint32_uint16_64
  specification: "def awkward_reduce_prod_uint32_uint16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_int32_int32_64
  specification: "def awkward_reduce_prod_int32_int32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_uint32_uint32_64
  specification: "def awkward_reduce_prod_uint32_uint32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- name: awkward_reduce_prod_bool
  specializations:
  - args:
    - toptr: bool
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_uint16_64
  - args:
    - toptr: bool
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_int16_64
  - args:
    - toptr: bool
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_int8_64
  - args:
    - toptr: bool
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_uint32_64
  - args:
    - toptr: bool
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_uint8_64
  - args:
    - toptr: bool
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_float64_64
  - args:
    - toptr: bool
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_int32_64
  - args:
    - toptr: bool
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_float32_64
  - args:
    - toptr: bool
    - fromptr: bool
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_bool_64
  - args:
    - toptr: bool
    - fromptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_int64_64
  - args:
    - toptr: bool
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_prod_bool_uint64_64
  specification: "def awkward_reduce_prod_bool(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = int(1)\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] &= fromptr[fromptroffset + i] != 0\n"
- args:
  - toptr: bool
  - fromptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_bool_64
  specification: "def awkward_reduce_prod_bool_bool_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_int8_64
  specification: "def awkward_reduce_prod_bool_int8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_uint8_64
  specification: "def awkward_reduce_prod_bool_uint8_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_int16_64
  specification: "def awkward_reduce_prod_bool_int16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_uint16_64
  specification: "def awkward_reduce_prod_bool_uint16_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_int32_64
  specification: "def awkward_reduce_prod_bool_int32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_uint32_64
  specification: "def awkward_reduce_prod_bool_uint32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_int64_64
  specification: "def awkward_reduce_prod_bool_int64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_uint64_64
  specification: "def awkward_reduce_prod_bool_uint64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_float32_64
  specification: "def awkward_reduce_prod_bool_float32_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- args:
  - toptr: bool
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_prod_bool_float64_64
  specification: "def awkward_reduce_prod_bool_float64_64(\n    toptr, fromptr, fromptroffset,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    return awkward_reduce_prod_int(\n\
    \        toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength\n\
    \    )\n"
- name: awkward_reduce_min
  specializations:
  - args:
    - toptr: uint16_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint16_t
    name: awkward_reduce_min_uint16_uint16_64
  - args:
    - toptr: uint32_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint32_t
    name: awkward_reduce_min_uint32_uint32_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_min_float64_float64_64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int64_t
    name: awkward_reduce_min_int64_int64_64
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int32_t
    name: awkward_reduce_min_int32_int32_64
  - args:
    - toptr: uint64_t
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint64_t
    name: awkward_reduce_min_uint64_uint64_64
  - args:
    - toptr: int16_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int16_t
    name: awkward_reduce_min_int16_int16_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_min_float32_float32_64
  - args:
    - toptr: uint8_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint8_t
    name: awkward_reduce_min_uint8_uint8_64
  - args:
    - toptr: int8_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int8_t
    name: awkward_reduce_min_int8_int8_64
  specification: "def awkward_reduce_min(\n    toptr,\n    fromptr,\n    fromptroffset,\n\
    \    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n    identity,\n\
    ):\n    for i in range(int(outlength)):\n        toptr[i] = identity\n    for\
    \ i in range(int(lenparents)):\n        x = fromptr[fromptroffset + i]\n     \
    \   toptr[parents[parentsoffset + i]] = (\n            x\n            if x < toptr[parents[parentsoffset\
    \ + i]]\n            else toptr[parents[parentsoffset + i]]\n        )\n"
- args:
  - toptr: int8_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int8_t
  name: awkward_reduce_min_int8_int8_64
  specification: "def awkward_reduce_min_int8_int8_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint8_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint8_t
  name: awkward_reduce_min_uint8_uint8_64
  specification: "def awkward_reduce_min_uint8_uint8_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: int16_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int16_t
  name: awkward_reduce_min_int16_int16_64
  specification: "def awkward_reduce_min_int16_int16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint16_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint16_t
  name: awkward_reduce_min_uint16_uint16_64
  specification: "def awkward_reduce_min_uint16_uint16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int32_t
  name: awkward_reduce_min_int32_int32_64
  specification: "def awkward_reduce_min_int32_int32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint32_t
  name: awkward_reduce_min_uint32_uint32_64
  specification: "def awkward_reduce_min_uint32_uint32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int64_t
  name: awkward_reduce_min_int64_int64_64
  specification: "def awkward_reduce_min_int64_int64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint64_t
  name: awkward_reduce_min_uint64_uint64_64
  specification: "def awkward_reduce_min_uint64_uint64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_min_float32_float32_64
  specification: "def awkward_reduce_min_float32_float32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_min_float64_float64_64
  specification: "def awkward_reduce_min_float64_float64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_min(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- name: awkward_reduce_max
  specializations:
  - args:
    - toptr: uint16_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint16_t
    name: awkward_reduce_max_uint16_uint16_64
  - args:
    - toptr: uint64_t
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint64_t
    name: awkward_reduce_max_uint64_uint64_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_max_float64_float64_64
  - args:
    - toptr: uint32_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint32_t
    name: awkward_reduce_max_uint32_uint32_64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int64_t
    name: awkward_reduce_max_int64_int64_64
  - args:
    - toptr: int8_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int8_t
    name: awkward_reduce_max_int8_int8_64
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int32_t
    name: awkward_reduce_max_int32_int32_64
  - args:
    - toptr: int16_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: int16_t
    name: awkward_reduce_max_int16_int16_64
  - args:
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_max_float32_float32_64
  - args:
    - toptr: uint8_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    - identity: uint8_t
    name: awkward_reduce_max_uint8_uint8_64
  specification: "def awkward_reduce_max(\n    toptr,\n    fromptr,\n    fromptroffset,\n\
    \    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n    identity,\n\
    ):\n    for i in range(int(outlength)):\n        toptr[i] = identity\n    for\
    \ i in range(int(lenparents)):\n        x = fromptr[fromptroffset + i]\n     \
    \   toptr[parents[parentsoffset + i]] = (\n            x\n            if x > toptr[parents[parentsoffset\
    \ + i]]\n            else toptr[parents[parentsoffset + i]]\n        )\n"
- args:
  - toptr: int8_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int8_t
  name: awkward_reduce_max_int8_int8_64
  specification: "def awkward_reduce_max_int8_int8_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint8_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint8_t
  name: awkward_reduce_max_uint8_uint8_64
  specification: "def awkward_reduce_max_uint8_uint8_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: int16_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int16_t
  name: awkward_reduce_max_int16_int16_64
  specification: "def awkward_reduce_max_int16_int16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint16_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint16_t
  name: awkward_reduce_max_uint16_uint16_64
  specification: "def awkward_reduce_max_uint16_uint16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int32_t
  name: awkward_reduce_max_int32_int32_64
  specification: "def awkward_reduce_max_int32_int32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint32_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint32_t
  name: awkward_reduce_max_uint32_uint32_64
  specification: "def awkward_reduce_max_uint32_uint32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: int64_t
  name: awkward_reduce_max_int64_int64_64
  specification: "def awkward_reduce_max_int64_int64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - toptr: uint64_t
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  - identity: uint64_t
  name: awkward_reduce_max_uint64_uint64_64
  specification: "def awkward_reduce_max_uint64_uint64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_max_float32_float32_64
  specification: "def awkward_reduce_max_float32_float32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- args:
  - fromptroffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_max_float64_float64_64
  specification: "def awkward_reduce_max_float64_float64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    parents,\n    parentsoffset,\n    lenparents,\n    outlength,\n\
    \    identity,\n):\n    return awkward_reduce_max(\n        toptr,\n        fromptr,\n\
    \        fromptroffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n        identity,\n    )\n"
- name: awkward_reduce_argmin
  specializations:
  - args:
    - toptr: int64_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_uint32_64
  - args:
    - toptr: int64_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_uint8_64
  - args:
    - toptr: int64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_float64_64
  - args:
    - toptr: int64_t
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_uint64_64
  - args:
    - toptr: int64_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_uint16_64
  - args:
    - toptr: int64_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_int16_64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_int64_64
  - args:
    - toptr: int64_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_int32_64
  - args:
    - toptr: int64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_float32_64
  - args:
    - toptr: int64_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmin_int8_64
  specification: "def awkward_reduce_argmin(\n    toptr,\n    fromptr,\n    fromptroffset,\n\
    \    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n    lenparents,\n\
    \    outlength,\n):\n    for i in range(int(outlength)):\n        toptr[i] = -1\n\
    \    for i in range(int(lenparents)):\n        parent = parents[parentsoffset\
    \ + i]\n        start = starts[startsoffset + parent]\n        if (toptr[parent]\
    \ == -1) or (\n            fromptr[fromptroffset + i]\n            < fromptr[(fromptroffset\
    \ + toptr[parent]) + start]\n        ):\n            toptr[parent] = i - start\n"
- args:
  - toptr: int64_t
  - fromptr: bool
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_bool_64
  specification: "def awkward_reduce_argmin_bool_64(\n    toptr,\n    fromptr,\n \
    \   fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    for i in range(int(outlength)):\n  \
    \      toptr[i] = -1\n    for i in range(int(lenparents)):\n        parent = parents[parentsoffset\
    \ + i]\n        start = starts[startsoffset + parent]\n        if (toptr[parent]\
    \ == -1) or (\n            (fromptr[fromptroffset + i] != 0)\n            < (fromptr[(fromptroffset\
    \ + toptr[parent]) + start] != 0)\n        ):\n            toptr[parent] = i -\
    \ start\n"
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_int8_64
  specification: "def awkward_reduce_argmin_int8_64(\n    toptr,\n    fromptr,\n \
    \   fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_uint8_64
  specification: "def awkward_reduce_argmin_uint8_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_int16_64
  specification: "def awkward_reduce_argmin_int16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_uint16_64
  specification: "def awkward_reduce_argmin_uint16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_int32_64
  specification: "def awkward_reduce_argmin_int32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_uint32_64
  specification: "def awkward_reduce_argmin_uint32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_int64_64
  specification: "def awkward_reduce_argmin_int64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_uint64_64
  specification: "def awkward_reduce_argmin_uint64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_float32_64
  specification: "def awkward_reduce_argmin_float32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmin_float64_64
  specification: "def awkward_reduce_argmin_float64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmin(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- name: awkward_reduce_argmax
  specializations:
  - args:
    - toptr: int64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_float32_64
  - args:
    - toptr: int64_t
    - fromptr: uint8_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_uint8_64
  - args:
    - toptr: int64_t
    - fromptr: int16_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_int16_64
  - args:
    - toptr: int64_t
    - fromptr: uint16_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_uint16_64
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_int64_64
  - args:
    - toptr: int64_t
    - fromptr: uint64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_uint64_64
  - args:
    - toptr: int64_t
    - fromptr: int8_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_int8_64
  - args:
    - toptr: int64_t
    - fromptr: int32_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_int32_64
  - args:
    - toptr: int64_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_float64_64
  - args:
    - toptr: int64_t
    - fromptr: uint32_t
    - fromptroffset: int64_t
    - starts: int64_t
    - startsoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - lenparents: int64_t
    - outlength: int64_t
    name: awkward_reduce_argmax_uint32_64
  specification: "def awkward_reduce_argmax(\n    toptr,\n    fromptr,\n    fromptroffset,\n\
    \    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n    lenparents,\n\
    \    outlength,\n):\n    for i in range(int(outlength)):\n        toptr[i] = -1\n\
    \    for i in range(int(lenparents)):\n        parent = parents[parentsoffset\
    \ + i]\n        start = starts[startsoffset + parent]\n        if (toptr[parent]\
    \ == -1) or (\n            fromptr[fromptroffset + i]\n            > fromptr[(fromptroffset\
    \ + toptr[parent]) + start]\n        ):\n            toptr[parent] = i - start\n"
- args:
  - toptr: int64_t
  - fromptr: bool
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_bool_64
  specification: "def awkward_reduce_argmax_bool_64(\n    toptr,\n    fromptr,\n \
    \   fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    for i in range(int(outlength)):\n  \
    \      toptr[i] = -1\n    for i in range(int(lenparents)):\n        parent = parents[parentsoffset\
    \ + i]\n        start = starts[startsoffset + parent]\n        if (toptr[parent]\
    \ == -1) or (\n            (fromptr[fromptroffset + i] != 0)\n            > (fromptr[(fromptroffset\
    \ + toptr[parent]) + start] != 0)\n        ):\n            toptr[parent] = i -\
    \ start\n"
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_int8_64
  specification: "def awkward_reduce_argmax_int8_64(\n    toptr,\n    fromptr,\n \
    \   fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint8_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_uint8_64
  specification: "def awkward_reduce_argmax_uint8_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int16_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_int16_64
  specification: "def awkward_reduce_argmax_int16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint16_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_uint16_64
  specification: "def awkward_reduce_argmax_uint16_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_int32_64
  specification: "def awkward_reduce_argmax_int32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint32_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_uint32_64
  specification: "def awkward_reduce_argmax_uint32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_int64_64
  specification: "def awkward_reduce_argmax_int64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptr: uint64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_uint64_64
  specification: "def awkward_reduce_argmax_uint64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_float32_64
  specification: "def awkward_reduce_argmax_float32_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toptr: int64_t
  - fromptroffset: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_reduce_argmax_float64_64
  specification: "def awkward_reduce_argmax_float64_64(\n    toptr,\n    fromptr,\n\
    \    fromptroffset,\n    starts,\n    startsoffset,\n    parents,\n    parentsoffset,\n\
    \    lenparents,\n    outlength,\n):\n    return awkward_reduce_argmax(\n    \
    \    toptr,\n        fromptr,\n        fromptroffset,\n        starts,\n     \
    \   startsoffset,\n        parents,\n        parentsoffset,\n        lenparents,\n\
    \        outlength,\n    )\n"
- args:
  - toparents: int64_t
  - length: int64_t
  name: awkward_content_reduce_zeroparents_64
  specification: "def awkward_content_reduce_zeroparents_64(toparents, length):\n\
    \    for i in range(int(length)):\n        toparents[i] = 0\n"
- args:
  - globalstart: int64_t
  - globalstop: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListOffsetArray_reduce_global_startstop_64
  specification: "def awkward_ListOffsetArray_reduce_global_startstop_64(\n    globalstart,\
    \ globalstop, offsets, offsetsoffset, length\n):\n    globalstart[0] = offsets[offsetsoffset\
    \ + 0]\n    globalstop[0] = offsets[offsetsoffset + length]\n"
- args:
  - maxcount: int64_t
  - offsetscopy: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListOffsetArray_reduce_nonlocal_maxcount_offsetscopy_64
  specification: "def awkward_ListOffsetArray_reduce_nonlocal_maxcount_offsetscopy_64(\n\
    \    maxcount, offsetscopy, offsets, offsetsoffset, length\n):\n    maxcount[0]\
    \ = 0\n    offsetscopy[0] = offsets[offsetsoffset + 0]\n    for i in range(int(length)):\n\
    \        count = offsets[(offsetsoffset + i) + 1] - offsets[offsetsoffset + i]\n\
    \        if maxcount[0] < count:\n            maxcount[0] = count\n        offsetscopy[i\
    \ + 1] = offsets[(offsetsoffset + i) + 1]\n"
- args:
  - nextcarry: int64_t
  - nextparents: int64_t
  - nextlen: int64_t
  - maxnextparents: int64_t
  - distincts: int64_t
  - distinctslen: int64_t
  - offsetscopy: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - maxcount: int64_t
  name: awkward_ListOffsetArray_reduce_nonlocal_preparenext_64
  specification: "def awkward_ListOffsetArray_reduce_nonlocal_preparenext_64(\n  \
    \  nextcarry,\n    nextparents,\n    nextlen,\n    maxnextparents,\n    distincts,\n\
    \    distinctslen,\n    offsetscopy,\n    offsets,\n    offsetsoffset,\n    length,\n\
    \    parents,\n    parentsoffset,\n    maxcount,\n):\n    maxnextparents[0] =\
    \ 0\n    for i in range(int(distinctslen)):\n        distincts[i] = -1\n    k\
    \ = 0\n    while k < nextlen:\n        j = 0\n        for i in range(int(length)):\n\
    \            if offsetscopy[i] < offsets[(offsetsoffset + i) + 1]:\n         \
    \       diff = offsetscopy[i] - offsets[offsetsoffset + i]\n                parent\
    \ = parents[parentsoffset + i]\n                nextcarry[k] = offsetscopy[i]\n\
    \                nextparents[k] = (parent * maxcount) + diff\n               \
    \ if maxnextparents[0] < nextparents[k]:\n                    maxnextparents[0]\
    \ = nextparents[k]\n                if distincts[nextparents[k]] == -1:\n    \
    \                distincts[nextparents[k]] = j\n                    j = j + 1\n\
    \                k = k + 1\n                offsetscopy[i] = offsetscopy[i] +\
    \ 1\n"
- args:
  - nextstarts: int64_t
  - nextparents: int64_t
  - nextlen: int64_t
  name: awkward_ListOffsetArray_reduce_nonlocal_nextstarts_64
  specification: "def awkward_ListOffsetArray_reduce_nonlocal_nextstarts_64(\n   \
    \ nextstarts, nextparents, nextlen\n):\n    lastnextparent = -1\n    for k in\
    \ range(int(nextlen)):\n        if nextparents[k] != lastnextparent:\n       \
    \     nextstarts[nextparents[k]] = k\n        lastnextparent = nextparents[k]\n"
- args:
  - gaps: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  name: awkward_ListOffsetArray_reduce_nonlocal_findgaps_64
  specification: "def awkward_ListOffsetArray_reduce_nonlocal_findgaps_64(\n    gaps,\
    \ parents, parentsoffset, lenparents\n):\n    k = 0\n    last = -1\n    for i\
    \ in range(int(lenparents)):\n        parent = parents[parentsoffset + i]\n  \
    \      if last < parent:\n            gaps[k] = parent - last\n            k =\
    \ k + 1\n            last = parent\n"
- args:
  - outstarts: int64_t
  - outstops: int64_t
  - distincts: int64_t
  - lendistincts: int64_t
  - gaps: int64_t
  - outlength: int64_t
  name: awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64
  specification: "def awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64(\n\
    \    outstarts, outstops, distincts, lendistincts, gaps, outlength\n):\n    j\
    \ = 0\n    k = 0\n    maxdistinct = -1\n    for i in range(int(lendistincts)):\n\
    \        if maxdistinct < distincts[i]:\n            maxdistinct = distincts[i]\n\
    \            for gappy in range(int(gaps[j])):\n                outstarts[k] =\
    \ i\n                outstops[k] = i\n                k = k + 1\n            j\
    \ = j + 1\n        if distincts[i] != -1:\n            outstops[k - 1] = i + 1\n\
    \    while k < outlength:\n        outstarts[k] = lendistincts + 1\n        outstops[k]\
    \ = lendistincts + 1\n        k = k + 1\n"
- args:
  - nextparents: int64_t
  - offsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  name: awkward_ListOffsetArray_reduce_local_nextparents_64
  specification: "def awkward_ListOffsetArray_reduce_local_nextparents_64(\n    nextparents,\
    \ offsets, offsetsoffset, length\n):\n    initialoffset = offsets[offsetsoffset]\n\
    \    for i in range(int(length)):\n        j = offsets[offsetsoffset + i] - initialoffset\n\
    \        while j < (offsets[(offsetsoffset + i) + 1] - initialoffset):\n     \
    \       nextparents[j] = i\n            j = j + 1\n"
- args:
  - outoffsets: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_ListOffsetArray_reduce_local_outoffsets_64
  specification: "def awkward_ListOffsetArray_reduce_local_outoffsets_64(\n    outoffsets,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    k = 0\n    last = -1\n\
    \    for i in range(int(lenparents)):\n        while last < parents[parentsoffset\
    \ + i]:\n            outoffsets[k] = i\n            k = k + 1\n            last\
    \ = last + 1\n\n    while k <= outlength:\n        outoffsets[k] = lenparents\n\
    \        k = k + 1\n"
- name: awkward_IndexedArray_reduce_next_64
  specializations:
  - args:
    - nextcarry: int64_t
    - nextparents: int64_t
    - outindex: int64_t
    - index: uint32_t
    - indexoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArrayU32_reduce_next_64
  - args:
    - nextcarry: int64_t
    - nextparents: int64_t
    - outindex: int64_t
    - index: int32_t
    - indexoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArray32_reduce_next_64
  - args:
    - nextcarry: int64_t
    - nextparents: int64_t
    - outindex: int64_t
    - index: int64_t
    - indexoffset: int64_t
    - parents: int64_t
    - parentsoffset: int64_t
    - length: int64_t
    name: awkward_IndexedArray64_reduce_next_64
  specification: "def awkward_IndexedArray_reduce_next_64(\n    nextcarry, nextparents,\
    \ outindex, index, indexoffset, parents, parentsoffset, length\n):\n    k = 0\n\
    \    for i in range(int(length)):\n        if index[indexoffset + i] >= 0:\n \
    \           nextcarry[k] = index[indexoffset + i]\n            nextparents[k]\
    \ = parents[parentsoffset + i]\n            outindex[i] = k\n            k = k\
    \ + 1\n        else:\n            outindex[i] = -1\n"
- args:
  - nextcarry: int64_t
  - nextparents: int64_t
  - outindex: int64_t
  - index: int32_t
  - indexoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArray32_reduce_next_64
  specification: "def awkward_IndexedArray32_reduce_next_64(\n    nextcarry, nextparents,\
    \ outindex, index, indexoffset, parents, parentsoffset, length\n):\n    return\
    \ awkward_IndexedArray_reduce_next_64(\n        nextcarry,\n        nextparents,\n\
    \        outindex,\n        index,\n        indexoffset,\n        parents,\n \
    \       parentsoffset,\n        length,\n    )\n"
- args:
  - nextcarry: int64_t
  - nextparents: int64_t
  - outindex: int64_t
  - index: uint32_t
  - indexoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArrayU32_reduce_next_64
  specification: "def awkward_IndexedArrayU32_reduce_next_64(\n    nextcarry, nextparents,\
    \ outindex, index, indexoffset, parents, parentsoffset, length\n):\n    return\
    \ awkward_IndexedArray_reduce_next_64(\n        nextcarry,\n        nextparents,\n\
    \        outindex,\n        index,\n        indexoffset,\n        parents,\n \
    \       parentsoffset,\n        length,\n    )\n"
- args:
  - nextcarry: int64_t
  - nextparents: int64_t
  - outindex: int64_t
  - index: int64_t
  - indexoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - length: int64_t
  name: awkward_IndexedArray64_reduce_next_64
  specification: "def awkward_IndexedArray64_reduce_next_64(\n    nextcarry, nextparents,\
    \ outindex, index, indexoffset, parents, parentsoffset, length\n):\n    return\
    \ awkward_IndexedArray_reduce_next_64(\n        nextcarry,\n        nextparents,\n\
    \        outindex,\n        index,\n        indexoffset,\n        parents,\n \
    \       parentsoffset,\n        length,\n    )\n"
- args:
  - outoffsets: int64_t
  - starts: int64_t
  - startsoffset: int64_t
  - startslength: int64_t
  - outindexlength: int64_t
  name: awkward_IndexedArray_reduce_next_fix_offsets_64
  specification: "def awkward_IndexedArray_reduce_next_fix_offsets_64(\n    outoffsets,\
    \ starts, startsoffset, startslength, outindexlength\n):\n    for i in range(int(startslength)):\n\
    \        outoffsets[i] = starts[startsoffset + i]\n    outoffsets[startsoffset\
    \ + startslength] = outindexlength\n"
- args:
  - toptr: int8_t
  - parents: int64_t
  - parentsoffset: int64_t
  - lenparents: int64_t
  - outlength: int64_t
  name: awkward_NumpyArray_reduce_mask_ByteMaskedArray_64
  specification: "def awkward_NumpyArray_reduce_mask_ByteMaskedArray_64(\n    toptr,\
    \ parents, parentsoffset, lenparents, outlength\n):\n    for i in range(int(outlength)):\n\
    \        toptr[i] = 1\n    for i in range(int(lenparents)):\n        toptr[parents[parentsoffset\
    \ + i]] = 0\n"
- args:
  - nextcarry: int64_t
  - nextparents: int64_t
  - outindex: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - length: int64_t
  - validwhen: bool
  name: awkward_ByteMaskedArray_reduce_next_64
  specification: "def awkward_ByteMaskedArray_reduce_next_64(\n    nextcarry,\n  \
    \  nextparents,\n    outindex,\n    mask,\n    maskoffset,\n    parents,\n   \
    \ parentsoffset,\n    length,\n    validwhen,\n):\n    k = 0\n    for i in range(int(length)):\n\
    \        if (mask[maskoffset + i] != 0) == validwhen:\n            nextcarry[k]\
    \ = i\n            nextparents[k] = parents[parentsoffset + i]\n            outindex[i]\
    \ = k\n            k = k + 1\n        else:\n            outindex[i] = -1\n"
- args:
  - start: int64_t
  - stop: int64_t
  - posstep: bool
  - hasstart: bool
  - hasstop: bool
  - length: int64_t
  name: awkward_regularize_rangeslice
  specification: "def awkward_regularize_rangeslice(start, stop, posstep, hasstart,\
    \ hasstop, length):\n    if posstep:\n        if not (hasstart):\n           \
    \ start[0] = 0\n        else:\n            if start[0] < 0:\n                start[0]\
    \ += length\n        if start[0] < 0:\n            start[0] = 0\n        if start[0]\
    \ > length:\n            start[0] = length\n        if not (hasstop):\n      \
    \      stop[0] = length\n        else:\n            if stop[0] < 0:\n        \
    \        stop[0] += length\n        if stop[0] < 0:\n            stop[0] = 0\n\
    \        if stop[0] > length:\n            stop[0] = length\n        if stop[0]\
    \ < start[0]:\n            stop[0] = start[0]\n    else:\n        if not (hasstart):\n\
    \            start[0] = length - 1\n        else:\n            if start[0] < 0:\n\
    \                start[0] += length\n        if start[0] < -1:\n            start[0]\
    \ = -1\n        if start[0] > (length - 1):\n            start[0] = length - 1\n\
    \        if not (hasstop):\n            stop[0] = -1\n        else:\n        \
    \    if stop[0] < 0:\n                stop[0] += length\n        if stop[0] <\
    \ -1:\n            stop[0] = -1\n        if stop[0] > (length - 1):\n        \
    \    stop[0] = length - 1\n        if stop[0] > start[0]:\n            stop[0]\
    \ = start[0]\n"
- name: awkward_regularize_arrayslice
  specializations:
  - args:
    - flatheadptr: int64_t
    - lenflathead: int64_t
    - length: int64_t
    name: awkward_regularize_arrayslice_64
  specification: "def awkward_regularize_arrayslice(flatheadptr, lenflathead, length):\n\
    \    for i in range(int(lenflathead)):\n        original = flatheadptr[i]\n  \
    \      if flatheadptr[i] < 0:\n            flatheadptr[i] += length\n        if\
    \ (flatheadptr[i] < 0) or (flatheadptr[i] >= length):\n            raise ValueError(\"\
    index out of range\")\n"
- args:
  - flatheadptr: int64_t
  - lenflathead: int64_t
  - length: int64_t
  name: awkward_regularize_arrayslice_64
  specification: "def awkward_regularize_arrayslice_64(flatheadptr, lenflathead, length):\n\
    \    return awkward_regularize_arrayslice(flatheadptr, lenflathead, length)\n"
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - length: int64_t
  name: awkward_Index8_to_Index64
  specification: "def awkward_Index8_to_Index64(toptr, fromptr, length):\n    for\
    \ i in range(int(length)):\n        toptr[i] = int(fromptr[i])\n"
- args:
  - toptr: int64_t
  - fromptr: uint8_t
  - length: int64_t
  name: awkward_IndexU8_to_Index64
  specification: "def awkward_IndexU8_to_Index64(toptr, fromptr, length):\n    for\
    \ i in range(int(length)):\n        toptr[i] = int(fromptr[i])\n"
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - length: int64_t
  name: awkward_Index32_to_Index64
  specification: "def awkward_Index32_to_Index64(toptr, fromptr, length):\n    for\
    \ i in range(int(length)):\n        toptr[i] = int(fromptr[i])\n"
- args:
  - toptr: int64_t
  - fromptr: uint32_t
  - length: int64_t
  name: awkward_IndexU32_to_Index64
  specification: "def awkward_IndexU32_to_Index64(toptr, fromptr, length):\n    for\
    \ i in range(int(length)):\n        toptr[i] = int(fromptr[i])\n"
- name: awkward_index_carry
  specializations:
  - args:
    - toindex: int32_t
    - fromindex: int32_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - lenfromindex: int64_t
    - length: int64_t
    name: awkward_Index32_carry_64
  - args:
    - toindex: int8_t
    - fromindex: int8_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - lenfromindex: int64_t
    - length: int64_t
    name: awkward_Index8_carry_64
  - args:
    - toindex: int64_t
    - fromindex: int64_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - lenfromindex: int64_t
    - length: int64_t
    name: awkward_Index64_carry_64
  - args:
    - toindex: uint32_t
    - fromindex: uint32_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - lenfromindex: int64_t
    - length: int64_t
    name: awkward_IndexU32_carry_64
  - args:
    - toindex: uint8_t
    - fromindex: uint8_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - lenfromindex: int64_t
    - length: int64_t
    name: awkward_IndexU8_carry_64
  specification: "def awkward_index_carry(\n    toindex, fromindex, carry, fromindexoffset,\
    \ lenfromindex, length\n):\n    for i in range(int(length)):\n        j = carry[i]\n\
    \        if j > lenfromindex:\n            raise ValueError(\"index out of range\"\
    )\n        toindex[i] = fromindex[fromindexoffset + j]\n"
- args:
  - toindex: int8_t
  - fromindex: int8_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - lenfromindex: int64_t
  - length: int64_t
  name: awkward_Index8_carry_64
  specification: "def awkward_Index8_carry_64(\n    toindex, fromindex, carry, fromindexoffset,\
    \ lenfromindex, length\n):\n    return awkward_index_carry(\n        toindex,\
    \ fromindex, carry, fromindexoffset, lenfromindex, length\n    )\n"
- args:
  - toindex: uint8_t
  - fromindex: uint8_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - lenfromindex: int64_t
  - length: int64_t
  name: awkward_IndexU8_carry_64
  specification: "def awkward_IndexU8_carry_64(\n    toindex, fromindex, carry, fromindexoffset,\
    \ lenfromindex, length\n):\n    return awkward_index_carry(\n        toindex,\
    \ fromindex, carry, fromindexoffset, lenfromindex, length\n    )\n"
- args:
  - toindex: int32_t
  - fromindex: int32_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - lenfromindex: int64_t
  - length: int64_t
  name: awkward_Index32_carry_64
  specification: "def awkward_Index32_carry_64(\n    toindex, fromindex, carry, fromindexoffset,\
    \ lenfromindex, length\n):\n    return awkward_index_carry(\n        toindex,\
    \ fromindex, carry, fromindexoffset, lenfromindex, length\n    )\n"
- args:
  - toindex: uint32_t
  - fromindex: uint32_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - lenfromindex: int64_t
  - length: int64_t
  name: awkward_IndexU32_carry_64
  specification: "def awkward_IndexU32_carry_64(\n    toindex, fromindex, carry, fromindexoffset,\
    \ lenfromindex, length\n):\n    return awkward_index_carry(\n        toindex,\
    \ fromindex, carry, fromindexoffset, lenfromindex, length\n    )\n"
- args:
  - toindex: int64_t
  - fromindex: int64_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - lenfromindex: int64_t
  - length: int64_t
  name: awkward_Index64_carry_64
  specification: "def awkward_Index64_carry_64(\n    toindex, fromindex, carry, fromindexoffset,\
    \ lenfromindex, length\n):\n    return awkward_index_carry(\n        toindex,\
    \ fromindex, carry, fromindexoffset, lenfromindex, length\n    )\n"
- name: awkward_index_carry_nocheck
  specializations:
  - args:
    - toindex: uint32_t
    - fromindex: uint32_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_IndexU32_carry_nocheck_64
  - args:
    - toindex: int32_t
    - fromindex: int32_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_Index32_carry_nocheck_64
  - args:
    - toindex: int8_t
    - fromindex: int8_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_Index8_carry_nocheck_64
  - args:
    - toindex: int64_t
    - fromindex: int64_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_Index64_carry_nocheck_64
  - args:
    - toindex: uint8_t
    - fromindex: uint8_t
    - carry: int64_t
    - fromindexoffset: int64_t
    - length: int64_t
    name: awkward_IndexU8_carry_nocheck_64
  specification: "def awkward_index_carry_nocheck(toindex, fromindex, carry, fromindexoffset,\
    \ length):\n    for i in range(int(length)):\n        toindex[i] = fromindex[fromindexoffset\
    \ + carry[i]]\n"
- args:
  - toindex: int8_t
  - fromindex: int8_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_Index8_carry_nocheck_64
  specification: "def awkward_Index8_carry_nocheck_64(toindex, fromindex, carry, fromindexoffset,\
    \ length):\n    return awkward_index_carry_nocheck(\n        toindex, fromindex,\
    \ carry, fromindexoffset, length\n    )\n"
- args:
  - toindex: uint8_t
  - fromindex: uint8_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_IndexU8_carry_nocheck_64
  specification: "def awkward_IndexU8_carry_nocheck_64(\n    toindex, fromindex, carry,\
    \ fromindexoffset, length\n):\n    return awkward_index_carry_nocheck(\n     \
    \   toindex, fromindex, carry, fromindexoffset, length\n    )\n"
- args:
  - toindex: int32_t
  - fromindex: int32_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_Index32_carry_nocheck_64
  specification: "def awkward_Index32_carry_nocheck_64(\n    toindex, fromindex, carry,\
    \ fromindexoffset, length\n):\n    return awkward_index_carry_nocheck(\n     \
    \   toindex, fromindex, carry, fromindexoffset, length\n    )\n"
- args:
  - toindex: uint32_t
  - fromindex: uint32_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_IndexU32_carry_nocheck_64
  specification: "def awkward_IndexU32_carry_nocheck_64(\n    toindex, fromindex,\
    \ carry, fromindexoffset, length\n):\n    return awkward_index_carry_nocheck(\n\
    \        toindex, fromindex, carry, fromindexoffset, length\n    )\n"
- args:
  - toindex: int64_t
  - fromindex: int64_t
  - carry: int64_t
  - fromindexoffset: int64_t
  - length: int64_t
  name: awkward_Index64_carry_nocheck_64
  specification: "def awkward_Index64_carry_nocheck_64(\n    toindex, fromindex, carry,\
    \ fromindexoffset, length\n):\n    return awkward_index_carry_nocheck(\n     \
    \   toindex, fromindex, carry, fromindexoffset, length\n    )\n"
- name: awkward_slicearray_ravel
  specializations:
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - ndim: int64_t
    - shape: int64_t
    - strides: int64_t
    name: awkward_slicearray_ravel_64
  specification: "def awkward_slicearray_ravel(toptr, fromptr, ndim, shape, strides):\n\
    \    if ndim == 1:\n        for i in range(int(shape[0])):\n            toptr[i]\
    \ = fromptr[i * strides[0]]\n    else:\n        for i in range(int(shape[0])):\n\
    \            err = awkward_slicearray_ravel(\n                toptr[i * shape[1]],\n\
    \                fromptr[i * strides[0]],\n                ndim - 1,\n       \
    \         shape[1],\n                strides[1],\n            )\n            if\
    \ err.str != nullptr:\n                return err\n"
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - ndim: int64_t
  - shape: int64_t
  - strides: int64_t
  name: awkward_slicearray_ravel_64
  specification: "def awkward_slicearray_ravel_64(toptr, fromptr, ndim, shape, strides):\n\
    \    return awkward_slicearray_ravel(toptr, fromptr, ndim, shape, strides)\n"
- args:
  - same: bool
  - bytemask: int8_t
  - bytemaskoffset: int64_t
  - missingindex: int64_t
  - missingindexoffset: int64_t
  - length: int64_t
  name: awkward_slicemissing_check_same
  specification: "def awkward_slicemissing_check_same(\n    same, bytemask, bytemaskoffset,\
    \ missingindex, missingindexoffset, length\n):\n    same[0] = True\n    for i\
    \ in range(int(length)):\n        left = bytemask[bytemaskoffset + i] != 0\n \
    \       right = missingindex[missingindexoffset + i] < 0\n        if left != right:\n\
    \            same[0] = False\n            return\n"
- name: awkward_carry_arange
  specializations:
  - args:
    - toptr: uint32_t
    - length: int64_t
    name: awkward_carry_arangeU32
  - args:
    - toptr: int64_t
    - length: int64_t
    name: awkward_carry_arange64
  - args:
    - toptr: int32_t
    - length: int64_t
    name: awkward_carry_arange32
  specification: "def awkward_carry_arange(toptr, length):\n    for i in range(int(length)):\n\
    \        toptr[i] = i\n"
- args:
  - toptr: int32_t
  - length: int64_t
  name: awkward_carry_arange32
  specification: "def awkward_carry_arange32(toptr, length):\n    return awkward_carry_arange(toptr,\
    \ length)\n"
- args:
  - toptr: uint32_t
  - length: int64_t
  name: awkward_carry_arangeU32
  specification: "def awkward_carry_arangeU32(toptr, length):\n    return awkward_carry_arange(toptr,\
    \ length)\n"
- args:
  - toptr: int64_t
  - length: int64_t
  name: awkward_carry_arange64
  specification: "def awkward_carry_arange64(toptr, length):\n    return awkward_carry_arange(toptr,\
    \ length)\n"
- name: awkward_Identities_getitem_carry
  specializations:
  - args:
    - newidentitiesptr: int64_t
    - identitiesptr: int64_t
    - carryptr: int64_t
    - lencarry: int64_t
    - offset: int64_t
    - width: int64_t
    - length: int64_t
    name: awkward_Identities64_getitem_carry_64
  - args:
    - newidentitiesptr: int32_t
    - identitiesptr: int32_t
    - carryptr: int64_t
    - lencarry: int64_t
    - offset: int64_t
    - width: int64_t
    - length: int64_t
    name: awkward_Identities32_getitem_carry_64
  specification: "def awkward_Identities_getitem_carry(\n    newidentitiesptr, identitiesptr,\
    \ carryptr, lencarry, offset, width, length\n):\n    for i in range(int(lencarry)):\n\
    \        if carryptr[i] >= length:\n            raise ValueError(\"index out of\
    \ range\")\n        for j in range(int(width)):\n            newidentitiesptr[(width\
    \ * i) + j] = identitiesptr[\n                (offset + (width * carryptr[i]))\
    \ + j\n            ]\n"
- args:
  - newidentitiesptr: int32_t
  - identitiesptr: int32_t
  - carryptr: int64_t
  - lencarry: int64_t
  - offset: int64_t
  - width: int64_t
  - length: int64_t
  name: awkward_Identities32_getitem_carry_64
  specification: "def awkward_Identities32_getitem_carry_64(\n    newidentitiesptr,\
    \ identitiesptr, carryptr, lencarry, offset, width, length\n):\n    return awkward_Identities_getitem_carry(\n\
    \        newidentitiesptr, identitiesptr, carryptr, lencarry, offset, width, length\n\
    \    )\n"
- args:
  - newidentitiesptr: int64_t
  - identitiesptr: int64_t
  - carryptr: int64_t
  - lencarry: int64_t
  - offset: int64_t
  - width: int64_t
  - length: int64_t
  name: awkward_Identities64_getitem_carry_64
  specification: "def awkward_Identities64_getitem_carry_64(\n    newidentitiesptr,\
    \ identitiesptr, carryptr, lencarry, offset, width, length\n):\n    return awkward_Identities_getitem_carry(\n\
    \        newidentitiesptr, identitiesptr, carryptr, lencarry, offset, width, length\n\
    \    )\n"
- name: awkward_NumpyArray_contiguous_init
  specializations:
  - args:
    - toptr: int64_t
    - skip: int64_t
    - stride: int64_t
    name: awkward_NumpyArray_contiguous_init_64
  specification: "def awkward_NumpyArray_contiguous_init(toptr, skip, stride):\n \
    \   for i in range(int(skip)):\n        toptr[i] = i * stride\n"
- args:
  - toptr: int64_t
  - skip: int64_t
  - stride: int64_t
  name: awkward_NumpyArray_contiguous_init_64
  specification: "def awkward_NumpyArray_contiguous_init_64(toptr, skip, stride):\n\
    \    return awkward_NumpyArray_contiguous_init(toptr, skip, stride)\n"
- name: awkward_NumpyArray_contiguous_copy
  specializations:
  - args:
    - toptr: uint8_t
    - fromptr: uint8_t
    - len: int64_t
    - stride: int64_t
    - offset: int64_t
    - pos: int64_t
    name: awkward_NumpyArray_contiguous_copy_64
  specification: "def awkward_NumpyArray_contiguous_copy(toptr, fromptr, len, stride,\
    \ offset, pos):\n    for i in range(int(len)):\n        toptr[i * stride : i *\
    \ stride + stride] = fromptr[\n            offset + int(pos[i]) : offset + int(pos[i])\
    \ + stride\n        ]\n"
- args:
  - toptr: uint8_t
  - fromptr: uint8_t
  - len: int64_t
  - stride: int64_t
  - offset: int64_t
  - pos: int64_t
  name: awkward_NumpyArray_contiguous_copy_64
  specification: "def awkward_NumpyArray_contiguous_copy_64(toptr, fromptr, len, stride,\
    \ offset, pos):\n    return awkward_NumpyArray_contiguous_copy(toptr, fromptr,\
    \ len, stride, offset, pos)\n"
- name: awkward_NumpyArray_contiguous_next
  specializations:
  - args:
    - topos: int64_t
    - frompos: int64_t
    - len: int64_t
    - skip: int64_t
    - stride: int64_t
    name: awkward_NumpyArray_contiguous_next_64
  specification: "def awkward_NumpyArray_contiguous_next(topos, frompos, len, skip,\
    \ stride):\n    for i in range(int(len)):\n        for j in range(int(skip)):\n\
    \            topos[(i * skip) + j] = frompos[i] + (j * stride)\n"
- args:
  - topos: int64_t
  - frompos: int64_t
  - len: int64_t
  - skip: int64_t
  - stride: int64_t
  name: awkward_NumpyArray_contiguous_next_64
  specification: "def awkward_NumpyArray_contiguous_next_64(topos, frompos, len, skip,\
    \ stride):\n    return awkward_NumpyArray_contiguous_next(topos, frompos, len,\
    \ skip, stride)\n"
- name: awkward_NumpyArray_getitem_next_null
  specializations:
  - args:
    - toptr: uint8_t
    - fromptr: uint8_t
    - len: int64_t
    - stride: int64_t
    - offset: int64_t
    - pos: int64_t
    name: awkward_NumpyArray_getitem_next_null_64
  specification: "def awkward_NumpyArray_getitem_next_null(toptr, fromptr, len, stride,\
    \ offset, pos):\n    for i in range(int(len)):\n        toptr[i * stride : i *\
    \ stride + stride] = fromptr[\n            offset + (pos[i] * stride) : offset\
    \ + (pos[i] * stride) + stride\n        ]\n"
- args:
  - toptr: uint8_t
  - fromptr: uint8_t
  - len: int64_t
  - stride: int64_t
  - offset: int64_t
  - pos: int64_t
  name: awkward_NumpyArray_getitem_next_null_64
  specification: "def awkward_NumpyArray_getitem_next_null_64(toptr, fromptr, len,\
    \ stride, offset, pos):\n    return awkward_NumpyArray_getitem_next_null(\n  \
    \      toptr, fromptr, len, stride, offset, pos\n    )\n"
- name: awkward_NumpyArray_getitem_next_at
  specializations:
  - args:
    - nextcarryptr: int64_t
    - carryptr: int64_t
    - lencarry: int64_t
    - skip: int64_t
    - at: int64_t
    name: awkward_NumpyArray_getitem_next_at_64
  specification: "def awkward_NumpyArray_getitem_next_at(nextcarryptr, carryptr, lencarry,\
    \ skip, at):\n    for i in range(int(lencarry)):\n        nextcarryptr[i] = (skip\
    \ * carryptr[i]) + at\n"
- args:
  - nextcarryptr: int64_t
  - carryptr: int64_t
  - lencarry: int64_t
  - skip: int64_t
  - at: int64_t
  name: awkward_NumpyArray_getitem_next_at_64
  specification: "def awkward_NumpyArray_getitem_next_at_64(nextcarryptr, carryptr,\
    \ lencarry, skip, at):\n    return awkward_NumpyArray_getitem_next_at(\n     \
    \   nextcarryptr, carryptr, lencarry, skip, at\n    )\n"
- name: awkward_NumpyArray_getitem_next_range
  specializations:
  - args:
    - nextcarryptr: int64_t
    - carryptr: int64_t
    - lencarry: int64_t
    - lenhead: int64_t
    - skip: int64_t
    - start: int64_t
    - step: int64_t
    name: awkward_NumpyArray_getitem_next_range_64
  specification: "def awkward_NumpyArray_getitem_next_range(\n    nextcarryptr, carryptr,\
    \ lencarry, lenhead, skip, start, step\n):\n    for i in range(int(lencarry)):\n\
    \        for j in range(int(lenhead)):\n            nextcarryptr[(i * lenhead)\
    \ + j] = ((skip * carryptr[i]) + start) + (\n                j * step\n      \
    \      )\n"
- args:
  - nextcarryptr: int64_t
  - carryptr: int64_t
  - lencarry: int64_t
  - lenhead: int64_t
  - skip: int64_t
  - start: int64_t
  - step: int64_t
  name: awkward_NumpyArray_getitem_next_range_64
  specification: "def awkward_NumpyArray_getitem_next_range_64(\n    nextcarryptr,\
    \ carryptr, lencarry, lenhead, skip, start, step\n):\n    return awkward_NumpyArray_getitem_next_range(\n\
    \        nextcarryptr, carryptr, lencarry, lenhead, skip, start, step\n    )\n"
- name: awkward_NumpyArray_getitem_next_range_advanced
  specializations:
  - args:
    - nextcarryptr: int64_t
    - nextadvancedptr: int64_t
    - carryptr: int64_t
    - advancedptr: int64_t
    - lencarry: int64_t
    - lenhead: int64_t
    - skip: int64_t
    - start: int64_t
    - step: int64_t
    name: awkward_NumpyArray_getitem_next_range_advanced_64
  specification: "def awkward_NumpyArray_getitem_next_range_advanced(\n    nextcarryptr,\n\
    \    nextadvancedptr,\n    carryptr,\n    advancedptr,\n    lencarry,\n    lenhead,\n\
    \    skip,\n    start,\n    step,\n):\n    for i in range(int(lencarry)):\n  \
    \      for j in range(int(lenhead)):\n            nextcarryptr[(i * lenhead) +\
    \ j] = ((skip * carryptr[i]) + start) + (\n                j * step\n        \
    \    )\n            nextadvancedptr[(i * lenhead) + j] = advancedptr[i]\n"
- args:
  - nextcarryptr: int64_t
  - nextadvancedptr: int64_t
  - carryptr: int64_t
  - advancedptr: int64_t
  - lencarry: int64_t
  - lenhead: int64_t
  - skip: int64_t
  - start: int64_t
  - step: int64_t
  name: awkward_NumpyArray_getitem_next_range_advanced_64
  specification: "def awkward_NumpyArray_getitem_next_range_advanced_64(\n    nextcarryptr,\n\
    \    nextadvancedptr,\n    carryptr,\n    advancedptr,\n    lencarry,\n    lenhead,\n\
    \    skip,\n    start,\n    step,\n):\n    return awkward_NumpyArray_getitem_next_range_advanced(\n\
    \        nextcarryptr,\n        nextadvancedptr,\n        carryptr,\n        advancedptr,\n\
    \        lencarry,\n        lenhead,\n        skip,\n        start,\n        step,\n\
    \    )\n"
- name: awkward_NumpyArray_getitem_next_array
  specializations:
  - args:
    - nextcarryptr: int64_t
    - nextadvancedptr: int64_t
    - carryptr: int64_t
    - flatheadptr: int64_t
    - lencarry: int64_t
    - lenflathead: int64_t
    - skip: int64_t
    name: awkward_NumpyArray_getitem_next_array_64
  specification: "def awkward_NumpyArray_getitem_next_array(\n    nextcarryptr, nextadvancedptr,\
    \ carryptr, flatheadptr, lencarry, lenflathead, skip\n):\n    for i in range(int(lencarry)):\n\
    \        for j in range(int(lenflathead)):\n            nextcarryptr[(i * lenflathead)\
    \ + j] = (skip * carryptr[i]) + flatheadptr[j]\n            nextadvancedptr[(i\
    \ * lenflathead) + j] = j\n"
- args:
  - nextcarryptr: int64_t
  - nextadvancedptr: int64_t
  - carryptr: int64_t
  - flatheadptr: int64_t
  - lencarry: int64_t
  - lenflathead: int64_t
  - skip: int64_t
  name: awkward_NumpyArray_getitem_next_array_64
  specification: "def awkward_NumpyArray_getitem_next_array_64(\n    nextcarryptr,\
    \ nextadvancedptr, carryptr, flatheadptr, lencarry, lenflathead, skip\n):\n  \
    \  return awkward_NumpyArray_getitem_next_array(\n        nextcarryptr,\n    \
    \    nextadvancedptr,\n        carryptr,\n        flatheadptr,\n        lencarry,\n\
    \        lenflathead,\n        skip,\n    )\n"
- name: awkward_NumpyArray_getitem_next_array_advanced
  specializations:
  - args:
    - nextcarryptr: int64_t
    - carryptr: int64_t
    - advancedptr: int64_t
    - flatheadptr: int64_t
    - lencarry: int64_t
    - skip: int64_t
    name: awkward_NumpyArray_getitem_next_array_advanced_64
  specification: "def awkward_NumpyArray_getitem_next_array_advanced(\n    nextcarryptr,\
    \ carryptr, advancedptr, flatheadptr, lencarry, skip\n):\n    for i in range(int(lencarry)):\n\
    \        nextcarryptr[i] = (skip * carryptr[i]) + flatheadptr[advancedptr[i]]\n"
- args:
  - nextcarryptr: int64_t
  - carryptr: int64_t
  - advancedptr: int64_t
  - flatheadptr: int64_t
  - lencarry: int64_t
  - skip: int64_t
  name: awkward_NumpyArray_getitem_next_array_advanced_64
  specification: "def awkward_NumpyArray_getitem_next_array_advanced_64(\n    nextcarryptr,\
    \ carryptr, advancedptr, flatheadptr, lencarry, skip\n):\n    return awkward_NumpyArray_getitem_next_array_advanced(\n\
    \        nextcarryptr, carryptr, advancedptr, flatheadptr, lencarry, skip\n  \
    \  )\n"
- args:
  - numtrue: int64_t
  - fromptr: int8_t
  - byteoffset: int64_t
  - length: int64_t
  - stride: int64_t
  name: awkward_NumpyArray_getitem_boolean_numtrue
  specification: "def awkward_NumpyArray_getitem_boolean_numtrue(\n    numtrue, fromptr,\
    \ byteoffset, length, stride\n):\n    numtrue[0] = 0\n    i = 0\n    while i <\
    \ length:\n        numtrue[0] = numtrue[0] + (fromptr[byteoffset + i] != 0)\n\
    \        i += stride\n"
- name: awkward_NumpyArray_getitem_boolean_nonzero
  specializations:
  - args:
    - toptr: int64_t
    - fromptr: int8_t
    - byteoffset: int64_t
    - length: int64_t
    - stride: int64_t
    name: awkward_NumpyArray_getitem_boolean_nonzero_64
  specification: "def awkward_NumpyArray_getitem_boolean_nonzero(\n    toptr, fromptr,\
    \ byteoffset, length, stride\n):\n    k = 0\n    i = 0\n    while i < length:\n\
    \        if fromptr[byteoffset + i] != 0:\n            toptr[k] = i\n        \
    \    k = k + 1\n        i += stride\n"
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - byteoffset: int64_t
  - length: int64_t
  - stride: int64_t
  name: awkward_NumpyArray_getitem_boolean_nonzero_64
  specification: "def awkward_NumpyArray_getitem_boolean_nonzero_64(\n    toptr, fromptr,\
    \ byteoffset, length, stride\n):\n    return awkward_NumpyArray_getitem_intean_nonzero(\n\
    \        toptr, fromptr, byteoffset, length, stride\n    )\n"
- name: awkward_ListArray_getitem_next_at
  specializations:
  - args:
    - tocarry: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - at: int64_t
    name: awkward_ListArrayU32_getitem_next_at_64
  - args:
    - tocarry: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - at: int64_t
    name: awkward_ListArray64_getitem_next_at_64
  - args:
    - tocarry: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - at: int64_t
    name: awkward_ListArray32_getitem_next_at_64
  specification: "def awkward_ListArray_getitem_next_at(\n    tocarry, fromstarts,\
    \ fromstops, lenstarts, startsoffset, stopsoffset, at\n):\n    for i in range(int(lenstarts)):\n\
    \        length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]\n\
    \        regular_at = at\n        if regular_at < 0:\n            regular_at +=\
    \ length\n        if not ((0 <= regular_at) and (regular_at < length)):\n    \
    \        raise ValueError(\"index out of range\")\n        tocarry[i] = fromstarts[startsoffset\
    \ + i] + regular_at\n"
- args:
  - tocarry: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - at: int64_t
  name: awkward_ListArray32_getitem_next_at_64
  specification: "def awkward_ListArray32_getitem_next_at_64(\n    tocarry, fromstarts,\
    \ fromstops, lenstarts, startsoffset, stopsoffset, at\n):\n    return awkward_ListArray_getitem_next_at(\n\
    \        tocarry, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset,\
    \ at\n    )\n"
- args:
  - tocarry: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - at: int64_t
  name: awkward_ListArrayU32_getitem_next_at_64
  specification: "def awkward_ListArrayU32_getitem_next_at_64(\n    tocarry, fromstarts,\
    \ fromstops, lenstarts, startsoffset, stopsoffset, at\n):\n    return awkward_ListArray_getitem_next_at(\n\
    \        tocarry, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset,\
    \ at\n    )\n"
- args:
  - tocarry: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - at: int64_t
  name: awkward_ListArray64_getitem_next_at_64
  specification: "def awkward_ListArray64_getitem_next_at_64(\n    tocarry, fromstarts,\
    \ fromstops, lenstarts, startsoffset, stopsoffset, at\n):\n    return awkward_ListArray_getitem_next_at(\n\
    \        tocarry, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset,\
    \ at\n    )\n"
- name: awkward_ListArray_getitem_next_range_carrylength
  specializations:
  - args:
    - carrylength: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - start: int64_t
    - stop: int64_t
    - step: int64_t
    name: awkward_ListArray32_getitem_next_range_carrylength
  - args:
    - carrylength: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - start: int64_t
    - stop: int64_t
    - step: int64_t
    name: awkward_ListArrayU32_getitem_next_range_carrylength
  - args:
    - carrylength: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - start: int64_t
    - stop: int64_t
    - step: int64_t
    name: awkward_ListArray64_getitem_next_range_carrylength
  specification: "def awkward_ListArray_getitem_next_range_carrylength(\n    carrylength,\n\
    \    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n    stopsoffset,\n\
    \    start,\n    stop,\n    step,\n):\n    carrylength[0] = 0\n    for i in range(int(lenstarts)):\n\
    \        length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]\n\
    \        regular_start = start\n        regular_stop = stop\n        awkward_regularize_rangeslice(\n\
    \            regular_start,\n            regular_stop,\n            step > 0,\n\
    \            start != kSliceNone,\n            stop != kSliceNone,\n         \
    \   length,\n        )\n        if step > 0:\n            j = regular_start\n\
    \            while j < regular_stop:\n                carrylength[0] = carrylength[0]\
    \ + 1\n                j += step\n        else:\n            j = regular_start\n\
    \            while j > regular_stop:\n                carrylength[0] = carrylength[0]\
    \ + 1\n                j += step\n"
- args:
  - carrylength: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - start: int64_t
  - stop: int64_t
  - step: int64_t
  name: awkward_ListArray32_getitem_next_range_carrylength
  specification: "def awkward_ListArray32_getitem_next_range_carrylength(\n    carrylength,\n\
    \    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n    stopsoffset,\n\
    \    start,\n    stop,\n    step,\n):\n    return awkward_ListArray_getitem_next_range_carrylength(\n\
    \        carrylength,\n        fromstarts,\n        fromstops,\n        lenstarts,\n\
    \        startsoffset,\n        stopsoffset,\n        start,\n        stop,\n\
    \        step,\n    )\n"
- args:
  - carrylength: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - start: int64_t
  - stop: int64_t
  - step: int64_t
  name: awkward_ListArrayU32_getitem_next_range_carrylength
  specification: "def awkward_ListArrayU32_getitem_next_range_carrylength(\n    carrylength,\n\
    \    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n    stopsoffset,\n\
    \    start,\n    stop,\n    step,\n):\n    return awkward_ListArray_getitem_next_range_carrylength(\n\
    \        carrylength,\n        fromstarts,\n        fromstops,\n        lenstarts,\n\
    \        startsoffset,\n        stopsoffset,\n        start,\n        stop,\n\
    \        step,\n    )\n"
- args:
  - carrylength: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - start: int64_t
  - stop: int64_t
  - step: int64_t
  name: awkward_ListArray64_getitem_next_range_carrylength
  specification: "def awkward_ListArray64_getitem_next_range_carrylength(\n    carrylength,\n\
    \    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n    stopsoffset,\n\
    \    start,\n    stop,\n    step,\n):\n    return awkward_ListArray_getitem_next_range_carrylength(\n\
    \        carrylength,\n        fromstarts,\n        fromstops,\n        lenstarts,\n\
    \        startsoffset,\n        stopsoffset,\n        start,\n        stop,\n\
    \        step,\n    )\n"
- name: awkward_ListArray_getitem_next_range
  specializations:
  - args:
    - tooffsets: uint32_t
    - tocarry: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - start: int64_t
    - stop: int64_t
    - step: int64_t
    name: awkward_ListArrayU32_getitem_next_range_64
  - args:
    - tooffsets: int32_t
    - tocarry: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - start: int64_t
    - stop: int64_t
    - step: int64_t
    name: awkward_ListArray32_getitem_next_range_64
  - args:
    - tooffsets: int64_t
    - tocarry: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - lenstarts: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - start: int64_t
    - stop: int64_t
    - step: int64_t
    name: awkward_ListArray64_getitem_next_range_64
  specification: "def awkward_ListArray_getitem_next_range(\n    tooffsets,\n    tocarry,\n\
    \    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n    stopsoffset,\n\
    \    start,\n    stop,\n    step,\n):\n    k = 0\n    tooffsets[0] = 0\n    if\
    \ step > 0:\n        for i in range(int(lenstarts)):\n            length = fromstops[stopsoffset\
    \ + i] - fromstarts[startsoffset + i]\n            regular_start = start\n   \
    \         regular_stop = stop\n            awkward_regularize_rangeslice(\n  \
    \              regular_start,\n                regular_stop,\n               \
    \ step > 0,\n                start != kSliceNone,\n                stop != kSliceNone,\n\
    \                length,\n            )\n            j = regular_start\n     \
    \       while j < regular_stop:\n                tocarry[k] = fromstarts[startsoffset\
    \ + i] + j\n                k = k + 1\n                j += step\n           \
    \ tooffsets[i + 1] = float(k)\n    else:\n        for i in range(int(lenstarts)):\n\
    \            length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]\n\
    \            regular_start = start\n            regular_stop = stop\n        \
    \    awkward_regularize_rangeslice(\n                regular_start,\n        \
    \        regular_stop,\n                step > 0,\n                start != kSliceNone,\n\
    \                stop != kSliceNone,\n                length,\n            )\n\
    \            j = regular_start\n            while j > regular_stop:\n        \
    \        tocarry[k] = fromstarts[startsoffset + i] + j\n                k = k\
    \ + 1\n                j += step\n            tooffsets[i + 1] = float(k)\n"
- args:
  - tooffsets: int32_t
  - tocarry: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - start: int64_t
  - stop: int64_t
  - step: int64_t
  name: awkward_ListArray32_getitem_next_range_64
  specification: "def awkward_ListArray32_getitem_next_range_64(\n    tooffsets,\n\
    \    tocarry,\n    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n\
    \    stopsoffset,\n    start,\n    stop,\n    step,\n):\n    return awkward_ListArray_getitem_next_range(\n\
    \        tooffsets,\n        tocarry,\n        fromstarts,\n        fromstops,\n\
    \        lenstarts,\n        startsoffset,\n        stopsoffset,\n        start,\n\
    \        stop,\n        step,\n    )\n"
- args:
  - tooffsets: uint32_t
  - tocarry: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - start: int64_t
  - stop: int64_t
  - step: int64_t
  name: awkward_ListArrayU32_getitem_next_range_64
  specification: "def awkward_ListArrayU32_getitem_next_range_64(\n    tooffsets,\n\
    \    tocarry,\n    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n\
    \    stopsoffset,\n    start,\n    stop,\n    step,\n):\n    return awkward_ListArray_getitem_next_range(\n\
    \        tooffsets,\n        tocarry,\n        fromstarts,\n        fromstops,\n\
    \        lenstarts,\n        startsoffset,\n        stopsoffset,\n        start,\n\
    \        stop,\n        step,\n    )\n"
- args:
  - tooffsets: int64_t
  - tocarry: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - lenstarts: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - start: int64_t
  - stop: int64_t
  - step: int64_t
  name: awkward_ListArray64_getitem_next_range_64
  specification: "def awkward_ListArray64_getitem_next_range_64(\n    tooffsets,\n\
    \    tocarry,\n    fromstarts,\n    fromstops,\n    lenstarts,\n    startsoffset,\n\
    \    stopsoffset,\n    start,\n    stop,\n    step,\n):\n    return awkward_ListArray_getitem_next_range(\n\
    \        tooffsets,\n        tocarry,\n        fromstarts,\n        fromstops,\n\
    \        lenstarts,\n        startsoffset,\n        stopsoffset,\n        start,\n\
    \        stop,\n        step,\n    )\n"
- name: awkward_ListArray_getitem_next_range_counts
  specializations:
  - args:
    - total: int64_t
    - fromoffsets: int64_t
    - lenstarts: int64_t
    name: awkward_ListArray64_getitem_next_range_counts_64
  - args:
    - total: int64_t
    - fromoffsets: uint32_t
    - lenstarts: int64_t
    name: awkward_ListArrayU32_getitem_next_range_counts_64
  - args:
    - total: int64_t
    - fromoffsets: int32_t
    - lenstarts: int64_t
    name: awkward_ListArray32_getitem_next_range_counts_64
  specification: "def awkward_ListArray_getitem_next_range_counts(total, fromoffsets,\
    \ lenstarts):\n    total[0] = 0\n    for i in range(int(lenstarts)):\n       \
    \ total[0] = (total[0] + fromoffsets[i + 1]) - fromoffsets[i]\n"
- args:
  - total: int64_t
  - fromoffsets: int32_t
  - lenstarts: int64_t
  name: awkward_ListArray32_getitem_next_range_counts_64
  specification: "def awkward_ListArray32_getitem_next_range_counts_64(total, fromoffsets,\
    \ lenstarts):\n    return awkward_ListArray_getitem_next_range_counts(total, fromoffsets,\
    \ lenstarts)\n"
- args:
  - total: int64_t
  - fromoffsets: uint32_t
  - lenstarts: int64_t
  name: awkward_ListArrayU32_getitem_next_range_counts_64
  specification: "def awkward_ListArrayU32_getitem_next_range_counts_64(total, fromoffsets,\
    \ lenstarts):\n    return awkward_ListArray_getitem_next_range_counts(total, fromoffsets,\
    \ lenstarts)\n"
- args:
  - total: int64_t
  - fromoffsets: int64_t
  - lenstarts: int64_t
  name: awkward_ListArray64_getitem_next_range_counts_64
  specification: "def awkward_ListArray64_getitem_next_range_counts_64(total, fromoffsets,\
    \ lenstarts):\n    return awkward_ListArray_getitem_next_range_counts(total, fromoffsets,\
    \ lenstarts)\n"
- name: awkward_ListArray_getitem_next_range_spreadadvanced
  specializations:
  - args:
    - toadvanced: int64_t
    - fromadvanced: int64_t
    - fromoffsets: int32_t
    - lenstarts: int64_t
    name: awkward_ListArray32_getitem_next_range_spreadadvanced_64
  - args:
    - toadvanced: int64_t
    - fromadvanced: int64_t
    - fromoffsets: uint32_t
    - lenstarts: int64_t
    name: awkward_ListArrayU32_getitem_next_range_spreadadvanced_64
  - args:
    - toadvanced: int64_t
    - fromadvanced: int64_t
    - fromoffsets: int64_t
    - lenstarts: int64_t
    name: awkward_ListArray64_getitem_next_range_spreadadvanced_64
  specification: "def awkward_ListArray_getitem_next_range_spreadadvanced(\n    toadvanced,\
    \ fromadvanced, fromoffsets, lenstarts\n):\n    for i in range(int(lenstarts)):\n\
    \        count = fromoffsets[i + 1] - fromoffsets[i]\n        for j in range(int(count)):\n\
    \            toadvanced[fromoffsets[i] + j] = fromadvanced[i]\n"
- args:
  - toadvanced: int64_t
  - fromadvanced: int64_t
  - fromoffsets: int32_t
  - lenstarts: int64_t
  name: awkward_ListArray32_getitem_next_range_spreadadvanced_64
  specification: "def awkward_ListArray32_getitem_next_range_spreadadvanced_64(\n\
    \    toadvanced, fromadvanced, fromoffsets, lenstarts\n):\n    return awkward_ListArray_getitem_next_range_spreadadvanced(\n\
    \        toadvanced, fromadvanced, fromoffsets, lenstarts\n    )\n"
- args:
  - toadvanced: int64_t
  - fromadvanced: int64_t
  - fromoffsets: uint32_t
  - lenstarts: int64_t
  name: awkward_ListArrayU32_getitem_next_range_spreadadvanced_64
  specification: "def awkward_ListArrayU32_getitem_next_range_spreadadvanced_64(\n\
    \    toadvanced, fromadvanced, fromoffsets, lenstarts\n):\n    return awkward_ListArray_getitem_next_range_spreadadvanced(\n\
    \        toadvanced, fromadvanced, fromoffsets, lenstarts\n    )\n"
- args:
  - toadvanced: int64_t
  - fromadvanced: int64_t
  - fromoffsets: int64_t
  - lenstarts: int64_t
  name: awkward_ListArray64_getitem_next_range_spreadadvanced_64
  specification: "def awkward_ListArray64_getitem_next_range_spreadadvanced_64(\n\
    \    toadvanced, fromadvanced, fromoffsets, lenstarts\n):\n    return awkward_ListArray_getitem_next_range_spreadadvanced(\n\
    \        toadvanced, fromadvanced, fromoffsets, lenstarts\n    )\n"
- name: awkward_ListArray_getitem_next_array
  specializations:
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - fromarray: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lenarray: int64_t
    - lencontent: int64_t
    name: awkward_ListArrayU32_getitem_next_array_64
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - fromarray: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lenarray: int64_t
    - lencontent: int64_t
    name: awkward_ListArray64_getitem_next_array_64
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - fromarray: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lenarray: int64_t
    - lencontent: int64_t
    name: awkward_ListArray32_getitem_next_array_64
  specification: "def awkward_ListArray_getitem_next_array(\n    tocarry,\n    toadvanced,\n\
    \    fromstarts,\n    fromstops,\n    fromarray,\n    startsoffset,\n    stopsoffset,\n\
    \    lenstarts,\n    lenarray,\n    lencontent,\n):\n    for i in range(int(lenstarts)):\n\
    \        if fromstops[stopsoffset + i] < fromstarts[startsoffset + i]:\n     \
    \       raise ValueError(\"stops[i] < starts[i]\")\n        if (fromstarts[startsoffset\
    \ + i] != fromstops[stopsoffset + i]) and (\n            fromstops[stopsoffset\
    \ + i] > lencontent\n        ):\n            raise ValueError(\"stops[i] > len(content)\"\
    )\n        length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]\n\
    \        for j in range(int(lenarray)):\n            regular_at = fromarray[j]\n\
    \            if regular_at < 0:\n                regular_at += length\n      \
    \      if not ((0 <= regular_at) and (regular_at < length)):\n               \
    \ raise ValueError(\"index out of range\")\n            tocarry[(i * lenarray)\
    \ + j] = fromstarts[startsoffset + i] + regular_at\n            toadvanced[(i\
    \ * lenarray) + j] = j\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - fromarray: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lenarray: int64_t
  - lencontent: int64_t
  name: awkward_ListArray32_getitem_next_array_64
  specification: "def awkward_ListArray32_getitem_next_array_64(\n    tocarry,\n \
    \   toadvanced,\n    fromstarts,\n    fromstops,\n    fromarray,\n    startsoffset,\n\
    \    stopsoffset,\n    lenstarts,\n    lenarray,\n    lencontent,\n):\n    return\
    \ awkward_ListArray_getitem_next_array(\n        tocarry,\n        toadvanced,\n\
    \        fromstarts,\n        fromstops,\n        fromarray,\n        startsoffset,\n\
    \        stopsoffset,\n        lenstarts,\n        lenarray,\n        lencontent,\n\
    \    )\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - fromarray: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lenarray: int64_t
  - lencontent: int64_t
  name: awkward_ListArrayU32_getitem_next_array_64
  specification: "def awkward_ListArrayU32_getitem_next_array_64(\n    tocarry,\n\
    \    toadvanced,\n    fromstarts,\n    fromstops,\n    fromarray,\n    startsoffset,\n\
    \    stopsoffset,\n    lenstarts,\n    lenarray,\n    lencontent,\n):\n    return\
    \ awkward_ListArray_getitem_next_array(\n        tocarry,\n        toadvanced,\n\
    \        fromstarts,\n        fromstops,\n        fromarray,\n        startsoffset,\n\
    \        stopsoffset,\n        lenstarts,\n        lenarray,\n        lencontent,\n\
    \    )\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - fromarray: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lenarray: int64_t
  - lencontent: int64_t
  name: awkward_ListArray64_getitem_next_array_64
  specification: "def awkward_ListArray64_getitem_next_array_64(\n    tocarry,\n \
    \   toadvanced,\n    fromstarts,\n    fromstops,\n    fromarray,\n    startsoffset,\n\
    \    stopsoffset,\n    lenstarts,\n    lenarray,\n    lencontent,\n):\n    return\
    \ awkward_ListArray_getitem_next_array(\n        tocarry,\n        toadvanced,\n\
    \        fromstarts,\n        fromstops,\n        fromarray,\n        startsoffset,\n\
    \        stopsoffset,\n        lenstarts,\n        lenarray,\n        lencontent,\n\
    \    )\n"
- name: awkward_ListArray_getitem_next_array_advanced
  specializations:
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - fromarray: int64_t
    - fromadvanced: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lenarray: int64_t
    - lencontent: int64_t
    name: awkward_ListArray32_getitem_next_array_advanced_64
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - fromarray: int64_t
    - fromadvanced: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lenarray: int64_t
    - lencontent: int64_t
    name: awkward_ListArrayU32_getitem_next_array_advanced_64
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - fromarray: int64_t
    - fromadvanced: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lenarray: int64_t
    - lencontent: int64_t
    name: awkward_ListArray64_getitem_next_array_advanced_64
  specification: "def awkward_ListArray_getitem_next_array_advanced(\n    tocarry,\n\
    \    toadvanced,\n    fromstarts,\n    fromstops,\n    fromarray,\n    fromadvanced,\n\
    \    startsoffset,\n    stopsoffset,\n    lenstarts,\n    lenarray,\n    lencontent,\n\
    ):\n    for i in range(int(lenstarts)):\n        if fromstops[stopsoffset + i]\
    \ < fromstarts[startsoffset + i]:\n            raise ValueError(\"stops[i] < starts[i]\"\
    )\n        if (fromstarts[startsoffset + i] != fromstops[stopsoffset + i]) and\
    \ (\n            fromstops[stopsoffset + i] > lencontent\n        ):\n       \
    \     raise ValueError(\"stops[i] > len(content)\")\n        length = fromstops[stopsoffset\
    \ + i] - fromstarts[startsoffset + i]\n        regular_at = fromarray[fromadvanced[i]]\n\
    \        if regular_at < 0:\n            regular_at += length\n        if not\
    \ ((0 <= regular_at) and (regular_at < length)):\n            raise ValueError(\"\
    index out of range\")\n        tocarry[i] = fromstarts[startsoffset + i] + regular_at\n\
    \        toadvanced[i] = i\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - fromarray: int64_t
  - fromadvanced: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lenarray: int64_t
  - lencontent: int64_t
  name: awkward_ListArray32_getitem_next_array_advanced_64
  specification: "def awkward_ListArray32_getitem_next_array_advanced_64(\n    tocarry,\n\
    \    toadvanced,\n    fromstarts,\n    fromstops,\n    fromarray,\n    fromadvanced,\n\
    \    startsoffset,\n    stopsoffset,\n    lenstarts,\n    lenarray,\n    lencontent,\n\
    ):\n    return awkward_ListArray_getitem_next_array_advanced(\n        tocarry,\n\
    \        toadvanced,\n        fromstarts,\n        fromstops,\n        fromarray,\n\
    \        fromadvanced,\n        startsoffset,\n        stopsoffset,\n        lenstarts,\n\
    \        lenarray,\n        lencontent,\n    )\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - fromarray: int64_t
  - fromadvanced: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lenarray: int64_t
  - lencontent: int64_t
  name: awkward_ListArrayU32_getitem_next_array_advanced_64
  specification: "def awkward_ListArrayU32_getitem_next_array_advanced_64(\n    tocarry,\n\
    \    toadvanced,\n    fromstarts,\n    fromstops,\n    fromarray,\n    fromadvanced,\n\
    \    startsoffset,\n    stopsoffset,\n    lenstarts,\n    lenarray,\n    lencontent,\n\
    ):\n    return awkward_ListArray_getitem_next_array_advanced(\n        tocarry,\n\
    \        toadvanced,\n        fromstarts,\n        fromstops,\n        fromarray,\n\
    \        fromadvanced,\n        startsoffset,\n        stopsoffset,\n        lenstarts,\n\
    \        lenarray,\n        lencontent,\n    )\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - fromarray: int64_t
  - fromadvanced: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lenarray: int64_t
  - lencontent: int64_t
  name: awkward_ListArray64_getitem_next_array_advanced_64
  specification: "def awkward_ListArray64_getitem_next_array_advanced_64(\n    tocarry,\n\
    \    toadvanced,\n    fromstarts,\n    fromstops,\n    fromarray,\n    fromadvanced,\n\
    \    startsoffset,\n    stopsoffset,\n    lenstarts,\n    lenarray,\n    lencontent,\n\
    ):\n    return awkward_ListArray_getitem_next_array_advanced(\n        tocarry,\n\
    \        toadvanced,\n        fromstarts,\n        fromstops,\n        fromarray,\n\
    \        fromadvanced,\n        startsoffset,\n        stopsoffset,\n        lenstarts,\n\
    \        lenarray,\n        lencontent,\n    )\n"
- name: awkward_ListArray_getitem_carry
  specializations:
  - args:
    - tostarts: int64_t
    - tostops: int64_t
    - fromstarts: int64_t
    - fromstops: int64_t
    - fromcarry: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lencarry: int64_t
    name: awkward_ListArray64_getitem_carry_64
  - args:
    - tostarts: uint32_t
    - tostops: uint32_t
    - fromstarts: uint32_t
    - fromstops: uint32_t
    - fromcarry: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lencarry: int64_t
    name: awkward_ListArrayU32_getitem_carry_64
  - args:
    - tostarts: int32_t
    - tostops: int32_t
    - fromstarts: int32_t
    - fromstops: int32_t
    - fromcarry: int64_t
    - startsoffset: int64_t
    - stopsoffset: int64_t
    - lenstarts: int64_t
    - lencarry: int64_t
    name: awkward_ListArray32_getitem_carry_64
  specification: "def awkward_ListArray_getitem_carry(\n    tostarts,\n    tostops,\n\
    \    fromstarts,\n    fromstops,\n    fromcarry,\n    startsoffset,\n    stopsoffset,\n\
    \    lenstarts,\n    lencarry,\n):\n    for i in range(int(lencarry)):\n     \
    \   if fromcarry[i] >= lenstarts:\n            raise ValueError(\"index out of\
    \ range\")\n        tostarts[i] = float(fromstarts[startsoffset + fromcarry[i]])\n\
    \        tostops[i] = float(fromstops[stopsoffset + fromcarry[i]])\n"
- args:
  - tostarts: int32_t
  - tostops: int32_t
  - fromstarts: int32_t
  - fromstops: int32_t
  - fromcarry: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lencarry: int64_t
  name: awkward_ListArray32_getitem_carry_64
  specification: "def awkward_ListArray32_getitem_carry_64(\n    tostarts,\n    tostops,\n\
    \    fromstarts,\n    fromstops,\n    fromcarry,\n    startsoffset,\n    stopsoffset,\n\
    \    lenstarts,\n    lencarry,\n):\n    return awkward_ListArray_getitem_carry(\n\
    \        tostarts,\n        tostops,\n        fromstarts,\n        fromstops,\n\
    \        fromcarry,\n        startsoffset,\n        stopsoffset,\n        lenstarts,\n\
    \        lencarry,\n    )\n"
- args:
  - tostarts: uint32_t
  - tostops: uint32_t
  - fromstarts: uint32_t
  - fromstops: uint32_t
  - fromcarry: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lencarry: int64_t
  name: awkward_ListArrayU32_getitem_carry_64
  specification: "def awkward_ListArrayU32_getitem_carry_64(\n    tostarts,\n    tostops,\n\
    \    fromstarts,\n    fromstops,\n    fromcarry,\n    startsoffset,\n    stopsoffset,\n\
    \    lenstarts,\n    lencarry,\n):\n    return awkward_ListArray_getitem_carry(\n\
    \        tostarts,\n        tostops,\n        fromstarts,\n        fromstops,\n\
    \        fromcarry,\n        startsoffset,\n        stopsoffset,\n        lenstarts,\n\
    \        lencarry,\n    )\n"
- args:
  - tostarts: int64_t
  - tostops: int64_t
  - fromstarts: int64_t
  - fromstops: int64_t
  - fromcarry: int64_t
  - startsoffset: int64_t
  - stopsoffset: int64_t
  - lenstarts: int64_t
  - lencarry: int64_t
  name: awkward_ListArray64_getitem_carry_64
  specification: "def awkward_ListArray64_getitem_carry_64(\n    tostarts,\n    tostops,\n\
    \    fromstarts,\n    fromstops,\n    fromcarry,\n    startsoffset,\n    stopsoffset,\n\
    \    lenstarts,\n    lencarry,\n):\n    return awkward_ListArray_getitem_carry(\n\
    \        tostarts,\n        tostops,\n        fromstarts,\n        fromstops,\n\
    \        fromcarry,\n        startsoffset,\n        stopsoffset,\n        lenstarts,\n\
    \        lencarry,\n    )\n"
- name: awkward_RegularArray_getitem_next_at
  specializations:
  - args:
    - tocarry: int64_t
    - at: int64_t
    - len: int64_t
    - size: int64_t
    name: awkward_RegularArray_getitem_next_at_64
  specification: "def awkward_RegularArray_getitem_next_at(tocarry, at, len, size):\n\
    \    regular_at = at\n    if regular_at < 0:\n        regular_at += size\n   \
    \ if not ((0 <= regular_at) and (regular_at < size)):\n        raise ValueError(\"\
    index out of range\")\n    for i in range(int(len)):\n        tocarry[i] = (i\
    \ * size) + regular_at\n"
- args:
  - tocarry: int64_t
  - at: int64_t
  - len: int64_t
  - size: int64_t
  name: awkward_RegularArray_getitem_next_at_64
  specification: "def awkward_RegularArray_getitem_next_at_64(tocarry, at, len, size):\n\
    \    return awkward_RegularArray_getitem_next_at(tocarry, at, len, size)\n"
- name: awkward_RegularArray_getitem_next_range
  specializations:
  - args:
    - tocarry: int64_t
    - regular_start: int64_t
    - step: int64_t
    - len: int64_t
    - size: int64_t
    - nextsize: int64_t
    name: awkward_RegularArray_getitem_next_range_64
  specification: "def awkward_RegularArray_getitem_next_range(\n    tocarry, regular_start,\
    \ step, len, size, nextsize\n):\n    for i in range(int(len)):\n        for j\
    \ in range(int(nextsize)):\n            tocarry[(i * nextsize) + j] = ((i * size)\
    \ + regular_start) + (j * step)\n"
- args:
  - tocarry: int64_t
  - regular_start: int64_t
  - step: int64_t
  - len: int64_t
  - size: int64_t
  - nextsize: int64_t
  name: awkward_RegularArray_getitem_next_range_64
  specification: "def awkward_RegularArray_getitem_next_range_64(\n    tocarry, regular_start,\
    \ step, len, size, nextsize\n):\n    return awkward_RegularArray_getitem_next_range(\n\
    \        tocarry, regular_start, step, len, size, nextsize\n    )\n"
- name: awkward_RegularArray_getitem_next_range_spreadadvanced
  specializations:
  - args:
    - toadvanced: int64_t
    - fromadvanced: int64_t
    - len: int64_t
    - nextsize: int64_t
    name: awkward_RegularArray_getitem_next_range_spreadadvanced_64
  specification: "def awkward_RegularArray_getitem_next_range_spreadadvanced(\n  \
    \  toadvanced, fromadvanced, len, nextsize\n):\n    for i in range(int(len)):\n\
    \        for j in range(int(nextsize)):\n            toadvanced[(i * nextsize)\
    \ + j] = fromadvanced[i]\n"
- args:
  - toadvanced: int64_t
  - fromadvanced: int64_t
  - len: int64_t
  - nextsize: int64_t
  name: awkward_RegularArray_getitem_next_range_spreadadvanced_64
  specification: "def awkward_RegularArray_getitem_next_range_spreadadvanced_64(\n\
    \    toadvanced, fromadvanced, len, nextsize\n):\n    return awkward_RegularArray_getitem_next_range_spreadadvanced(\n\
    \        toadvanced, fromadvanced, len, nextsize\n    )\n"
- name: awkward_RegularArray_getitem_next_array_regularize
  specializations:
  - args:
    - toarray: int64_t
    - fromarray: int64_t
    - lenarray: int64_t
    - size: int64_t
    name: awkward_RegularArray_getitem_next_array_regularize_64
  specification: "def awkward_RegularArray_getitem_next_array_regularize(\n    toarray,\
    \ fromarray, lenarray, size\n):\n    for j in range(int(lenarray)):\n        toarray[j]\
    \ = fromarray[j]\n        if toarray[j] < 0:\n            toarray[j] += size\n\
    \        if not ((0 <= toarray[j]) and (toarray[j] < size)):\n            raise\
    \ ValueError(\"index out of range\")\n"
- args:
  - toarray: int64_t
  - fromarray: int64_t
  - lenarray: int64_t
  - size: int64_t
  name: awkward_RegularArray_getitem_next_array_regularize_64
  specification: "def awkward_RegularArray_getitem_next_array_regularize_64(\n   \
    \ toarray, fromarray, lenarray, size\n):\n    return awkward_RegularArray_getitem_next_array_regularize(\n\
    \        toarray, fromarray, lenarray, size\n    )\n"
- name: awkward_RegularArray_getitem_next_array
  specializations:
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromarray: int64_t
    - len: int64_t
    - lenarray: int64_t
    - size: int64_t
    name: awkward_RegularArray_getitem_next_array_64
  specification: "def awkward_RegularArray_getitem_next_array(\n    tocarry, toadvanced,\
    \ fromarray, len, lenarray, size\n):\n    for i in range(int(len)):\n        for\
    \ j in range(int(lenarray)):\n            tocarry[(i * lenarray) + j] = (i * size)\
    \ + fromarray[j]\n            toadvanced[(i * lenarray) + j] = j\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromarray: int64_t
  - len: int64_t
  - lenarray: int64_t
  - size: int64_t
  name: awkward_RegularArray_getitem_next_array_64
  specification: "def awkward_RegularArray_getitem_next_array_64(\n    tocarry, toadvanced,\
    \ fromarray, len, lenarray, size\n):\n    return awkward_RegularArray_getitem_next_array(\n\
    \        tocarry, toadvanced, fromarray, len, lenarray, size\n    )\n"
- name: awkward_RegularArray_getitem_next_array_advanced
  specializations:
  - args:
    - tocarry: int64_t
    - toadvanced: int64_t
    - fromadvanced: int64_t
    - fromarray: int64_t
    - len: int64_t
    - lenarray: int64_t
    - size: int64_t
    name: awkward_RegularArray_getitem_next_array_advanced_64
  specification: "def awkward_RegularArray_getitem_next_array_advanced(\n    tocarry,\
    \ toadvanced, fromadvanced, fromarray, len, lenarray, size\n):\n    for i in range(int(len)):\n\
    \        tocarry[i] = (i * size) + fromarray[fromadvanced[i]]\n        toadvanced[i]\
    \ = i\n"
- args:
  - tocarry: int64_t
  - toadvanced: int64_t
  - fromadvanced: int64_t
  - fromarray: int64_t
  - len: int64_t
  - lenarray: int64_t
  - size: int64_t
  name: awkward_RegularArray_getitem_next_array_advanced_64
  specification: "def awkward_RegularArray_getitem_next_array_advanced_64(\n    tocarry,\
    \ toadvanced, fromadvanced, fromarray, len, lenarray, size\n):\n    return awkward_RegularArray_getitem_next_array_advanced(\n\
    \        tocarry, toadvanced, fromadvanced, fromarray, len, lenarray, size\n \
    \   )\n"
- name: awkward_RegularArray_getitem_carry
  specializations:
  - args:
    - tocarry: int64_t
    - fromcarry: int64_t
    - lencarry: int64_t
    - size: int64_t
    name: awkward_RegularArray_getitem_carry_64
  specification: "def awkward_RegularArray_getitem_carry(tocarry, fromcarry, lencarry,\
    \ size):\n    for i in range(int(lencarry)):\n        for j in range(int(size)):\n\
    \            tocarry[(i * size) + j] = (fromcarry[i] * size) + j\n"
- args:
  - tocarry: int64_t
  - fromcarry: int64_t
  - lencarry: int64_t
  - size: int64_t
  name: awkward_RegularArray_getitem_carry_64
  specification: "def awkward_RegularArray_getitem_carry_64(tocarry, fromcarry, lencarry,\
    \ size):\n    return awkward_RegularArray_getitem_carry(tocarry, fromcarry, lencarry,\
    \ size)\n"
- name: awkward_IndexedArray_numnull
  specializations:
  - args:
    - numnull: int64_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    name: awkward_IndexedArray32_numnull
  - args:
    - numnull: int64_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    name: awkward_IndexedArrayU32_numnull
  - args:
    - numnull: int64_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    name: awkward_IndexedArray64_numnull
  specification: "def awkward_IndexedArray_numnull(numnull, fromindex, indexoffset,\
    \ lenindex):\n    numnull[0] = 0\n    for i in range(int(lenindex)):\n       \
    \ if fromindex[indexoffset + i] < 0:\n            numnull[0] = numnull[0] + 1\n"
- args:
  - numnull: int64_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  name: awkward_IndexedArray32_numnull
  specification: "def awkward_IndexedArray32_numnull(numnull, fromindex, indexoffset,\
    \ lenindex):\n    return awkward_IndexedArray_numnull(numnull, fromindex, indexoffset,\
    \ lenindex)\n"
- args:
  - numnull: int64_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  name: awkward_IndexedArrayU32_numnull
  specification: "def awkward_IndexedArrayU32_numnull(numnull, fromindex, indexoffset,\
    \ lenindex):\n    return awkward_IndexedArray_numnull(numnull, fromindex, indexoffset,\
    \ lenindex)\n"
- args:
  - numnull: int64_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  name: awkward_IndexedArray64_numnull
  specification: "def awkward_IndexedArray64_numnull(numnull, fromindex, indexoffset,\
    \ lenindex):\n    return awkward_IndexedArray_numnull(numnull, fromindex, indexoffset,\
    \ lenindex)\n"
- name: awkward_IndexedArray_getitem_nextcarry_outindex
  specializations:
  - args:
    - tocarry: int64_t
    - toindex: uint32_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArrayU32_getitem_nextcarry_outindex_64
  - args:
    - tocarry: int64_t
    - toindex: int32_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray32_getitem_nextcarry_outindex_64
  - args:
    - tocarry: int64_t
    - toindex: int64_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray64_getitem_nextcarry_outindex_64
  specification: "def awkward_IndexedArray_getitem_nextcarry_outindex(\n    tocarry,\
    \ toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    k = 0\n    for\
    \ i in range(int(lenindex)):\n        j = fromindex[indexoffset + i]\n       \
    \ if j >= lencontent:\n            raise ValueError(\"index out of range\")\n\
    \        else:\n            if j < 0:\n                toindex[i] = -1\n     \
    \       else:\n                tocarry[k] = j\n                toindex[i] = float(k)\n\
    \                k = k + 1\n"
- args:
  - tocarry: int64_t
  - toindex: int32_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray32_getitem_nextcarry_outindex_64
  specification: "def awkward_IndexedArray32_getitem_nextcarry_outindex_64(\n    tocarry,\
    \ toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_getitem_nextcarry_outindex(\n\
    \        tocarry, toindex, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - toindex: uint32_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArrayU32_getitem_nextcarry_outindex_64
  specification: "def awkward_IndexedArrayU32_getitem_nextcarry_outindex_64(\n   \
    \ tocarry, toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    return\
    \ awkward_IndexedArray_getitem_nextcarry_outindex(\n        tocarry, toindex,\
    \ fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - toindex: int64_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray64_getitem_nextcarry_outindex_64
  specification: "def awkward_IndexedArray64_getitem_nextcarry_outindex_64(\n    tocarry,\
    \ toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_getitem_nextcarry_outindex(\n\
    \        tocarry, toindex, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- name: awkward_IndexedArray_getitem_nextcarry_outindex_mask
  specializations:
  - args:
    - tocarry: int64_t
    - toindex: int64_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray32_getitem_nextcarry_outindex_mask_64
  - args:
    - tocarry: int64_t
    - toindex: int64_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray64_getitem_nextcarry_outindex_mask_64
  - args:
    - tocarry: int64_t
    - toindex: int64_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArrayU32_getitem_nextcarry_outindex_mask_64
  specification: "def awkward_IndexedArray_getitem_nextcarry_outindex_mask(\n    tocarry,\
    \ toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    k = 0\n    for\
    \ i in range(int(lenindex)):\n        j = fromindex[indexoffset + i]\n       \
    \ if j >= lencontent:\n            raise ValueError(\"index out of range\")\n\
    \        else:\n            if j < 0:\n                toindex[i] = -1\n     \
    \       else:\n                tocarry[k] = j\n                toindex[i] = float(k)\n\
    \                k = k + 1\n"
- args:
  - tocarry: int64_t
  - toindex: int64_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray32_getitem_nextcarry_outindex_mask_64
  specification: "def awkward_IndexedArray32_getitem_nextcarry_outindex_mask_64(\n\
    \    tocarry, toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    return\
    \ awkward_IndexedArray_getitem_nextcarry_outindex_mask(\n        tocarry, toindex,\
    \ fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - toindex: int64_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArrayU32_getitem_nextcarry_outindex_mask_64
  specification: "def awkward_IndexedArrayU32_getitem_nextcarry_outindex_mask_64(\n\
    \    tocarry, toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    return\
    \ awkward_IndexedArray_getitem_nextcarry_outindex_mask(\n        tocarry, toindex,\
    \ fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - toindex: int64_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray64_getitem_nextcarry_outindex_mask_64
  specification: "def awkward_IndexedArray64_getitem_nextcarry_outindex_mask_64(\n\
    \    tocarry, toindex, fromindex, indexoffset, lenindex, lencontent\n):\n    return\
    \ awkward_IndexedArray_getitem_nextcarry_outindex_mask(\n        tocarry, toindex,\
    \ fromindex, indexoffset, lenindex, lencontent\n    )\n"
- name: awkward_ListOffsetArray_getitem_adjust_offsets
  specializations:
  - args:
    - tooffsets: int64_t
    - tononzero: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - length: int64_t
    - nonzero: int64_t
    - nonzerooffset: int64_t
    - nonzerolength: int64_t
    name: awkward_ListOffsetArray_getitem_adjust_offsets_64
  specification: "def awkward_ListOffsetArray_getitem_adjust_offsets(\n    tooffsets,\n\
    \    tononzero,\n    fromoffsets,\n    offsetsoffset,\n    length,\n    nonzero,\n\
    \    nonzerooffset,\n    nonzerolength,\n):\n    j = 0\n    tooffsets[0] = fromoffsets[offsetsoffset\
    \ + 0]\n    for i in range(int(length)):\n        slicestart = fromoffsets[offsetsoffset\
    \ + i]\n        slicestop = fromoffsets[(offsetsoffset + i) + 1]\n        count\
    \ = 0\n        while (j < nonzerolength) and (nonzero[nonzerooffset + j] < slicestop):\n\
    \            tononzero[j] = nonzero[nonzerooffset + j] - slicestart\n        \
    \    j = j + 1\n            count = count + 1\n\n        tooffsets[i + 1] = tooffsets[i]\
    \ + count\n"
- args:
  - tooffsets: int64_t
  - tononzero: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  - nonzero: int64_t
  - nonzerooffset: int64_t
  - nonzerolength: int64_t
  name: awkward_ListOffsetArray_getitem_adjust_offsets_64
  specification: "def awkward_ListOffsetArray_getitem_adjust_offsets_64(\n    tooffsets,\n\
    \    tononzero,\n    fromoffsets,\n    offsetsoffset,\n    length,\n    nonzero,\n\
    \    nonzerooffset,\n    nonzerolength,\n):\n    return awkward_ListOffsetArray_getitem_adjust_offsets(\n\
    \        tooffsets,\n        tononzero,\n        fromoffsets,\n        offsetsoffset,\n\
    \        length,\n        nonzero,\n        nonzerooffset,\n        nonzerolength,\n\
    \    )\n"
- name: awkward_ListOffsetArray_getitem_adjust_offsets_index
  specializations:
  - args:
    - tooffsets: int64_t
    - tononzero: int64_t
    - fromoffsets: int64_t
    - offsetsoffset: int64_t
    - length: int64_t
    - index: int64_t
    - indexoffset: int64_t
    - indexlength: int64_t
    - nonzero: int64_t
    - nonzerooffset: int64_t
    - nonzerolength: int64_t
    - originalmask: int8_t
    - maskoffset: int64_t
    - masklength: int64_t
    name: awkward_ListOffsetArray_getitem_adjust_offsets_index_64
  specification: "def awkward_ListOffsetArray_getitem_adjust_offsets_index(\n    tooffsets,\n\
    \    tononzero,\n    fromoffsets,\n    offsetsoffset,\n    length,\n    index,\n\
    \    indexoffset,\n    indexlength,\n    nonzero,\n    nonzerooffset,\n    nonzerolength,\n\
    \    originalmask,\n    maskoffset,\n    masklength,\n):\n    k = 0\n    tooffsets[0]\
    \ = fromoffsets[offsetsoffset + 0]\n    for i in range(int(length)):\n       \
    \ slicestart = fromoffsets[offsetsoffset + i]\n        slicestop = fromoffsets[(offsetsoffset\
    \ + i) + 1]\n        numnull = 0\n        for j in range(int(slicestart), slicestop):\n\
    \            numnull += 1 if originalmask[maskoffset + j] != 0 else 0\n      \
    \  nullcount = 0\n        count = 0\n        while (k < indexlength) and (\n \
    \           ((index[indexoffset + k] < 0) and (nullcount < numnull))\n       \
    \     or (\n                (\n                    (index[indexoffset + k] >=\
    \ 0)\n                    and (index[indexoffset + k] < nonzerolength)\n     \
    \           )\n                and (nonzero[nonzerooffset + index[indexoffset\
    \ + k]] < slicestop)\n            )\n        ):\n            if index[indexoffset\
    \ + k] < 0:\n                nullcount = nullcount + 1\n            else:\n  \
    \              j = index[indexoffset + k]\n                tononzero[j] = nonzero[nonzerooffset\
    \ + j] - slicestart\n            k = k + 1\n            count = count + 1\n\n\
    \        tooffsets[i + 1] = tooffsets[i] + count\n"
- args:
  - tooffsets: int64_t
  - tononzero: int64_t
  - fromoffsets: int64_t
  - offsetsoffset: int64_t
  - length: int64_t
  - index: int64_t
  - indexoffset: int64_t
  - indexlength: int64_t
  - nonzero: int64_t
  - nonzerooffset: int64_t
  - nonzerolength: int64_t
  - originalmask: int8_t
  - maskoffset: int64_t
  - masklength: int64_t
  name: awkward_ListOffsetArray_getitem_adjust_offsets_index_64
  specification: "def awkward_ListOffsetArray_getitem_adjust_offsets_index_64(\n \
    \   tooffsets,\n    tononzero,\n    fromoffsets,\n    offsetsoffset,\n    length,\n\
    \    index,\n    indexoffset,\n    indexlength,\n    nonzero,\n    nonzerooffset,\n\
    \    nonzerolength,\n    originalmask,\n    maskoffset,\n    masklength,\n):\n\
    \    return awkward_ListOffsetArray_getitem_adjust_offsets_index(\n        tooffsets,\n\
    \        tononzero,\n        fromoffsets,\n        offsetsoffset,\n        length,\n\
    \        index,\n        indexoffset,\n        indexlength,\n        nonzero,\n\
    \        nonzerooffset,\n        nonzerolength,\n        originalmask,\n     \
    \   maskoffset,\n        masklength,\n    )\n"
- name: awkward_IndexedArray_getitem_adjust_outindex
  specializations:
  - args:
    - tomask: int8_t
    - toindex: int64_t
    - tononzero: int64_t
    - fromindex: int64_t
    - fromindexoffset: int64_t
    - fromindexlength: int64_t
    - nonzero: int64_t
    - nonzerooffset: int64_t
    - nonzerolength: int64_t
    name: awkward_IndexedArray_getitem_adjust_outindex_64
  specification: "def awkward_IndexedArray_getitem_adjust_outindex(\n    tomask,\n\
    \    toindex,\n    tononzero,\n    fromindex,\n    fromindexoffset,\n    fromindexlength,\n\
    \    nonzero,\n    nonzerooffset,\n    nonzerolength,\n):\n    j = 0\n    k =\
    \ 0\n    for i in range(int(fromindexlength)):\n        fromval = fromindex[fromindexoffset\
    \ + i]\n        tomask[i] = fromval < 0\n        if fromval < 0:\n           \
    \ toindex[k] = -1\n            k = k + 1\n        else:\n            if (j < nonzerolength)\
    \ and (fromval == nonzero[nonzerooffset + j]):\n                tononzero[j] =\
    \ fromval + (k - j)\n                toindex[k] = j\n                j = j + 1\n\
    \                k = k + 1\n"
- args:
  - tomask: int8_t
  - toindex: int64_t
  - tononzero: int64_t
  - fromindex: int64_t
  - fromindexoffset: int64_t
  - fromindexlength: int64_t
  - nonzero: int64_t
  - nonzerooffset: int64_t
  - nonzerolength: int64_t
  name: awkward_IndexedArray_getitem_adjust_outindex_64
  specification: "def awkward_IndexedArray_getitem_adjust_outindex_64(\n    tomask,\n\
    \    toindex,\n    tononzero,\n    fromindex,\n    fromindexoffset,\n    fromindexlength,\n\
    \    nonzero,\n    nonzerooffset,\n    nonzerolength,\n):\n    return awkward_IndexedArray_getitem_adjust_outindex(\n\
    \        tomask,\n        toindex,\n        tononzero,\n        fromindex,\n \
    \       fromindexoffset,\n        fromindexlength,\n        nonzero,\n       \
    \ nonzerooffset,\n        nonzerolength,\n    )\n"
- name: awkward_IndexedArray_getitem_nextcarry
  specializations:
  - args:
    - tocarry: int64_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray64_getitem_nextcarry_64
  - args:
    - tocarry: int64_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArray32_getitem_nextcarry_64
  - args:
    - tocarry: int64_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencontent: int64_t
    name: awkward_IndexedArrayU32_getitem_nextcarry_64
  specification: "def awkward_IndexedArray_getitem_nextcarry(\n    tocarry, fromindex,\
    \ indexoffset, lenindex, lencontent\n):\n    k = 0\n    for i in range(int(lenindex)):\n\
    \        j = fromindex[indexoffset + i]\n        if (j < 0) or (j >= lencontent):\n\
    \            raise ValueError(\"index out of range\")\n        else:\n       \
    \     tocarry[k] = j\n            k = k + 1\n"
- args:
  - tocarry: int64_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray32_getitem_nextcarry_64
  specification: "def awkward_IndexedArray32_getitem_nextcarry_64(\n    tocarry, fromindex,\
    \ indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_getitem_nextcarry(\n\
    \        tocarry, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArrayU32_getitem_nextcarry_64
  specification: "def awkward_IndexedArrayU32_getitem_nextcarry_64(\n    tocarry,\
    \ fromindex, indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_getitem_nextcarry(\n\
    \        tocarry, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- args:
  - tocarry: int64_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencontent: int64_t
  name: awkward_IndexedArray64_getitem_nextcarry_64
  specification: "def awkward_IndexedArray64_getitem_nextcarry_64(\n    tocarry, fromindex,\
    \ indexoffset, lenindex, lencontent\n):\n    return awkward_IndexedArray_getitem_nextcarry(\n\
    \        tocarry, fromindex, indexoffset, lenindex, lencontent\n    )\n"
- name: awkward_IndexedArray_getitem_carry
  specializations:
  - args:
    - toindex: int64_t
    - fromindex: int64_t
    - fromcarry: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencarry: int64_t
    name: awkward_IndexedArray64_getitem_carry_64
  - args:
    - toindex: uint32_t
    - fromindex: uint32_t
    - fromcarry: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencarry: int64_t
    name: awkward_IndexedArrayU32_getitem_carry_64
  - args:
    - toindex: int32_t
    - fromindex: int32_t
    - fromcarry: int64_t
    - indexoffset: int64_t
    - lenindex: int64_t
    - lencarry: int64_t
    name: awkward_IndexedArray32_getitem_carry_64
  specification: "def awkward_IndexedArray_getitem_carry(\n    toindex, fromindex,\
    \ fromcarry, indexoffset, lenindex, lencarry\n):\n    for i in range(int(lencarry)):\n\
    \        if fromcarry[i] >= lenindex:\n            raise ValueError(\"index out\
    \ of range\")\n        toindex[i] = float(fromindex[indexoffset + fromcarry[i]])\n"
- args:
  - toindex: int32_t
  - fromindex: int32_t
  - fromcarry: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencarry: int64_t
  name: awkward_IndexedArray32_getitem_carry_64
  specification: "def awkward_IndexedArray32_getitem_carry_64(\n    toindex, fromindex,\
    \ fromcarry, indexoffset, lenindex, lencarry\n):\n    return awkward_IndexedArray_getitem_carry(\n\
    \        toindex, fromindex, fromcarry, indexoffset, lenindex, lencarry\n    )\n"
- args:
  - toindex: uint32_t
  - fromindex: uint32_t
  - fromcarry: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencarry: int64_t
  name: awkward_IndexedArrayU32_getitem_carry_64
  specification: "def awkward_IndexedArrayU32_getitem_carry_64(\n    toindex, fromindex,\
    \ fromcarry, indexoffset, lenindex, lencarry\n):\n    return awkward_IndexedArray_getitem_carry(\n\
    \        toindex, fromindex, fromcarry, indexoffset, lenindex, lencarry\n    )\n"
- args:
  - toindex: int64_t
  - fromindex: int64_t
  - fromcarry: int64_t
  - indexoffset: int64_t
  - lenindex: int64_t
  - lencarry: int64_t
  name: awkward_IndexedArray64_getitem_carry_64
  specification: "def awkward_IndexedArray64_getitem_carry_64(\n    toindex, fromindex,\
    \ fromcarry, indexoffset, lenindex, lencarry\n):\n    return awkward_IndexedArray_getitem_carry(\n\
    \        toindex, fromindex, fromcarry, indexoffset, lenindex, lencarry\n    )\n"
- name: awkward_UnionArray_regular_index_getsize
  specializations:
  - args:
    - size: int64_t
    - fromtags: int8_t
    - tagsoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray8_regular_index_getsize
  specification: "def awkward_UnionArray_regular_index_getsize(size, fromtags, tagsoffset,\
    \ length):\n    size[0] = 0\n    for i in range(int(length)):\n        tag = int(fromtags[tagsoffset\
    \ + i])\n        if size[0] < tag:\n            size[0] = tag\n    size[0] = size[0]\
    \ + 1\n"
- args:
  - size: int64_t
  - fromtags: int8_t
  - tagsoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray8_regular_index_getsize
  specification: "def awkward_UnionArray8_regular_index_getsize(size, fromtags, tagsoffset,\
    \ length):\n    return awkward_UnionArray_regular_index_getsize(size, fromtags,\
    \ tagsoffset, length)\n"
- name: awkward_UnionArray_regular_index
  specializations:
  - args:
    - toindex: uint32_t
    - current: uint32_t
    - size: int64_t
    - fromtags: int8_t
    - tagsoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray8_U32_regular_index
  - args:
    - toindex: int64_t
    - current: int64_t
    - size: int64_t
    - fromtags: int8_t
    - tagsoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray8_64_regular_index
  - args:
    - toindex: int32_t
    - current: int32_t
    - size: int64_t
    - fromtags: int8_t
    - tagsoffset: int64_t
    - length: int64_t
    name: awkward_UnionArray8_32_regular_index
  specification: "def awkward_UnionArray_regular_index(\n    toindex, current, size,\
    \ fromtags, tagsoffset, length\n):\n    count = 0\n    for k in range(int(size)):\n\
    \        current[k] = 0\n    for i in range(int(length)):\n        tag = fromtags[tagsoffset\
    \ + i]\n        toindex[i] = current[tag]\n        current[tag] = current[tag]\
    \ + 1\n"
- args:
  - toindex: int32_t
  - current: int32_t
  - size: int64_t
  - fromtags: int8_t
  - tagsoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray8_32_regular_index
  specification: "def awkward_UnionArray8_32_regular_index(\n    toindex, current,\
    \ size, fromtags, tagsoffset, length\n):\n    return awkward_UnionArray_regular_index(\n\
    \        toindex, current, size, fromtags, tagsoffset, length\n    )\n"
- args:
  - toindex: uint32_t
  - current: uint32_t
  - size: int64_t
  - fromtags: int8_t
  - tagsoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray8_U32_regular_index
  specification: "def awkward_UnionArray8_U32_regular_index(\n    toindex, current,\
    \ size, fromtags, tagsoffset, length\n):\n    return awkward_UnionArray_regular_index(\n\
    \        toindex, current, size, fromtags, tagsoffset, length\n    )\n"
- args:
  - toindex: int64_t
  - current: int64_t
  - size: int64_t
  - fromtags: int8_t
  - tagsoffset: int64_t
  - length: int64_t
  name: awkward_UnionArray8_64_regular_index
  specification: "def awkward_UnionArray8_64_regular_index(\n    toindex, current,\
    \ size, fromtags, tagsoffset, length\n):\n    return awkward_UnionArray_regular_index(\n\
    \        toindex, current, size, fromtags, tagsoffset, length\n    )\n"
- name: awkward_UnionArray_project
  specializations:
  - args:
    - lenout: int64_t
    - tocarry: int64_t
    - fromtags: int8_t
    - tagsoffset: int64_t
    - fromindex: int64_t
    - indexoffset: int64_t
    - length: int64_t
    - which: int64_t
    name: awkward_UnionArray8_64_project_64
  - args:
    - lenout: int64_t
    - tocarry: int64_t
    - fromtags: int8_t
    - tagsoffset: int64_t
    - fromindex: int32_t
    - indexoffset: int64_t
    - length: int64_t
    - which: int64_t
    name: awkward_UnionArray8_32_project_64
  - args:
    - lenout: int64_t
    - tocarry: int64_t
    - fromtags: int8_t
    - tagsoffset: int64_t
    - fromindex: uint32_t
    - indexoffset: int64_t
    - length: int64_t
    - which: int64_t
    name: awkward_UnionArray8_U32_project_64
  specification: "def awkward_UnionArray_project(\n    lenout, tocarry, fromtags,\
    \ tagsoffset, fromindex, indexoffset, length, which\n):\n    lenout[0] = 0\n \
    \   for i in range(int(length)):\n        if fromtags[tagsoffset + i] == which:\n\
    \            tocarry[lenout[0]] = fromindex[indexoffset + i]\n            lenout[0]\
    \ = lenout[0] + 1\n"
- args:
  - lenout: int64_t
  - tocarry: int64_t
  - fromtags: int8_t
  - tagsoffset: int64_t
  - fromindex: int32_t
  - indexoffset: int64_t
  - length: int64_t
  - which: int64_t
  name: awkward_UnionArray8_32_project_64
  specification: "def awkward_UnionArray8_32_project_64(\n    lenout, tocarry, fromtags,\
    \ tagsoffset, fromindex, indexoffset, length, which\n):\n    return awkward_UnionArray_project(\n\
    \        lenout, tocarry, fromtags, tagsoffset, fromindex, indexoffset, length,\
    \ which\n    )\n"
- args:
  - lenout: int64_t
  - tocarry: int64_t
  - fromtags: int8_t
  - tagsoffset: int64_t
  - fromindex: uint32_t
  - indexoffset: int64_t
  - length: int64_t
  - which: int64_t
  name: awkward_UnionArray8_U32_project_64
  specification: "def awkward_UnionArray8_U32_project_64(\n    lenout, tocarry, fromtags,\
    \ tagsoffset, fromindex, indexoffset, length, which\n):\n    return awkward_UnionArray_project(\n\
    \        lenout, tocarry, fromtags, tagsoffset, fromindex, indexoffset, length,\
    \ which\n    )\n"
- args:
  - lenout: int64_t
  - tocarry: int64_t
  - fromtags: int8_t
  - tagsoffset: int64_t
  - fromindex: int64_t
  - indexoffset: int64_t
  - length: int64_t
  - which: int64_t
  name: awkward_UnionArray8_64_project_64
  specification: "def awkward_UnionArray8_64_project_64(\n    lenout, tocarry, fromtags,\
    \ tagsoffset, fromindex, indexoffset, length, which\n):\n    return awkward_UnionArray_project(\n\
    \        lenout, tocarry, fromtags, tagsoffset, fromindex, indexoffset, length,\
    \ which\n    )\n"
- name: awkward_missing_repeat
  specializations:
  - args:
    - outindex: int64_t
    - index: int64_t
    - indexoffset: int64_t
    - indexlength: int64_t
    - repetitions: int64_t
    - regularsize: int64_t
    name: awkward_missing_repeat_64
  specification: "def awkward_missing_repeat(\n    outindex, index, indexoffset, indexlength,\
    \ repetitions, regularsize\n):\n    for i in range(int(repetitions)):\n      \
    \  for j in range(int(indexlength)):\n            base = index[indexoffset + j]\n\
    \            outindex[(i * indexlength) + j] = base + i * regularsize if base\
    \ >= 0 else 0\n"
- args:
  - outindex: int64_t
  - index: int64_t
  - indexoffset: int64_t
  - indexlength: int64_t
  - repetitions: int64_t
  - regularsize: int64_t
  name: awkward_missing_repeat_64
  specification: "def awkward_missing_repeat_64(\n    outindex, index, indexoffset,\
    \ indexlength, repetitions, regularsize\n):\n    return awkward_missing_repeat(\n\
    \        outindex, index, indexoffset, indexlength, repetitions, regularsize\n\
    \    )\n"
- name: awkward_RegularArray_getitem_jagged_expand
  specializations:
  - args:
    - multistarts: int64_t
    - multistops: int64_t
    - singleoffsets: int64_t
    - regularsize: int64_t
    - regularlength: int64_t
    name: awkward_RegularArray_getitem_jagged_expand_64
  specification: "def awkward_RegularArray_getitem_jagged_expand(\n    multistarts,\
    \ multistops, singleoffsets, regularsize, regularlength\n):\n    for i in range(int(regularlength)):\n\
    \        for j in range(int(regularsize)):\n            multistarts[(i * regularsize)\
    \ + j] = singleoffsets[j]\n            multistops[(i * regularsize) + j] = singleoffsets[j\
    \ + 1]\n"
- args:
  - multistarts: int64_t
  - multistops: int64_t
  - singleoffsets: int64_t
  - regularsize: int64_t
  - regularlength: int64_t
  name: awkward_RegularArray_getitem_jagged_expand_64
  specification: "def awkward_RegularArray_getitem_jagged_expand_64(\n    multistarts,\
    \ multistops, singleoffsets, regularsize, regularlength\n):\n    return awkward_RegularArray_getitem_jagged_expand(\n\
    \        multistarts, multistops, singleoffsets, regularsize, regularlength\n\
    \    )\n"
- name: awkward_ListArray_getitem_jagged_expand
  specializations:
  - args:
    - multistarts: int64_t
    - multistops: int64_t
    - singleoffsets: int64_t
    - tocarry: int64_t
    - fromstarts: int64_t
    - fromstartsoffset: int64_t
    - fromstops: int64_t
    - fromstopsoffset: int64_t
    - jaggedsize: int64_t
    - length: int64_t
    name: awkward_ListArray64_getitem_jagged_expand_64
  - args:
    - multistarts: int64_t
    - multistops: int64_t
    - singleoffsets: int64_t
    - tocarry: int64_t
    - fromstarts: int32_t
    - fromstartsoffset: int64_t
    - fromstops: int32_t
    - fromstopsoffset: int64_t
    - jaggedsize: int64_t
    - length: int64_t
    name: awkward_ListArray32_getitem_jagged_expand_64
  - args:
    - multistarts: int64_t
    - multistops: int64_t
    - singleoffsets: int64_t
    - tocarry: int64_t
    - fromstarts: uint32_t
    - fromstartsoffset: int64_t
    - fromstops: uint32_t
    - fromstopsoffset: int64_t
    - jaggedsize: int64_t
    - length: int64_t
    name: awkward_ListArrayU32_getitem_jagged_expand_64
  specification: "def awkward_ListArray_getitem_jagged_expand(\n    multistarts,\n\
    \    multistops,\n    singleoffsets,\n    tocarry,\n    fromstarts,\n    fromstartsoffset,\n\
    \    fromstops,\n    fromstopsoffset,\n    jaggedsize,\n    length,\n):\n    for\
    \ i in range(int(length)):\n        start = fromstarts[fromstartsoffset + i]\n\
    \        stop = fromstops[fromstopsoffset + i]\n        if stop < start:\n   \
    \         raise ValueError(\"stops[i] < starts[i]\")\n        if (stop - start)\
    \ != jaggedsize:\n            raise ValueError(\"cannot fit jagged slice into\
    \ nested list\")\n        for j in range(int(jaggedsize)):\n            multistarts[(i\
    \ * jaggedsize) + j] = singleoffsets[j]\n            multistops[(i * jaggedsize)\
    \ + j] = singleoffsets[j + 1]\n            tocarry[(i * jaggedsize) + j] = start\
    \ + j\n"
- args:
  - multistarts: int64_t
  - multistops: int64_t
  - singleoffsets: int64_t
  - tocarry: int64_t
  - fromstarts: int32_t
  - fromstartsoffset: int64_t
  - fromstops: int32_t
  - fromstopsoffset: int64_t
  - jaggedsize: int64_t
  - length: int64_t
  name: awkward_ListArray32_getitem_jagged_expand_64
  specification: "def awkward_ListArray32_getitem_jagged_expand_64(\n    multistarts,\n\
    \    multistops,\n    singleoffsets,\n    tocarry,\n    fromstarts,\n    fromstartsoffset,\n\
    \    fromstops,\n    fromstopsoffset,\n    jaggedsize,\n    length,\n):\n    return\
    \ awkward_ListArray_getitem_jagged_expand(\n        multistarts,\n        multistops,\n\
    \        singleoffsets,\n        tocarry,\n        fromstarts,\n        fromstartsoffset,\n\
    \        fromstops,\n        fromstopsoffset,\n        jaggedsize,\n        length,\n\
    \    )\n"
- args:
  - multistarts: int64_t
  - multistops: int64_t
  - singleoffsets: int64_t
  - tocarry: int64_t
  - fromstarts: uint32_t
  - fromstartsoffset: int64_t
  - fromstops: uint32_t
  - fromstopsoffset: int64_t
  - jaggedsize: int64_t
  - length: int64_t
  name: awkward_ListArrayU32_getitem_jagged_expand_64
  specification: "def awkward_ListArrayU32_getitem_jagged_expand_64(\n    multistarts,\n\
    \    multistops,\n    singleoffsets,\n    tocarry,\n    fromstarts,\n    fromstartsoffset,\n\
    \    fromstops,\n    fromstopsoffset,\n    jaggedsize,\n    length,\n):\n    return\
    \ awkward_ListArray_getitem_jagged_expand(\n        multistarts,\n        multistops,\n\
    \        singleoffsets,\n        tocarry,\n        fromstarts,\n        fromstartsoffset,\n\
    \        fromstops,\n        fromstopsoffset,\n        jaggedsize,\n        length,\n\
    \    )\n"
- args:
  - multistarts: int64_t
  - multistops: int64_t
  - singleoffsets: int64_t
  - tocarry: int64_t
  - fromstarts: int64_t
  - fromstartsoffset: int64_t
  - fromstops: int64_t
  - fromstopsoffset: int64_t
  - jaggedsize: int64_t
  - length: int64_t
  name: awkward_ListArray64_getitem_jagged_expand_64
  specification: "def awkward_ListArray64_getitem_jagged_expand_64(\n    multistarts,\n\
    \    multistops,\n    singleoffsets,\n    tocarry,\n    fromstarts,\n    fromstartsoffset,\n\
    \    fromstops,\n    fromstopsoffset,\n    jaggedsize,\n    length,\n):\n    return\
    \ awkward_ListArray_getitem_jagged_expand(\n        multistarts,\n        multistops,\n\
    \        singleoffsets,\n        tocarry,\n        fromstarts,\n        fromstartsoffset,\n\
    \        fromstops,\n        fromstopsoffset,\n        jaggedsize,\n        length,\n\
    \    )\n"
- name: awkward_ListArray_getitem_jagged_carrylen
  specializations:
  - args:
    - carrylen: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - sliceouterlen: int64_t
    name: awkward_ListArray_getitem_jagged_carrylen_64
  specification: "def awkward_ListArray_getitem_jagged_carrylen(\n    carrylen,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    sliceouterlen,\n):\n    carrylen[0] = 0\n    for i in range(int(sliceouterlen)):\n\
    \        carrylen[0] = carrylen[0] + int(\n            slicestops[slicestopsoffset\
    \ + i] - slicestarts[slicestartsoffset + i]\n        )\n"
- args:
  - carrylen: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - sliceouterlen: int64_t
  name: awkward_ListArray_getitem_jagged_carrylen_64
  specification: "def awkward_ListArray_getitem_jagged_carrylen_64(\n    carrylen,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    sliceouterlen,\n):\n    return awkward_ListArray_getitem_jagged_carrylen(\n\
    \        carrylen,\n        slicestarts,\n        slicestartsoffset,\n       \
    \ slicestops,\n        slicestopsoffset,\n        sliceouterlen,\n    )\n"
- name: awkward_ListArray_getitem_jagged_apply
  specializations:
  - args:
    - tooffsets: int64_t
    - tocarry: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - sliceouterlen: int64_t
    - sliceindex: int64_t
    - sliceindexoffset: int64_t
    - sliceinnerlen: int64_t
    - fromstarts: int32_t
    - fromstartsoffset: int64_t
    - fromstops: int32_t
    - fromstopsoffset: int64_t
    - contentlen: int64_t
    name: awkward_ListArray32_getitem_jagged_apply_64
  - args:
    - tooffsets: int64_t
    - tocarry: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - sliceouterlen: int64_t
    - sliceindex: int64_t
    - sliceindexoffset: int64_t
    - sliceinnerlen: int64_t
    - fromstarts: int64_t
    - fromstartsoffset: int64_t
    - fromstops: int64_t
    - fromstopsoffset: int64_t
    - contentlen: int64_t
    name: awkward_ListArray64_getitem_jagged_apply_64
  - args:
    - tooffsets: int64_t
    - tocarry: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - sliceouterlen: int64_t
    - sliceindex: int64_t
    - sliceindexoffset: int64_t
    - sliceinnerlen: int64_t
    - fromstarts: uint32_t
    - fromstartsoffset: int64_t
    - fromstops: uint32_t
    - fromstopsoffset: int64_t
    - contentlen: int64_t
    name: awkward_ListArrayU32_getitem_jagged_apply_64
  specification: "def awkward_ListArray_getitem_jagged_apply(\n    tooffsets,\n  \
    \  tocarry,\n    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    sliceouterlen,\n    sliceindex,\n    sliceindexoffset,\n    sliceinnerlen,\n\
    \    fromstarts,\n    fromstartsoffset,\n    fromstops,\n    fromstopsoffset,\n\
    \    contentlen,\n):\n    k = 0\n    for i in range(int(sliceouterlen)):\n   \
    \     slicestart = slicestarts[slicestartsoffset + i]\n        slicestop = slicestops[slicestopsoffset\
    \ + i]\n        tooffsets[i] = float(k)\n        if slicestart != slicestop:\n\
    \            if slicestop < slicestart:\n                raise ValueError(\"jagged\
    \ slice's stops[i] < starts[i]\")\n            if slicestop > sliceinnerlen:\n\
    \                raise ValueError(\"jagged slice's offsets extend beyond its content\"\
    )\n            start = int(fromstarts[fromstartsoffset + i])\n            stop\
    \ = int(fromstops[fromstopsoffset + i])\n            if stop < start:\n      \
    \          raise ValueError(\"stops[i] < starts[i]\")\n            if (start !=\
    \ stop) and (stop > contentlen):\n                raise ValueError(\"stops[i]\
    \ > len(content)\")\n            count = stop - start\n            for j in range(int(slicestart),\
    \ slicestop):\n                index = int(sliceindex[sliceindexoffset + j])\n\
    \                if index < 0:\n                    index += count\n         \
    \       if not ((0 <= index) and (index < count)):\n                    raise\
    \ ValueError(\"index out of range\")\n                tocarry[k] = start + index\n\
    \                k = k + 1\n        tooffsets[i + 1] = float(k)\n"
- args:
  - tooffsets: int64_t
  - tocarry: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - sliceouterlen: int64_t
  - sliceindex: int64_t
  - sliceindexoffset: int64_t
  - sliceinnerlen: int64_t
  - fromstarts: int32_t
  - fromstartsoffset: int64_t
  - fromstops: int32_t
  - fromstopsoffset: int64_t
  - contentlen: int64_t
  name: awkward_ListArray32_getitem_jagged_apply_64
  specification: "def awkward_ListArray32_getitem_jagged_apply_64(\n    tooffsets,\n\
    \    tocarry,\n    slicestarts,\n    slicestartsoffset,\n    slicestops,\n   \
    \ slicestopsoffset,\n    sliceouterlen,\n    sliceindex,\n    sliceindexoffset,\n\
    \    sliceinnerlen,\n    fromstarts,\n    fromstartsoffset,\n    fromstops,\n\
    \    fromstopsoffset,\n    contentlen,\n):\n    return awkward_ListArray_getitem_jagged_apply(\n\
    \        tooffsets,\n        tocarry,\n        slicestarts,\n        slicestartsoffset,\n\
    \        slicestops,\n        slicestopsoffset,\n        sliceouterlen,\n    \
    \    sliceindex,\n        sliceindexoffset,\n        sliceinnerlen,\n        fromstarts,\n\
    \        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n   \
    \     contentlen,\n    )\n"
- args:
  - tooffsets: int64_t
  - tocarry: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - sliceouterlen: int64_t
  - sliceindex: int64_t
  - sliceindexoffset: int64_t
  - sliceinnerlen: int64_t
  - fromstarts: uint32_t
  - fromstartsoffset: int64_t
  - fromstops: uint32_t
  - fromstopsoffset: int64_t
  - contentlen: int64_t
  name: awkward_ListArrayU32_getitem_jagged_apply_64
  specification: "def awkward_ListArrayU32_getitem_jagged_apply_64(\n    tooffsets,\n\
    \    tocarry,\n    slicestarts,\n    slicestartsoffset,\n    slicestops,\n   \
    \ slicestopsoffset,\n    sliceouterlen,\n    sliceindex,\n    sliceindexoffset,\n\
    \    sliceinnerlen,\n    fromstarts,\n    fromstartsoffset,\n    fromstops,\n\
    \    fromstopsoffset,\n    contentlen,\n):\n    return awkward_ListArray_getitem_jagged_apply(\n\
    \        tooffsets,\n        tocarry,\n        slicestarts,\n        slicestartsoffset,\n\
    \        slicestops,\n        slicestopsoffset,\n        sliceouterlen,\n    \
    \    sliceindex,\n        sliceindexoffset,\n        sliceinnerlen,\n        fromstarts,\n\
    \        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n   \
    \     contentlen,\n    )\n"
- args:
  - tooffsets: int64_t
  - tocarry: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - sliceouterlen: int64_t
  - sliceindex: int64_t
  - sliceindexoffset: int64_t
  - sliceinnerlen: int64_t
  - fromstarts: int64_t
  - fromstartsoffset: int64_t
  - fromstops: int64_t
  - fromstopsoffset: int64_t
  - contentlen: int64_t
  name: awkward_ListArray64_getitem_jagged_apply_64
  specification: "def awkward_ListArray64_getitem_jagged_apply_64(\n    tooffsets,\n\
    \    tocarry,\n    slicestarts,\n    slicestartsoffset,\n    slicestops,\n   \
    \ slicestopsoffset,\n    sliceouterlen,\n    sliceindex,\n    sliceindexoffset,\n\
    \    sliceinnerlen,\n    fromstarts,\n    fromstartsoffset,\n    fromstops,\n\
    \    fromstopsoffset,\n    contentlen,\n):\n    return awkward_ListArray_getitem_jagged_apply(\n\
    \        tooffsets,\n        tocarry,\n        slicestarts,\n        slicestartsoffset,\n\
    \        slicestops,\n        slicestopsoffset,\n        sliceouterlen,\n    \
    \    sliceindex,\n        sliceindexoffset,\n        sliceinnerlen,\n        fromstarts,\n\
    \        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n   \
    \     contentlen,\n    )\n"
- name: awkward_ListArray_getitem_jagged_numvalid
  specializations:
  - args:
    - numvalid: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - length: int64_t
    - missing: int64_t
    - missingoffset: int64_t
    - missinglength: int64_t
    name: awkward_ListArray_getitem_jagged_numvalid_64
  specification: "def awkward_ListArray_getitem_jagged_numvalid(\n    numvalid,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    length,\n    missing,\n    missingoffset,\n    missinglength,\n):\n    numvalid[0]\
    \ = 0\n    for i in range(int(length)):\n        slicestart = slicestarts[slicestartsoffset\
    \ + i]\n        slicestop = slicestops[slicestopsoffset + i]\n        if slicestart\
    \ != slicestop:\n            if slicestop < slicestart:\n                raise\
    \ ValueError(\"jagged slice's stops[i] < starts[i]\")\n            if slicestop\
    \ > missinglength:\n                raise ValueError(\"jagged slice's offsets\
    \ extend beyond its content\")\n            for j in range(int(slicestart), slicestop):\n\
    \                numvalid[0] = numvalid[0] + 1 if missing[missingoffset + j] >=\
    \ 0 else 0\n"
- args:
  - numvalid: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - length: int64_t
  - missing: int64_t
  - missingoffset: int64_t
  - missinglength: int64_t
  name: awkward_ListArray_getitem_jagged_numvalid_64
  specification: "def awkward_ListArray_getitem_jagged_numvalid_64(\n    numvalid,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    length,\n    missing,\n    missingoffset,\n    missinglength,\n):\n    return\
    \ awkward_ListArray_getitem_jagged_numvalid(\n        numvalid,\n        slicestarts,\n\
    \        slicestartsoffset,\n        slicestops,\n        slicestopsoffset,\n\
    \        length,\n        missing,\n        missingoffset,\n        missinglength,\n\
    \    )\n"
- name: awkward_ListArray_getitem_jagged_shrink
  specializations:
  - args:
    - tocarry: int64_t
    - tosmalloffsets: int64_t
    - tolargeoffsets: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - length: int64_t
    - missing: int64_t
    - missingoffset: int64_t
    name: awkward_ListArray_getitem_jagged_shrink_64
  specification: "def awkward_ListArray_getitem_jagged_shrink(\n    tocarry,\n   \
    \ tosmalloffsets,\n    tolargeoffsets,\n    slicestarts,\n    slicestartsoffset,\n\
    \    slicestops,\n    slicestopsoffset,\n    length,\n    missing,\n    missingoffset,\n\
    ):\n    k = 0\n    if length == 0:\n        tosmalloffsets[0] = 0\n        tolargeoffsets[0]\
    \ = 0\n    else:\n        tosmalloffsets[0] = slicestarts[slicestartsoffset +\
    \ 0]\n        tolargeoffsets[0] = slicestarts[slicestartsoffset + 0]\n    for\
    \ i in range(int(length)):\n        slicestart = slicestarts[slicestartsoffset\
    \ + i]\n        slicestop = slicestops[slicestopsoffset + i]\n        if slicestart\
    \ != slicestop:\n            smallcount = 0\n            for j in range(int(slicestart),\
    \ slicestop):\n                if missing[missingoffset + j] >= 0:\n         \
    \           tocarry[k] = j\n                    k = k + 1\n                  \
    \  smallcount = smallcount + 1\n            tosmalloffsets[i + 1] = tosmalloffsets[i]\
    \ + smallcount\n        else:\n            tosmalloffsets[i + 1] = tosmalloffsets[i]\n\
    \        tolargeoffsets[i + 1] = tolargeoffsets[i] + (slicestop - slicestart)\n"
- args:
  - tocarry: int64_t
  - tosmalloffsets: int64_t
  - tolargeoffsets: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - length: int64_t
  - missing: int64_t
  - missingoffset: int64_t
  name: awkward_ListArray_getitem_jagged_shrink_64
  specification: "def awkward_ListArray_getitem_jagged_shrink_64(\n    tocarry,\n\
    \    tosmalloffsets,\n    tolargeoffsets,\n    slicestarts,\n    slicestartsoffset,\n\
    \    slicestops,\n    slicestopsoffset,\n    length,\n    missing,\n    missingoffset,\n\
    ):\n    return awkward_ListArray_getitem_jagged_shrink(\n        tocarry,\n  \
    \      tosmalloffsets,\n        tolargeoffsets,\n        slicestarts,\n      \
    \  slicestartsoffset,\n        slicestops,\n        slicestopsoffset,\n      \
    \  length,\n        missing,\n        missingoffset,\n    )\n"
- name: awkward_ListArray_getitem_jagged_descend
  specializations:
  - args:
    - tooffsets: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - sliceouterlen: int64_t
    - fromstarts: int64_t
    - fromstartsoffset: int64_t
    - fromstops: int64_t
    - fromstopsoffset: int64_t
    name: awkward_ListArray64_getitem_jagged_descend_64
  - args:
    - tooffsets: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - sliceouterlen: int64_t
    - fromstarts: int32_t
    - fromstartsoffset: int64_t
    - fromstops: int32_t
    - fromstopsoffset: int64_t
    name: awkward_ListArray32_getitem_jagged_descend_64
  - args:
    - tooffsets: int64_t
    - slicestarts: int64_t
    - slicestartsoffset: int64_t
    - slicestops: int64_t
    - slicestopsoffset: int64_t
    - sliceouterlen: int64_t
    - fromstarts: uint32_t
    - fromstartsoffset: int64_t
    - fromstops: uint32_t
    - fromstopsoffset: int64_t
    name: awkward_ListArrayU32_getitem_jagged_descend_64
  specification: "def awkward_ListArray_getitem_jagged_descend(\n    tooffsets,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    sliceouterlen,\n    fromstarts,\n    fromstartsoffset,\n    fromstops,\n\
    \    fromstopsoffset,\n):\n    if sliceouterlen == 0:\n        tooffsets[0] =\
    \ 0\n    else:\n        tooffsets[0] = slicestarts[slicestartsoffset + 0]\n  \
    \  for i in range(int(sliceouterlen)):\n        slicecount = int(\n          \
    \  slicestops[slicestopsoffset + i] - slicestarts[slicestartsoffset + i]\n   \
    \     )\n        count = int(fromstops[fromstopsoffset + i] - fromstarts[fromstartsoffset\
    \ + i])\n        if slicecount != count:\n            raise ValueError(\n    \
    \            \"jagged slice inner length differs from array inner length\"\n \
    \           )\n        tooffsets[i + 1] = tooffsets[i] + float(count)\n"
- args:
  - tooffsets: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - sliceouterlen: int64_t
  - fromstarts: int32_t
  - fromstartsoffset: int64_t
  - fromstops: int32_t
  - fromstopsoffset: int64_t
  name: awkward_ListArray32_getitem_jagged_descend_64
  specification: "def awkward_ListArray32_getitem_jagged_descend_64(\n    tooffsets,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    sliceouterlen,\n    fromstarts,\n    fromstartsoffset,\n    fromstops,\n\
    \    fromstopsoffset,\n):\n    return awkward_ListArray_getitem_jagged_descend(\n\
    \        tooffsets,\n        slicestarts,\n        slicestartsoffset,\n      \
    \  slicestops,\n        slicestopsoffset,\n        sliceouterlen,\n        fromstarts,\n\
    \        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n   \
    \ )\n"
- args:
  - tooffsets: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - sliceouterlen: int64_t
  - fromstarts: uint32_t
  - fromstartsoffset: int64_t
  - fromstops: uint32_t
  - fromstopsoffset: int64_t
  name: awkward_ListArrayU32_getitem_jagged_descend_64
  specification: "def awkward_ListArrayU32_getitem_jagged_descend_64(\n    tooffsets,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    sliceouterlen,\n    fromstarts,\n    fromstartsoffset,\n    fromstops,\n\
    \    fromstopsoffset,\n):\n    return awkward_ListArray_getitem_jagged_descend(\n\
    \        tooffsets,\n        slicestarts,\n        slicestartsoffset,\n      \
    \  slicestops,\n        slicestopsoffset,\n        sliceouterlen,\n        fromstarts,\n\
    \        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n   \
    \ )\n"
- args:
  - tooffsets: int64_t
  - slicestarts: int64_t
  - slicestartsoffset: int64_t
  - slicestops: int64_t
  - slicestopsoffset: int64_t
  - sliceouterlen: int64_t
  - fromstarts: int64_t
  - fromstartsoffset: int64_t
  - fromstops: int64_t
  - fromstopsoffset: int64_t
  name: awkward_ListArray64_getitem_jagged_descend_64
  specification: "def awkward_ListArray64_getitem_jagged_descend_64(\n    tooffsets,\n\
    \    slicestarts,\n    slicestartsoffset,\n    slicestops,\n    slicestopsoffset,\n\
    \    sliceouterlen,\n    fromstarts,\n    fromstartsoffset,\n    fromstops,\n\
    \    fromstopsoffset,\n):\n    return awkward_ListArray_getitem_jagged_descend(\n\
    \        tooffsets,\n        slicestarts,\n        slicestartsoffset,\n      \
    \  slicestops,\n        slicestopsoffset,\n        sliceouterlen,\n        fromstarts,\n\
    \        fromstartsoffset,\n        fromstops,\n        fromstopsoffset,\n   \
    \ )\n"
- args:
  - ptr: int8_t
  - offset: int64_t
  - at: int64_t
  name: awkward_Index8_getitem_at_nowrap
  specification: "def awkward_Index8_getitem_at_nowrap(ptr, offset, at):\n    return\
    \ ptr[offset + at]\n"
- args:
  - ptr: uint8_t
  - offset: int64_t
  - at: int64_t
  name: awkward_IndexU8_getitem_at_nowrap
  specification: "def awkward_IndexU8_getitem_at_nowrap(ptr, offset, at):\n    return\
    \ ptr[offset + at]\n"
- args:
  - ptr: int32_t
  - offset: int64_t
  - at: int64_t
  name: awkward_Index32_getitem_at_nowrap
  specification: "def awkward_Index32_getitem_at_nowrap(ptr, offset, at):\n    return\
    \ ptr[offset + at]\n"
- args:
  - ptr: uint32_t
  - offset: int64_t
  - at: int64_t
  name: awkward_IndexU32_getitem_at_nowrap
  specification: "def awkward_IndexU32_getitem_at_nowrap(ptr, offset, at):\n    return\
    \ ptr[offset + at]\n"
- args:
  - ptr: int64_t
  - offset: int64_t
  - at: int64_t
  name: awkward_Index64_getitem_at_nowrap
  specification: "def awkward_Index64_getitem_at_nowrap(ptr, offset, at):\n    return\
    \ ptr[offset + at]\n"
- args:
  - ptr: bool
  - at: int64_t
  name: awkward_NumpyArraybool_getitem_at
  specification: "def awkward_NumpyArraybool_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: int8_t
  - at: int64_t
  name: awkward_NumpyArray8_getitem_at
  specification: "def awkward_NumpyArray8_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: uint8_t
  - at: int64_t
  name: awkward_NumpyArrayU8_getitem_at
  specification: "def awkward_NumpyArrayU8_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: int16_t
  - at: int64_t
  name: awkward_NumpyArray16_getitem_at
  specification: "def awkward_NumpyArray16_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: uint16_t
  - at: int64_t
  name: awkward_NumpyArrayU16_getitem_at
  specification: "def awkward_NumpyArrayU16_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: int32_t
  - at: int64_t
  name: awkward_NumpyArray32_getitem_at
  specification: "def awkward_NumpyArray32_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: uint32_t
  - at: int64_t
  name: awkward_NumpyArrayU32_getitem_at
  specification: "def awkward_NumpyArrayU32_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: int64_t
  - at: int64_t
  name: awkward_NumpyArray64_getitem_at
  specification: "def awkward_NumpyArray64_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: uint64_t
  - at: int64_t
  name: awkward_NumpyArrayU64_getitem_at
  specification: "def awkward_NumpyArrayU64_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - at: int64_t
  name: awkward_NumpyArrayfloat32_getitem_at
  specification: "def awkward_NumpyArrayfloat32_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - at: int64_t
  name: awkward_NumpyArrayfloat64_getitem_at
  specification: "def awkward_NumpyArrayfloat64_getitem_at(ptr, at):\n    return ptr[at]\n"
- args:
  - ptr: int8_t
  - offset: int64_t
  - at: int64_t
  - value: int8_t
  name: awkward_Index8_setitem_at_nowrap
  specification: "def awkward_Index8_setitem_at_nowrap(ptr, offset, at, value):\n\
    \    ptr[offset + at] = value\n"
- args:
  - ptr: uint8_t
  - offset: int64_t
  - at: int64_t
  - value: uint8_t
  name: awkward_IndexU8_setitem_at_nowrap
  specification: "def awkward_IndexU8_setitem_at_nowrap(ptr, offset, at, value):\n\
    \    ptr[offset + at] = value\n"
- args:
  - ptr: int32_t
  - offset: int64_t
  - at: int64_t
  - value: int32_t
  name: awkward_Index32_setitem_at_nowrap
  specification: "def awkward_Index32_setitem_at_nowrap(ptr, offset, at, value):\n\
    \    ptr[offset + at] = value\n"
- args:
  - ptr: uint32_t
  - offset: int64_t
  - at: int64_t
  - value: uint32_t
  name: awkward_IndexU32_setitem_at_nowrap
  specification: "def awkward_IndexU32_setitem_at_nowrap(ptr, offset, at, value):\n\
    \    ptr[offset + at] = value\n"
- args:
  - ptr: int64_t
  - offset: int64_t
  - at: int64_t
  - value: int64_t
  name: awkward_Index64_setitem_at_nowrap
  specification: "def awkward_Index64_setitem_at_nowrap(ptr, offset, at, value):\n\
    \    ptr[offset + at] = value\n"
- name: awkward_ByteMaskedArray_getitem_carry
  specializations:
  - args:
    - tomask: int8_t
    - frommask: int8_t
    - frommaskoffset: int64_t
    - lenmask: int64_t
    - fromcarry: int64_t
    - lencarry: int64_t
    name: awkward_ByteMaskedArray_getitem_carry_64
  specification: "def awkward_ByteMaskedArray_getitem_carry(\n    tomask, frommask,\
    \ frommaskoffset, lenmask, fromcarry, lencarry\n):\n    for i in range(int(lencarry)):\n\
    \        if fromcarry[i] >= lenmask:\n            raise ValueError(\"index out\
    \ of range\")\n        tomask[i] = frommask[frommaskoffset + fromcarry[i]]\n"
- args:
  - tomask: int8_t
  - frommask: int8_t
  - frommaskoffset: int64_t
  - lenmask: int64_t
  - fromcarry: int64_t
  - lencarry: int64_t
  name: awkward_ByteMaskedArray_getitem_carry_64
  specification: "def awkward_ByteMaskedArray_getitem_carry_64(\n    tomask, frommask,\
    \ frommaskoffset, lenmask, fromcarry, lencarry\n):\n    return awkward_ByteMaskedArray_getitem_carry(\n\
    \        tomask, frommask, frommaskoffset, lenmask, fromcarry, lencarry\n    )\n"
- args:
  - numnull: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - length: int64_t
  - validwhen: bool
  name: awkward_ByteMaskedArray_numnull
  specification: "def awkward_ByteMaskedArray_numnull(numnull, mask, maskoffset, length,\
    \ validwhen):\n    numnull[0] = 0\n    for i in range(int(length)):\n        if\
    \ (mask[maskoffset + i] != 0) != validwhen:\n            numnull[0] = numnull[0]\
    \ + 1\n"
- name: awkward_ByteMaskedArray_getitem_nextcarry
  specializations:
  - args:
    - tocarry: int64_t
    - mask: int8_t
    - maskoffset: int64_t
    - length: int64_t
    - validwhen: bool
    name: awkward_ByteMaskedArray_getitem_nextcarry_64
  specification: "def awkward_ByteMaskedArray_getitem_nextcarry(\n    tocarry, mask,\
    \ maskoffset, length, validwhen\n):\n    k = 0\n    for i in range(int(length)):\n\
    \        if (mask[maskoffset + i] != 0) == validwhen:\n            tocarry[k]\
    \ = i\n            k = k + 1\n"
- args:
  - tocarry: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - length: int64_t
  - validwhen: bool
  name: awkward_ByteMaskedArray_getitem_nextcarry_64
  specification: "def awkward_ByteMaskedArray_getitem_nextcarry_64(\n    tocarry,\
    \ mask, maskoffset, length, validwhen\n):\n    return awkward_ByteMaskedArray_getitem_nextcarry(\n\
    \        tocarry, mask, maskoffset, length, validwhen\n    )\n"
- name: awkward_ByteMaskedArray_getitem_nextcarry_outindex
  specializations:
  - args:
    - tocarry: int64_t
    - toindex: int64_t
    - mask: int8_t
    - maskoffset: int64_t
    - length: int64_t
    - validwhen: bool
    name: awkward_ByteMaskedArray_getitem_nextcarry_outindex_64
  specification: "def awkward_ByteMaskedArray_getitem_nextcarry_outindex(\n    tocarry,\
    \ toindex, mask, maskoffset, length, validwhen\n):\n    k = 0\n    for i in range(int(length)):\n\
    \        if (mask[maskoffset + i] != 0) == validwhen:\n            tocarry[k]\
    \ = i\n            toindex[i] = float(k)\n            k = k + 1\n        else:\n\
    \            toindex[i] = -1\n"
- args:
  - tocarry: int64_t
  - toindex: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - length: int64_t
  - validwhen: bool
  name: awkward_ByteMaskedArray_getitem_nextcarry_outindex_64
  specification: "def awkward_ByteMaskedArray_getitem_nextcarry_outindex_64(\n   \
    \ tocarry, toindex, mask, maskoffset, length, validwhen\n):\n    return awkward_ByteMaskedArray_getitem_nextcarry_outindex(\n\
    \        tocarry, toindex, mask, maskoffset, length, validwhen\n    )\n"
- name: awkward_ByteMaskedArray_toIndexedOptionArray
  specializations:
  - args:
    - toindex: int64_t
    - mask: int8_t
    - maskoffset: int64_t
    - length: int64_t
    - validwhen: bool
    name: awkward_ByteMaskedArray_toIndexedOptionArray64
  specification: "def awkward_ByteMaskedArray_toIndexedOptionArray(\n    toindex,\
    \ mask, maskoffset, length, validwhen\n):\n    for i in range(int(length)):\n\
    \        toindex[i] = i if (mask[maskoffset + i] != 0) == validwhen else -1\n"
- args:
  - toindex: int64_t
  - mask: int8_t
  - maskoffset: int64_t
  - length: int64_t
  - validwhen: bool
  name: awkward_ByteMaskedArray_toIndexedOptionArray64
  specification: "def awkward_ByteMaskedArray_toIndexedOptionArray64(\n    toindex,\
    \ mask, maskoffset, length, validwhen\n):\n    return awkward_ByteMaskedArray_toIndexedOptionArray(\n\
    \        toindex, mask, maskoffset, length, validwhen\n    )\n"
- args:
  - stops_out int64_t length: int64_t
  name: awkward_Content_getitem_next_missing_jagged_getmaskstartstop
  specification: "def awkward_Content_getitem_next_missing_jagged_getmaskstartstop(\n\
    \    index_in,\n    index_in_offset,\n    offsets_in,\n    offsets_in_offset,\n\
    \    mask_out,\n    starts_out,\n    stops_out,\n    length,\n):\n    k = 0\n\
    \    i = 0\n    while i < length:\n        starts_out[i] = offsets_in[k + offsets_in_offset]\n\
    \        if index_in[i + index_in_offset] < 0:\n            mask_out[i] = -1\n\
    \            stops_out[i] = offsets_in[k + offsets_in_offset]\n        else:\n\
    \            mask_out[i] = i\n            k += 1\n            stops_out[i] = offsets_in[k\
    \ + offsets_in_offset]\n        i = i + 1\n"
- name: awkward_MaskedArray_getitem_next_jagged_project
  specializations:
  - args:
    - starts_out int64_t* stops_out int64_t length: int64_t
    name: awkward_MaskedArray32_getitem_next_jagged_project
  - args:
    - starts_out int64_t* stops_out int64_t length: int64_t
    name: awkward_MaskedArrayU32_getitem_next_jagged_project
  - args:
    - starts_out int64_t* stops_out int64_t length: int64_t
    name: awkward_MaskedArray64_getitem_next_jagged_project
  specification: "def awkward_MaskedArray_getitem_next_jagged_project(\n    index,\n\
    \    index_offset,\n    starts_in,\n    starts_offset,\n    stops_in,\n    stops_offset,\n\
    \    starts_out,\n    stops_out,\n    length,\n):\n    k = 0\n    i = 0\n    while\
    \ i < length:\n        if index[i + index_offset] >= 0:\n            starts_out[k]\
    \ = starts_in[i + starts_offset]\n            stops_out[k] = stops_in[i + stops_offset]\n\
    \            k = k + 1\n        i = i + 1\n"
- args:
  - starts_out int64_t* stops_out int64_t length: int64_t
  name: awkward_MaskedArray32_getitem_next_jagged_project
  specification: "def awkward_MaskedArray32_getitem_next_jagged_project(\n    index,\n\
    \    index_offset,\n    starts_in,\n    starts_offset,\n    stops_in,\n    stops_offset,\n\
    \    starts_out,\n    stops_out,\n    length,\n):\n    return awkward_MaskedArray_getitem_next_jagged_project(\n\
    \        index,\n        index_offset,\n        starts_in,\n        starts_offset,\n\
    \        stops_in,\n        stops_offset,\n        starts_out,\n        stops_out,\n\
    \        length,\n    )\n"
- args:
  - starts_out int64_t* stops_out int64_t length: int64_t
  name: awkward_MaskedArrayU32_getitem_next_jagged_project
  specification: "def awkward_MaskedArrayU32_getitem_next_jagged_project(\n    index,\n\
    \    index_offset,\n    starts_in,\n    starts_offset,\n    stops_in,\n    stops_offset,\n\
    \    starts_out,\n    stops_out,\n    length,\n):\n    return awkward_MaskedArray_getitem_next_jagged_project(\n\
    \        index,\n        index_offset,\n        starts_in,\n        starts_offset,\n\
    \        stops_in,\n        stops_offset,\n        starts_out,\n        stops_out,\n\
    \        length,\n    )\n"
- args:
  - starts_out int64_t* stops_out int64_t length: int64_t
  name: awkward_MaskedArray64_getitem_next_jagged_project
  specification: "def awkward_MaskedArray64_getitem_next_jagged_project(\n    index,\n\
    \    index_offset,\n    starts_in,\n    starts_offset,\n    stops_in,\n    stops_offset,\n\
    \    starts_out,\n    stops_out,\n    length,\n):\n    return awkward_MaskedArray_getitem_next_jagged_project(\n\
    \        index,\n        index_offset,\n        starts_in,\n        starts_offset,\n\
    \        stops_in,\n        stops_offset,\n        starts_out,\n        stops_out,\n\
    \        length,\n    )\n"
- args:
  - toindex: int64_t
  - tolength: int64_t
  - parents: int64_t
  - parentslength: int64_t
  name: awkward_sorting_ranges
- args:
  - tolength: int64_t
  - parents: int64_t
  - parentslength: int64_t
  name: awkward_sorting_ranges_length
- name: awkward_argsort
  specializations:
  - args:
    - toptr: int64_t
    - fromptr: int32_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_int32
  - args:
    - toptr: int64_t
    - fromptr: uint64_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_uint64
  - args:
    - toptr: int64_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_float32
  - args:
    - toptr: int64_t
    - fromptr: uint16_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_uint16
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_int64
  - args:
    - toptr: int64_t
    - fromptr: uint8_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_uint8
  - args:
    - toptr: int64_t
    - fromptr: int8_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_int8
  - args:
    - toptr: int64_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_float64
  - args:
    - toptr: int64_t
    - fromptr: bool
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_bool
  - args:
    - toptr: int64_t
    - fromptr: int16_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_int16
  - args:
    - toptr: int64_t
    - fromptr: uint32_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_argsort_uint32
- args:
  - toptr: int64_t
  - fromptr: bool
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_bool
- args:
  - toptr: int64_t
  - fromptr: int8_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_int8
- args:
  - toptr: int64_t
  - fromptr: uint8_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_uint8
- args:
  - toptr: int64_t
  - fromptr: int16_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_int16
- args:
  - toptr: int64_t
  - fromptr: uint16_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_uint16
- args:
  - toptr: int64_t
  - fromptr: int32_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_int32
- args:
  - toptr: int64_t
  - fromptr: uint32_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_uint32
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_int64
- args:
  - toptr: int64_t
  - fromptr: uint64_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_uint64
- args:
  - toptr: int64_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_float32
- args:
  - toptr: int64_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_argsort_float64
- name: awkward_sort
  specializations:
  - args:
    - toptr: int32_t
    - fromptr: int32_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_int32
  - args:
    - toptr: uint64_t
    - fromptr: uint64_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_uint64
  - args:
    - toptr: int16_t
    - fromptr: int16_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_int16
  - args:
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_float32
  - args:
    - toptr: uint8_t
    - fromptr: uint8_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_uint8
  - args:
    - toptr: uint32_t
    - fromptr: uint32_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_uint32
  - args:
    - toptr: int8_t
    - fromptr: int8_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_int8
  - args:
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_float64
  - args:
    - toptr: uint16_t
    - fromptr: uint16_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_uint16
  - args:
    - toptr: int64_t
    - fromptr: int64_t
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_int64
  - args:
    - toptr: bool
    - fromptr: bool
    - length: int64_t
    - offsets: int64_t
    - offsetslength: int64_t
    - parentslength: int64_t
    - ascending: bool
    - stable: bool
    name: awkward_sort_bool
- args:
  - toptr: bool
  - fromptr: bool
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_bool
- args:
  - toptr: int8_t
  - fromptr: int8_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_int8
- args:
  - toptr: uint8_t
  - fromptr: uint8_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_uint8
- args:
  - toptr: int16_t
  - fromptr: int16_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_int16
- args:
  - toptr: uint16_t
  - fromptr: uint16_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_uint16
- args:
  - toptr: int32_t
  - fromptr: int32_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_int32
- args:
  - toptr: uint32_t
  - fromptr: uint32_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_uint32
- args:
  - toptr: int64_t
  - fromptr: int64_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_int64
- args:
  - toptr: uint64_t
  - fromptr: uint64_t
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_uint64
- args:
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_float32
- args:
  - length: int64_t
  - offsets: int64_t
  - offsetslength: int64_t
  - parentslength: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_sort_float64
- args:
  - tocarry: int64_t
  - fromindex: int64_t
  - length: int64_t
  - i1 int64_t i2: int64_t
  name: awkward_ListOffsetArray_local_preparenext_64
- args:
  - tocarry: int64_t
  - starts: int64_t
  - parents: int64_t
  - parentsoffset: int64_t
  - parentslength: int64_t
  - nextparents: int64_t
  - nextparentsoffset: int64_t
  name: awkward_IndexedArray_local_preparenext_64
- args:
  - toptr: uint8_t
  - fromptr: uint8_t
  - offsets: int64_t
  - offsetslength: int64_t
  - outoffsets: int64_t
  - ascending: bool
  - stable: bool
  name: awkward_NumpyArray_sort_asstrings_uint8
